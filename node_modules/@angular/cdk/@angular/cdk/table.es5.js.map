{"version":3,"file":"table.es5.js","sources":["../../../src/cdk/table/index.ts","../../../src/cdk/table/public_api.ts","../../../src/cdk/table/table.ts","../../../src/cdk/table/table-errors.ts","../../../src/cdk/table/cell.ts","../../../src/cdk/table/row.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {DataSource,CdkTableModule,RowPlaceholder,HeaderRowPlaceholder,CDK_TABLE_TEMPLATE,CdkTable,CdkCellDef,CdkHeaderCellDef,CdkColumnDef,CdkHeaderCell,CdkCell,CDK_ROW_TEMPLATE,BaseRowDef,CdkHeaderRowDef,CdkRowDef,CdkCellOutletRowContext,CdkCellOutlet,CdkHeaderRow,CdkRow} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {HeaderRowPlaceholder, RowPlaceholder, CdkTable} from './table';\nimport {CdkCellOutlet, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef} from './row';\nimport {CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCell, CdkCellDef} from './cell';\n\nexport {RowPlaceholder,HeaderRowPlaceholder,CDK_TABLE_TEMPLATE,CdkTable} from './table';\nexport {CdkCellDef,CdkHeaderCellDef,CdkColumnDef,CdkHeaderCell,CdkCell} from './cell';\nexport {CDK_ROW_TEMPLATE,BaseRowDef,CdkHeaderRowDef,CdkRowDef,CdkCellOutletRowContext,CdkCellOutlet,CdkHeaderRow,CdkRow} from './row';\n\n/** Re-export DataSource for a more intuitive experience for users of just the table. */\nexport {DataSource} from '@angular/cdk/collections';\n\nconst /** @type {?} */ EXPORTED_DECLARATIONS = [\n  CdkTable,\n  CdkRowDef,\n  CdkCellDef,\n  CdkCellOutlet,\n  CdkHeaderCellDef,\n  CdkColumnDef,\n  CdkCell,\n  CdkRow,\n  CdkHeaderCell,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  RowPlaceholder,\n  HeaderRowPlaceholder,\n];\nexport class CdkTableModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  exports: [EXPORTED_DECLARATIONS],\n  declarations: [EXPORTED_DECLARATIONS]\n\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkTableModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkTableModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkTableModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  Input,\n  isDevMode,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  QueryList,\n  Renderer2,\n  TrackByFunction,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {CdkCellOutlet, CdkCellOutletRowContext, CdkHeaderRowDef, CdkRowDef} from './row';\nimport {takeUntil} from 'rxjs/operator/takeUntil';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Subject} from 'rxjs/Subject';\nimport {CdkCellDef, CdkColumnDef, CdkHeaderCellDef} from './cell';\nimport {getTableDuplicateColumnNameError, getTableUnknownColumnError} from './table-errors';\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nexport class RowPlaceholder {\n/**\n * @param {?} viewContainer\n */\nconstructor(public viewContainer: ViewContainerRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[rowPlaceholder]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RowPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nRowPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRowPlaceholder.ctorParameters;\n/** @type {?} */\nRowPlaceholder.prototype.viewContainer;\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nexport class HeaderRowPlaceholder {\n/**\n * @param {?} viewContainer\n */\nconstructor(public viewContainer: ViewContainerRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[headerRowPlaceholder]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction HeaderRowPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nHeaderRowPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHeaderRowPlaceholder.ctorParameters;\n/** @type {?} */\nHeaderRowPlaceholder.prototype.viewContainer;\n}\n\n/**\n * The table template that can be used by the md-table. Should not be used outside of the\n * material library.\n */\nexport const CDK_TABLE_TEMPLATE = `\n  <ng-container headerRowPlaceholder></ng-container>\n  <ng-container rowPlaceholder></ng-container>`;\n/**\n * A data table that connects with a data source to retrieve data of type `T` and renders\n * a header row and data rows. Updates the rows when new data is provided by the data source.\n */\nexport class CdkTable<T> implements CollectionViewer {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\n/**\n * Latest data provided by the data source through the connect interface.\n */\nprivate _data: NgIterable<T> = [];\n/**\n * Subscription that listens for the data provided by the data source.\n */\nprivate _renderChangeSubscription: Subscription | null;\n/**\n * Map of all the user's defined columns (header and data cell template) identified by name.\n */\nprivate _columnDefinitionsByName = new Map<string,  CdkColumnDef>();\n/**\n * Differ used to find the changes in the data provided by the data source.\n */\nprivate _dataDiffer: IterableDiffer<T>;\n/**\n * Tracking function that will be used to check the differences in data changes. Used similarly\n * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n * relative to the function to know if a row should be added/removed/moved.\n * Accepts a function that takes two parameters, `index` and `item`.\n * @param {?} fn\n * @return {?}\n */\nset trackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() &&\n        fn != null && typeof fn !== 'function' && /** @type {?} */((\n        <any>console)) && /** @type {?} */(( <any>console.warn))) {\n        console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n    }\n    this._trackByFn = fn;\n  }\n/**\n * @return {?}\n */\nget trackBy(): TrackByFunction<T> { return this._trackByFn; }\nprivate _trackByFn: TrackByFunction<T>;\n/**\n * Provides a stream containing the latest data array to render. Influenced by the table's\n * stream of view window (what rows are currently on screen).\n * @return {?}\n */\nget dataSource(): DataSource<T> { return this._dataSource; }\n/**\n * @param {?} dataSource\n * @return {?}\n */\nset dataSource(dataSource: DataSource<T>) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\nprivate _dataSource: DataSource<T>;\n/**\n * Stream containing the latest information on what rows are being displayed on screen.\n * Can be used by the data source to as a heuristic of what data should be provided.\n */\nviewChange =\n      new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\n\n  // Placeholders within the table's template where the header and data rows will be inserted.\n   _rowPlaceholder: RowPlaceholder;\n   _headerRowPlaceholder: HeaderRowPlaceholder;\n/**\n * The column definitions provided by the user that contain what the header and cells should\n * render for each column.\n */\n_columnDefinitions: QueryList<CdkColumnDef>;\n/**\n * Template used as the header container.\n */\n_headerDefinition: CdkHeaderRowDef;\n/**\n * Set of templates that used as the data row containers.\n */\n_rowDefinitions: QueryList<CdkRowDef>;\n/**\n * @param {?} _differs\n * @param {?} _changeDetectorRef\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} role\n */\nconstructor(private readonly _differs: IterableDiffers,\nprivate readonly _changeDetectorRef: ChangeDetectorRef,\n              elementRef: ElementRef,\n              renderer: Renderer2,\n               role: string) {\n    if (!role) {\n      renderer.setAttribute(elementRef.nativeElement, 'role', 'grid');\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // TODO(andrewseguin): Setup a listener for scrolling, emit the calculated view to viewChange\n    this._dataDiffer = this._differs.find([]).create(this._trackByFn);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._cacheColumnDefinitionsByName();\n    this._columnDefinitions.changes.subscribe(() => this._cacheColumnDefinitionsByName());\n    this._renderHeaderRow();\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._renderUpdatedColumns();\n    if (this.dataSource && !this._renderChangeSubscription) {\n      this._observeRenderChanges();\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._rowPlaceholder.viewContainer.clear();\n    this._headerRowPlaceholder.viewContainer.clear();\n    this._onDestroy.next();\n    this._onDestroy.complete();\n\n    if (this.dataSource) {\n      this.dataSource.disconnect(this);\n    }\n  }\n/**\n * Update the map containing the content's column definitions.\n * @return {?}\n */\nprivate _cacheColumnDefinitionsByName() {\n    this._columnDefinitionsByName.clear();\n    this._columnDefinitions.forEach(columnDef => {\n      if (this._columnDefinitionsByName.has(columnDef.name)) {\n        throw getTableDuplicateColumnNameError(columnDef.name);\n      }\n      this._columnDefinitionsByName.set(columnDef.name, columnDef);\n    });\n  }\n/**\n * Check if the header or rows have changed what columns they want to display. If there is a diff,\n * then re-render that section.\n * @return {?}\n */\nprivate _renderUpdatedColumns() {\n    // Re-render the rows when the row definition columns change.\n    this._rowDefinitions.forEach(rowDefinition => {\n      if (!!rowDefinition.getColumnsDiff()) {\n        // Reset the data to an empty array so that renderRowChanges will re-render all new rows.\n        this._dataDiffer.diff([]);\n\n        this._rowPlaceholder.viewContainer.clear();\n        this._renderRowChanges();\n      }\n    });\n\n    // Re-render the header row if there is a difference in its columns.\n    if (this._headerDefinition.getColumnsDiff()) {\n      this._headerRowPlaceholder.viewContainer.clear();\n      this._renderHeaderRow();\n    }\n  }\n/**\n * Switch to the provided data source by resetting the data and unsubscribing from the current\n * render change subscription if one exists. If the data source is null, interpret this by\n * clearing the row placeholder. Otherwise start listening for new data.\n * @param {?} dataSource\n * @return {?}\n */\nprivate _switchDataSource(dataSource: DataSource<T>) {\n    this._data = [];\n\n    if (this.dataSource) {\n      this.dataSource.disconnect(this);\n    }\n\n    // Stop listening for data from the previous data source.\n    if (this._renderChangeSubscription) {\n      this._renderChangeSubscription.unsubscribe();\n      this._renderChangeSubscription = null;\n    }\n\n    // Remove the table's rows if there is now no data source\n    if (!dataSource) {\n      this._rowPlaceholder.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n  }\n/**\n * Set up a subscription for the data provided by the data source.\n * @return {?}\n */\nprivate _observeRenderChanges() {\n    this._renderChangeSubscription = takeUntil.call(this.dataSource.connect(this), this._onDestroy)\n      .subscribe(data => {\n        this._data = data;\n        this._renderRowChanges();\n      });\n  }\n/**\n * Create the embedded view for the header template and place it in the header row view container.\n * @return {?}\n */\nprivate _renderHeaderRow() {\n    const /** @type {?} */ cells = this._getHeaderCellTemplatesForRow(this._headerDefinition);\n    if (!cells.length) { return; }\n\n    // TODO(andrewseguin): add some code to enforce that exactly\n    //   one CdkCellOutlet was instantiated as a result\n    //   of `createEmbeddedView`.\n    this._headerRowPlaceholder.viewContainer\n        .createEmbeddedView(this._headerDefinition.template, {cells});\n\n    cells.forEach(cell => {\n      CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cell.template, {});\n    });\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Check for changes made in the data and render each change (row added/removed/moved).\n * @return {?}\n */\nprivate _renderRowChanges() {\n    const /** @type {?} */ changes = this._dataDiffer.diff(this._data);\n    if (!changes) { return; }\n\n    const /** @type {?} */ viewContainer = this._rowPlaceholder.viewContainer;\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            this._insertRow(this._data[currentIndex], currentIndex);\n          } else if (currentIndex == null) {\n            viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const /** @type {?} */ view = viewContainer.get(adjustedPreviousIndex);\n            viewContainer.move( /** @type {?} */((view)), currentIndex);\n          }\n        });\n\n    this._updateRowContext();\n  }\n/**\n * Create the embedded view for the data row template and place it in the correct index location\n * within the data row view container.\n * @param {?} rowData\n * @param {?} index\n * @return {?}\n */\nprivate _insertRow(rowData: T, index: number) {\n    // TODO(andrewseguin): Add when predicates to the row definitions\n    //   to find the right template to used based on\n    //   the data rather than choosing the first row definition.\n    const /** @type {?} */ row = this._rowDefinitions.first;\n\n    // Row context that will be provided to both the created embedded row view and its cells.\n    const /** @type {?} */ context: CdkCellOutletRowContext<T> = {$implicit: rowData};\n\n    // TODO(andrewseguin): add some code to enforce that exactly one\n    //   CdkCellOutlet was instantiated as a result  of `createEmbeddedView`.\n    this._rowPlaceholder.viewContainer.createEmbeddedView(row.template, context, index);\n\n    // Insert empty cells if there is no data to improve rendering time.\n    const /** @type {?} */ cells = rowData ? this._getCellTemplatesForRow(row) : [];\n\n    cells.forEach(cell => {\n      CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cell.template, context);\n    });\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Updates the context for each row to reflect any data changes that may have caused\n * rows to be added, removed, or moved. The view container contains the same context\n * that was provided to each of its cells.\n * @return {?}\n */\nprivate _updateRowContext() {\n    const /** @type {?} */ viewContainer = this._rowPlaceholder.viewContainer;\n    for (let /** @type {?} */ index = 0, /** @type {?} */ count = viewContainer.length; index < count; index++) {\n      const /** @type {?} */ viewRef = /** @type {?} */(( viewContainer.get(index) as EmbeddedViewRef<CdkCellOutletRowContext<T>>));\n      viewRef.context.index = index;\n      viewRef.context.count = count;\n      viewRef.context.first = index === 0;\n      viewRef.context.last = index === count - 1;\n      viewRef.context.even = index % 2 === 0;\n      viewRef.context.odd = !viewRef.context.even;\n    }\n  }\n/**\n * Returns the cell template definitions to insert into the header\n * as defined by its list of columns to display.\n * @param {?} headerDef\n * @return {?}\n */\nprivate _getHeaderCellTemplatesForRow(headerDef: CdkHeaderRowDef): CdkHeaderCellDef[] {\n    if (!headerDef.columns) { return []; }\n    return headerDef.columns.map(columnId => {\n      const /** @type {?} */ column = this._columnDefinitionsByName.get(columnId);\n\n      if (!column) {\n        throw getTableUnknownColumnError(columnId);\n      }\n\n      return column.headerCell;\n    });\n  }\n/**\n * Returns the cell template definitions to insert in the provided row\n * as defined by its list of columns to display.\n * @param {?} rowDef\n * @return {?}\n */\nprivate _getCellTemplatesForRow(rowDef: CdkRowDef): CdkCellDef[] {\n    if (!rowDef.columns) { return []; }\n    return rowDef.columns.map(columnId => {\n      const /** @type {?} */ column = this._columnDefinitionsByName.get(columnId);\n\n      if (!column) {\n        throw getTableUnknownColumnError(columnId);\n      }\n\n      return column.cell;\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-table',\n  template: CDK_TABLE_TEMPLATE,\n  host: {\n    'class': 'cdk-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: IterableDiffers, },\n{type: ChangeDetectorRef, },\n{type: ElementRef, },\n{type: Renderer2, },\n{type: undefined, decorators: [{ type: Attribute, args: ['role', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trackBy': [{ type: Input },],\n'dataSource': [{ type: Input },],\n'_rowPlaceholder': [{ type: ViewChild, args: [RowPlaceholder, ] },],\n'_headerRowPlaceholder': [{ type: ViewChild, args: [HeaderRowPlaceholder, ] },],\n'_columnDefinitions': [{ type: ContentChildren, args: [CdkColumnDef, ] },],\n'_headerDefinition': [{ type: ContentChild, args: [CdkHeaderRowDef, ] },],\n'_rowDefinitions': [{ type: ContentChildren, args: [CdkRowDef, ] },],\n};\n}\n\nfunction CdkTable_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkTable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkTable.ctorParameters;\n/** @type {?} */\nCdkTable.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nCdkTable.prototype._onDestroy;\n/**\n * Latest data provided by the data source through the connect interface.\n * @type {?}\n */\nCdkTable.prototype._data;\n/**\n * Subscription that listens for the data provided by the data source.\n * @type {?}\n */\nCdkTable.prototype._renderChangeSubscription;\n/**\n * Map of all the user's defined columns (header and data cell template) identified by name.\n * @type {?}\n */\nCdkTable.prototype._columnDefinitionsByName;\n/**\n * Differ used to find the changes in the data provided by the data source.\n * @type {?}\n */\nCdkTable.prototype._dataDiffer;\n/** @type {?} */\nCdkTable.prototype._trackByFn;\n/** @type {?} */\nCdkTable.prototype._dataSource;\n/**\n * Stream containing the latest information on what rows are being displayed on screen.\n * Can be used by the data source to as a heuristic of what data should be provided.\n * @type {?}\n */\nCdkTable.prototype.viewChange;\n/** @type {?} */\nCdkTable.prototype._rowPlaceholder;\n/** @type {?} */\nCdkTable.prototype._headerRowPlaceholder;\n/**\n * The column definitions provided by the user that contain what the header and cells should\n * render for each column.\n * @type {?}\n */\nCdkTable.prototype._columnDefinitions;\n/**\n * Template used as the header container.\n * @type {?}\n */\nCdkTable.prototype._headerDefinition;\n/**\n * Set of templates that used as the data row containers.\n * @type {?}\n */\nCdkTable.prototype._rowDefinitions;\n/** @type {?} */\nCdkTable.prototype._differs;\n/** @type {?} */\nCdkTable.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nexport function getTableUnknownColumnError(id: string) {\n  return Error(`cdk-table: Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nexport function getTableDuplicateColumnNameError(name: string) {\n  return Error(`cdk-table: Duplicate column definition name provided: \"${name}\".`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ContentChild, Directive, ElementRef, Input, Renderer2, TemplateRef} from '@angular/core';\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class CdkCellDef {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkCellDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCellDef.ctorParameters;\n/** @type {?} */\nCdkCellDef.prototype.template;\n}\n\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class CdkHeaderCellDef {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkHeaderCellDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkHeaderCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderCellDef.ctorParameters;\n/** @type {?} */\nCdkHeaderCellDef.prototype.template;\n}\n\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nexport class CdkColumnDef {\n/**\n * Unique name for this column.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} name\n * @return {?}\n */\nset name(name: string) {\n    this._name = name;\n    this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n  }\n  _name: string;\n/**\n * \\@docs-private\n */\ncell: CdkCellDef;\n/**\n * \\@docs-private\n */\nheaderCell: CdkHeaderCellDef;\n/**\n * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n * do not match are replaced by the '-' character.\n */\ncssClassFriendlyName: string;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkColumnDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['cdkColumnDef', ] },],\n'cell': [{ type: ContentChild, args: [CdkCellDef, ] },],\n'headerCell': [{ type: ContentChild, args: [CdkHeaderCellDef, ] },],\n};\n}\n\nfunction CdkColumnDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkColumnDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkColumnDef.ctorParameters;\n/** @type {?} */\nCdkColumnDef.propDecorators;\n/** @type {?} */\nCdkColumnDef.prototype._name;\n/**\n * \\@docs-private\n * @type {?}\n */\nCdkColumnDef.prototype.cell;\n/**\n * \\@docs-private\n * @type {?}\n */\nCdkColumnDef.prototype.headerCell;\n/**\n * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n * do not match are replaced by the '-' character.\n * @type {?}\n */\nCdkColumnDef.prototype.cssClassFriendlyName;\n}\n\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class CdkHeaderCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef, elementRef: ElementRef, renderer: Renderer2) {\n    renderer.addClass(elementRef.nativeElement, `cdk-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-header-cell',\n  host: {\n    'class': 'cdk-header-cell',\n    'role': 'columnheader',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction CdkHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderCell.ctorParameters;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class CdkCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef, elementRef: ElementRef, renderer: Renderer2) {\n    renderer.addClass(elementRef.nativeElement, `cdk-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-cell',\n  host: {\n    'class': 'cdk-cell',\n    'role': 'gridcell',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction CdkCell_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCell.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CdkCellDef} from './cell';\n/**\n * The row template that can be used by the md-table. Should not be used outside of the\n * material library.\n */\nexport const CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nexport abstract class BaseRowDef {\n/**\n * The columns to be displayed on this row.\n */\ncolumns: string[];\n/**\n * Differ used to check if any changes were made to the columns.\n */\nprotected _columnsDiffer: IterableDiffer<any>;\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(public template: TemplateRef<any>,\n              protected _differs: IterableDiffers) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property.\n    const /** @type {?} */ columns = changes['columns'].currentValue;\n    if (!this._columnsDiffer && columns) {\n      this._columnsDiffer = this._differs.find(columns).create();\n      this._columnsDiffer.diff(columns);\n    }\n  }\n/**\n * Returns the difference between the current columns and the columns from the last diff, or null\n * if there is no difference.\n * @return {?}\n */\ngetColumnsDiff(): IterableChanges<any> | null {\n    return this._columnsDiffer.diff(this.columns);\n  }\n}\n\nfunction BaseRowDef_tsickle_Closure_declarations() {\n/**\n * The columns to be displayed on this row.\n * @type {?}\n */\nBaseRowDef.prototype.columns;\n/**\n * Differ used to check if any changes were made to the columns.\n * @type {?}\n */\nBaseRowDef.prototype._columnsDiffer;\n/** @type {?} */\nBaseRowDef.prototype.template;\n/** @type {?} */\nBaseRowDef.prototype._differs;\n}\n\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport class CdkHeaderRowDef extends BaseRowDef {\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkHeaderRowDef]',\n  inputs: ['columns: cdkHeaderRowDef'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\n}\n\nfunction CdkHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderRowDef.ctorParameters;\n}\n\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display.\n */\nexport class CdkRowDef extends BaseRowDef {\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkRowDef]',\n  inputs: ['columns: cdkRowDefColumns'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\n}\n\nfunction CdkRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkRowDef.ctorParameters;\n}\n\n\n/** Context provided to the row cells */\nexport interface CdkCellOutletRowContext<T> {\n  /** Data for the row that this cell is located within. */\n  $implicit: T;\n\n  /** Index location of the row that this cell is located within. */\n  index?: number;\n\n  /** Length of the number of total rows. */\n  count?: number;\n\n  /** True if this cell is contained in the first row. */\n  first?: boolean;\n\n  /** True if this cell is contained in the last row. */\n  last?: boolean;\n\n  /** True if this cell is contained in a row with an even-numbered index. */\n  even?: boolean;\n\n  /** True if this cell is contained in a row with an odd-numbered index. */\n  odd?: boolean;\n}\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nexport class CdkCellOutlet {\n/**\n * The ordered list of cells to render within this outlet's view container\n */\ncells: CdkCellDef[];\n/**\n * The data context to be provided to each cell\n */\ncontext: any;\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nstatic mostRecentCellOutlet: CdkCellOutlet;\n/**\n * @param {?} _viewContainer\n */\nconstructor(public _viewContainer: ViewContainerRef) {\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkCellOutlet]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction CdkCellOutlet_tsickle_Closure_declarations() {\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n * @type {?}\n */\nCdkCellOutlet.mostRecentCellOutlet;\n/** @type {?} */\nCdkCellOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCellOutlet.ctorParameters;\n/**\n * The ordered list of cells to render within this outlet's view container\n * @type {?}\n */\nCdkCellOutlet.prototype.cells;\n/**\n * The data context to be provided to each cell\n * @type {?}\n */\nCdkCellOutlet.prototype.context;\n/** @type {?} */\nCdkCellOutlet.prototype._viewContainer;\n}\n\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class CdkHeaderRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkHeaderRow_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderRow.ctorParameters;\n}\n\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class CdkRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkRow_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}