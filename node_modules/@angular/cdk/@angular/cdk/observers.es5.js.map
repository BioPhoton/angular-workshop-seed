{"version":3,"file":"observers.es5.js","sources":["../../../src/cdk/observers/index.ts","../../../src/cdk/observers/observe-content.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdMutationObserverFactory,ObserveContent,ObserversModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  NgModule,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  AfterContentInit,\n  Injectable,\n  NgZone,\n} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {RxChain, debounceTime} from '@angular/cdk/rxjs';\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\nexport class MdMutationObserverFactory {\n/**\n * @param {?} callback\n * @return {?}\n */\ncreate(callback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMutationObserverFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMutationObserverFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMutationObserverFactory.ctorParameters;\n}\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nexport class ObserveContent implements AfterContentInit, OnDestroy {\nprivate _observer: MutationObserver | null;\n/**\n * Event emitted for each change in the element's content.\n */\nevent = new EventEmitter<MutationRecord[]>();\n/**\n * Used for debouncing the emitted values to the observeContent event.\n */\nprivate _debouncer = new Subject<MutationRecord[]>();\n/**\n * Debounce interval for emitting the changes.\n */\ndebounce: number;\n/**\n * @param {?} _mutationObserverFactory\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _mutationObserverFactory: MdMutationObserverFactory,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this.debounce > 0) {\n      this._ngZone.runOutsideAngular(() => {\n        RxChain.from(this._debouncer)\n          .call(debounceTime, this.debounce)\n          .subscribe((mutations: MutationRecord[]) => this.event.emit(mutations));\n      });\n    } else {\n      this._debouncer.subscribe(mutations => this.event.emit(mutations));\n    }\n\n    this._observer = this._ngZone.runOutsideAngular(() => {\n      return this._mutationObserverFactory.create((mutations: MutationRecord[]) => {\n        this._debouncer.next(mutations);\n      });\n    });\n\n    if (this._observer) {\n      this._observer.observe(this._elementRef.nativeElement, {\n        characterData: true,\n        childList: true,\n        subtree: true\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._observer) {\n      this._observer.disconnect();\n    }\n\n    this._debouncer.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkObserveContent]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdMutationObserverFactory, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'event': [{ type: Output, args: ['cdkObserveContent', ] },],\n'debounce': [{ type: Input },],\n};\n}\n\nfunction ObserveContent_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContent.ctorParameters;\n/** @type {?} */\nObserveContent.propDecorators;\n/** @type {?} */\nObserveContent.prototype._observer;\n/**\n * Event emitted for each change in the element's content.\n * @type {?}\n */\nObserveContent.prototype.event;\n/**\n * Used for debouncing the emitted values to the observeContent event.\n * @type {?}\n */\nObserveContent.prototype._debouncer;\n/**\n * Debounce interval for emitting the changes.\n * @type {?}\n */\nObserveContent.prototype.debounce;\n/** @type {?} */\nObserveContent.prototype._mutationObserverFactory;\n/** @type {?} */\nObserveContent.prototype._elementRef;\n/** @type {?} */\nObserveContent.prototype._ngZone;\n}\n\nexport class ObserversModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [ObserveContent],\n  declarations: [ObserveContent],\n  providers: [MdMutationObserverFactory]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ObserversModule_tsickle_Closure_declarations() {\n/** @type {?} */\nObserversModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserversModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}