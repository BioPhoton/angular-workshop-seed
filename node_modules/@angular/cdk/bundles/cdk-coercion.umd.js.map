{"version":3,"file":"cdk-coercion.umd.js","sources":["../../src/cdk/coercion/number-property.ts","../../src/cdk/coercion/index.ts","../../src/cdk/coercion/boolean-property.ts"],"sourcesContent":["\n/**\n * Coerces a data-bound value (typically a string) to a number.\n * @param {?} value\n * @param {?=} fallbackValue\n * @return {?}\n */\nexport function coerceNumberProperty(value: any, fallbackValue = 0) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return isNaN(parseFloat( /** @type {?} */((value as any)))) || isNaN(Number(value)) ? fallbackValue : Number(value);\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {coerceBooleanProperty,coerceNumberProperty} from './public_api';\n","\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n * @param {?} value\n * @return {?}\n */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AECA;;;;;AAKA,SAAA,qBAAA,CAGC,KAAA,EAHD;IACE,OAGO,KAAA,IAAS,IAAA,IAAQ,EAH1B,GAAA,KAGmC,KAAM,OAAA,CAAQ;CAFhD;;;;;;;;IFDD,IAAA,aAAA,KAAA,KAAA,CAAA,EAAA,EAAA,aAAA,GAAA,CAEC,CAAA,EAFD;;;;IAIE,OAEO,KAAA,CAAM,UAAC,mBAAU,KAAS,EAAI,CAAC,IAAI,KAAA,CAAM,MAAC,CAAM,KAAC,CAAK,CAAC,GAAG,aAAA,GAAgB,MAAA,CAAO,KAAC,CAAK,CAAC;CADhG,ACVD;;;;;;;"}