{"version":3,"file":"cdk-table.umd.js","sources":["../../src/cdk/table/index.ts","../../src/cdk/table/public_api.ts","../../src/cdk/table/table.ts","../../src/cdk/table/table-errors.ts","../../src/cdk/table/cell.ts","../../src/cdk/table/row.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {DataSource,CdkTableModule,RowPlaceholder,HeaderRowPlaceholder,CDK_TABLE_TEMPLATE,CdkTable,CdkCellDef,CdkHeaderCellDef,CdkColumnDef,CdkHeaderCell,CdkCell,CDK_ROW_TEMPLATE,BaseRowDef,CdkHeaderRowDef,CdkRowDef,CdkCellOutletRowContext,CdkCellOutlet,CdkHeaderRow,CdkRow} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {HeaderRowPlaceholder, RowPlaceholder, CdkTable} from './table';\nimport {CdkCellOutlet, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef} from './row';\nimport {CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCell, CdkCellDef} from './cell';\n\nexport {RowPlaceholder,HeaderRowPlaceholder,CDK_TABLE_TEMPLATE,CdkTable} from './table';\nexport {CdkCellDef,CdkHeaderCellDef,CdkColumnDef,CdkHeaderCell,CdkCell} from './cell';\nexport {CDK_ROW_TEMPLATE,BaseRowDef,CdkHeaderRowDef,CdkRowDef,CdkCellOutletRowContext,CdkCellOutlet,CdkHeaderRow,CdkRow} from './row';\n\n/** Re-export DataSource for a more intuitive experience for users of just the table. */\nexport {DataSource} from '@angular/cdk/collections';\n\nconst /** @type {?} */ EXPORTED_DECLARATIONS = [\n  CdkTable,\n  CdkRowDef,\n  CdkCellDef,\n  CdkCellOutlet,\n  CdkHeaderCellDef,\n  CdkColumnDef,\n  CdkCell,\n  CdkRow,\n  CdkHeaderCell,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  RowPlaceholder,\n  HeaderRowPlaceholder,\n];\nexport class CdkTableModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  exports: [EXPORTED_DECLARATIONS],\n  declarations: [EXPORTED_DECLARATIONS]\n\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkTableModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkTableModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkTableModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  Input,\n  isDevMode,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  QueryList,\n  Renderer2,\n  TrackByFunction,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {CdkCellOutlet, CdkCellOutletRowContext, CdkHeaderRowDef, CdkRowDef} from './row';\nimport {takeUntil} from 'rxjs/operator/takeUntil';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Subject} from 'rxjs/Subject';\nimport {CdkCellDef, CdkColumnDef, CdkHeaderCellDef} from './cell';\nimport {getTableDuplicateColumnNameError, getTableUnknownColumnError} from './table-errors';\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nexport class RowPlaceholder {\n/**\n * @param {?} viewContainer\n */\nconstructor(public viewContainer: ViewContainerRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[rowPlaceholder]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RowPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nRowPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRowPlaceholder.ctorParameters;\n/** @type {?} */\nRowPlaceholder.prototype.viewContainer;\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nexport class HeaderRowPlaceholder {\n/**\n * @param {?} viewContainer\n */\nconstructor(public viewContainer: ViewContainerRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[headerRowPlaceholder]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction HeaderRowPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nHeaderRowPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHeaderRowPlaceholder.ctorParameters;\n/** @type {?} */\nHeaderRowPlaceholder.prototype.viewContainer;\n}\n\n/**\n * The table template that can be used by the md-table. Should not be used outside of the\n * material library.\n */\nexport const CDK_TABLE_TEMPLATE = `\n  <ng-container headerRowPlaceholder></ng-container>\n  <ng-container rowPlaceholder></ng-container>`;\n/**\n * A data table that connects with a data source to retrieve data of type `T` and renders\n * a header row and data rows. Updates the rows when new data is provided by the data source.\n */\nexport class CdkTable<T> implements CollectionViewer {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\n/**\n * Latest data provided by the data source through the connect interface.\n */\nprivate _data: NgIterable<T> = [];\n/**\n * Subscription that listens for the data provided by the data source.\n */\nprivate _renderChangeSubscription: Subscription | null;\n/**\n * Map of all the user's defined columns (header and data cell template) identified by name.\n */\nprivate _columnDefinitionsByName = new Map<string,  CdkColumnDef>();\n/**\n * Differ used to find the changes in the data provided by the data source.\n */\nprivate _dataDiffer: IterableDiffer<T>;\n/**\n * Tracking function that will be used to check the differences in data changes. Used similarly\n * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n * relative to the function to know if a row should be added/removed/moved.\n * Accepts a function that takes two parameters, `index` and `item`.\n * @param {?} fn\n * @return {?}\n */\nset trackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() &&\n        fn != null && typeof fn !== 'function' && /** @type {?} */((\n        <any>console)) && /** @type {?} */(( <any>console.warn))) {\n        console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n    }\n    this._trackByFn = fn;\n  }\n/**\n * @return {?}\n */\nget trackBy(): TrackByFunction<T> { return this._trackByFn; }\nprivate _trackByFn: TrackByFunction<T>;\n/**\n * Provides a stream containing the latest data array to render. Influenced by the table's\n * stream of view window (what rows are currently on screen).\n * @return {?}\n */\nget dataSource(): DataSource<T> { return this._dataSource; }\n/**\n * @param {?} dataSource\n * @return {?}\n */\nset dataSource(dataSource: DataSource<T>) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\nprivate _dataSource: DataSource<T>;\n/**\n * Stream containing the latest information on what rows are being displayed on screen.\n * Can be used by the data source to as a heuristic of what data should be provided.\n */\nviewChange =\n      new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\n\n  // Placeholders within the table's template where the header and data rows will be inserted.\n   _rowPlaceholder: RowPlaceholder;\n   _headerRowPlaceholder: HeaderRowPlaceholder;\n/**\n * The column definitions provided by the user that contain what the header and cells should\n * render for each column.\n */\n_columnDefinitions: QueryList<CdkColumnDef>;\n/**\n * Template used as the header container.\n */\n_headerDefinition: CdkHeaderRowDef;\n/**\n * Set of templates that used as the data row containers.\n */\n_rowDefinitions: QueryList<CdkRowDef>;\n/**\n * @param {?} _differs\n * @param {?} _changeDetectorRef\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} role\n */\nconstructor(private readonly _differs: IterableDiffers,\nprivate readonly _changeDetectorRef: ChangeDetectorRef,\n              elementRef: ElementRef,\n              renderer: Renderer2,\n               role: string) {\n    if (!role) {\n      renderer.setAttribute(elementRef.nativeElement, 'role', 'grid');\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // TODO(andrewseguin): Setup a listener for scrolling, emit the calculated view to viewChange\n    this._dataDiffer = this._differs.find([]).create(this._trackByFn);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._cacheColumnDefinitionsByName();\n    this._columnDefinitions.changes.subscribe(() => this._cacheColumnDefinitionsByName());\n    this._renderHeaderRow();\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._renderUpdatedColumns();\n    if (this.dataSource && !this._renderChangeSubscription) {\n      this._observeRenderChanges();\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._rowPlaceholder.viewContainer.clear();\n    this._headerRowPlaceholder.viewContainer.clear();\n    this._onDestroy.next();\n    this._onDestroy.complete();\n\n    if (this.dataSource) {\n      this.dataSource.disconnect(this);\n    }\n  }\n/**\n * Update the map containing the content's column definitions.\n * @return {?}\n */\nprivate _cacheColumnDefinitionsByName() {\n    this._columnDefinitionsByName.clear();\n    this._columnDefinitions.forEach(columnDef => {\n      if (this._columnDefinitionsByName.has(columnDef.name)) {\n        throw getTableDuplicateColumnNameError(columnDef.name);\n      }\n      this._columnDefinitionsByName.set(columnDef.name, columnDef);\n    });\n  }\n/**\n * Check if the header or rows have changed what columns they want to display. If there is a diff,\n * then re-render that section.\n * @return {?}\n */\nprivate _renderUpdatedColumns() {\n    // Re-render the rows when the row definition columns change.\n    this._rowDefinitions.forEach(rowDefinition => {\n      if (!!rowDefinition.getColumnsDiff()) {\n        // Reset the data to an empty array so that renderRowChanges will re-render all new rows.\n        this._dataDiffer.diff([]);\n\n        this._rowPlaceholder.viewContainer.clear();\n        this._renderRowChanges();\n      }\n    });\n\n    // Re-render the header row if there is a difference in its columns.\n    if (this._headerDefinition.getColumnsDiff()) {\n      this._headerRowPlaceholder.viewContainer.clear();\n      this._renderHeaderRow();\n    }\n  }\n/**\n * Switch to the provided data source by resetting the data and unsubscribing from the current\n * render change subscription if one exists. If the data source is null, interpret this by\n * clearing the row placeholder. Otherwise start listening for new data.\n * @param {?} dataSource\n * @return {?}\n */\nprivate _switchDataSource(dataSource: DataSource<T>) {\n    this._data = [];\n\n    if (this.dataSource) {\n      this.dataSource.disconnect(this);\n    }\n\n    // Stop listening for data from the previous data source.\n    if (this._renderChangeSubscription) {\n      this._renderChangeSubscription.unsubscribe();\n      this._renderChangeSubscription = null;\n    }\n\n    // Remove the table's rows if there is now no data source\n    if (!dataSource) {\n      this._rowPlaceholder.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n  }\n/**\n * Set up a subscription for the data provided by the data source.\n * @return {?}\n */\nprivate _observeRenderChanges() {\n    this._renderChangeSubscription = takeUntil.call(this.dataSource.connect(this), this._onDestroy)\n      .subscribe(data => {\n        this._data = data;\n        this._renderRowChanges();\n      });\n  }\n/**\n * Create the embedded view for the header template and place it in the header row view container.\n * @return {?}\n */\nprivate _renderHeaderRow() {\n    const /** @type {?} */ cells = this._getHeaderCellTemplatesForRow(this._headerDefinition);\n    if (!cells.length) { return; }\n\n    // TODO(andrewseguin): add some code to enforce that exactly\n    //   one CdkCellOutlet was instantiated as a result\n    //   of `createEmbeddedView`.\n    this._headerRowPlaceholder.viewContainer\n        .createEmbeddedView(this._headerDefinition.template, {cells});\n\n    cells.forEach(cell => {\n      CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cell.template, {});\n    });\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Check for changes made in the data and render each change (row added/removed/moved).\n * @return {?}\n */\nprivate _renderRowChanges() {\n    const /** @type {?} */ changes = this._dataDiffer.diff(this._data);\n    if (!changes) { return; }\n\n    const /** @type {?} */ viewContainer = this._rowPlaceholder.viewContainer;\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            this._insertRow(this._data[currentIndex], currentIndex);\n          } else if (currentIndex == null) {\n            viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const /** @type {?} */ view = viewContainer.get(adjustedPreviousIndex);\n            viewContainer.move( /** @type {?} */((view)), currentIndex);\n          }\n        });\n\n    this._updateRowContext();\n  }\n/**\n * Create the embedded view for the data row template and place it in the correct index location\n * within the data row view container.\n * @param {?} rowData\n * @param {?} index\n * @return {?}\n */\nprivate _insertRow(rowData: T, index: number) {\n    // TODO(andrewseguin): Add when predicates to the row definitions\n    //   to find the right template to used based on\n    //   the data rather than choosing the first row definition.\n    const /** @type {?} */ row = this._rowDefinitions.first;\n\n    // Row context that will be provided to both the created embedded row view and its cells.\n    const /** @type {?} */ context: CdkCellOutletRowContext<T> = {$implicit: rowData};\n\n    // TODO(andrewseguin): add some code to enforce that exactly one\n    //   CdkCellOutlet was instantiated as a result  of `createEmbeddedView`.\n    this._rowPlaceholder.viewContainer.createEmbeddedView(row.template, context, index);\n\n    // Insert empty cells if there is no data to improve rendering time.\n    const /** @type {?} */ cells = rowData ? this._getCellTemplatesForRow(row) : [];\n\n    cells.forEach(cell => {\n      CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cell.template, context);\n    });\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Updates the context for each row to reflect any data changes that may have caused\n * rows to be added, removed, or moved. The view container contains the same context\n * that was provided to each of its cells.\n * @return {?}\n */\nprivate _updateRowContext() {\n    const /** @type {?} */ viewContainer = this._rowPlaceholder.viewContainer;\n    for (let /** @type {?} */ index = 0, /** @type {?} */ count = viewContainer.length; index < count; index++) {\n      const /** @type {?} */ viewRef = /** @type {?} */(( viewContainer.get(index) as EmbeddedViewRef<CdkCellOutletRowContext<T>>));\n      viewRef.context.index = index;\n      viewRef.context.count = count;\n      viewRef.context.first = index === 0;\n      viewRef.context.last = index === count - 1;\n      viewRef.context.even = index % 2 === 0;\n      viewRef.context.odd = !viewRef.context.even;\n    }\n  }\n/**\n * Returns the cell template definitions to insert into the header\n * as defined by its list of columns to display.\n * @param {?} headerDef\n * @return {?}\n */\nprivate _getHeaderCellTemplatesForRow(headerDef: CdkHeaderRowDef): CdkHeaderCellDef[] {\n    if (!headerDef.columns) { return []; }\n    return headerDef.columns.map(columnId => {\n      const /** @type {?} */ column = this._columnDefinitionsByName.get(columnId);\n\n      if (!column) {\n        throw getTableUnknownColumnError(columnId);\n      }\n\n      return column.headerCell;\n    });\n  }\n/**\n * Returns the cell template definitions to insert in the provided row\n * as defined by its list of columns to display.\n * @param {?} rowDef\n * @return {?}\n */\nprivate _getCellTemplatesForRow(rowDef: CdkRowDef): CdkCellDef[] {\n    if (!rowDef.columns) { return []; }\n    return rowDef.columns.map(columnId => {\n      const /** @type {?} */ column = this._columnDefinitionsByName.get(columnId);\n\n      if (!column) {\n        throw getTableUnknownColumnError(columnId);\n      }\n\n      return column.cell;\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-table',\n  template: CDK_TABLE_TEMPLATE,\n  host: {\n    'class': 'cdk-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: IterableDiffers, },\n{type: ChangeDetectorRef, },\n{type: ElementRef, },\n{type: Renderer2, },\n{type: undefined, decorators: [{ type: Attribute, args: ['role', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trackBy': [{ type: Input },],\n'dataSource': [{ type: Input },],\n'_rowPlaceholder': [{ type: ViewChild, args: [RowPlaceholder, ] },],\n'_headerRowPlaceholder': [{ type: ViewChild, args: [HeaderRowPlaceholder, ] },],\n'_columnDefinitions': [{ type: ContentChildren, args: [CdkColumnDef, ] },],\n'_headerDefinition': [{ type: ContentChild, args: [CdkHeaderRowDef, ] },],\n'_rowDefinitions': [{ type: ContentChildren, args: [CdkRowDef, ] },],\n};\n}\n\nfunction CdkTable_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkTable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkTable.ctorParameters;\n/** @type {?} */\nCdkTable.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nCdkTable.prototype._onDestroy;\n/**\n * Latest data provided by the data source through the connect interface.\n * @type {?}\n */\nCdkTable.prototype._data;\n/**\n * Subscription that listens for the data provided by the data source.\n * @type {?}\n */\nCdkTable.prototype._renderChangeSubscription;\n/**\n * Map of all the user's defined columns (header and data cell template) identified by name.\n * @type {?}\n */\nCdkTable.prototype._columnDefinitionsByName;\n/**\n * Differ used to find the changes in the data provided by the data source.\n * @type {?}\n */\nCdkTable.prototype._dataDiffer;\n/** @type {?} */\nCdkTable.prototype._trackByFn;\n/** @type {?} */\nCdkTable.prototype._dataSource;\n/**\n * Stream containing the latest information on what rows are being displayed on screen.\n * Can be used by the data source to as a heuristic of what data should be provided.\n * @type {?}\n */\nCdkTable.prototype.viewChange;\n/** @type {?} */\nCdkTable.prototype._rowPlaceholder;\n/** @type {?} */\nCdkTable.prototype._headerRowPlaceholder;\n/**\n * The column definitions provided by the user that contain what the header and cells should\n * render for each column.\n * @type {?}\n */\nCdkTable.prototype._columnDefinitions;\n/**\n * Template used as the header container.\n * @type {?}\n */\nCdkTable.prototype._headerDefinition;\n/**\n * Set of templates that used as the data row containers.\n * @type {?}\n */\nCdkTable.prototype._rowDefinitions;\n/** @type {?} */\nCdkTable.prototype._differs;\n/** @type {?} */\nCdkTable.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nexport function getTableUnknownColumnError(id: string) {\n  return Error(`cdk-table: Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nexport function getTableDuplicateColumnNameError(name: string) {\n  return Error(`cdk-table: Duplicate column definition name provided: \"${name}\".`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ContentChild, Directive, ElementRef, Input, Renderer2, TemplateRef} from '@angular/core';\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class CdkCellDef {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkCellDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCellDef.ctorParameters;\n/** @type {?} */\nCdkCellDef.prototype.template;\n}\n\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class CdkHeaderCellDef {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkHeaderCellDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkHeaderCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderCellDef.ctorParameters;\n/** @type {?} */\nCdkHeaderCellDef.prototype.template;\n}\n\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nexport class CdkColumnDef {\n/**\n * Unique name for this column.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} name\n * @return {?}\n */\nset name(name: string) {\n    this._name = name;\n    this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n  }\n  _name: string;\n/**\n * \\@docs-private\n */\ncell: CdkCellDef;\n/**\n * \\@docs-private\n */\nheaderCell: CdkHeaderCellDef;\n/**\n * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n * do not match are replaced by the '-' character.\n */\ncssClassFriendlyName: string;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkColumnDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['cdkColumnDef', ] },],\n'cell': [{ type: ContentChild, args: [CdkCellDef, ] },],\n'headerCell': [{ type: ContentChild, args: [CdkHeaderCellDef, ] },],\n};\n}\n\nfunction CdkColumnDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkColumnDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkColumnDef.ctorParameters;\n/** @type {?} */\nCdkColumnDef.propDecorators;\n/** @type {?} */\nCdkColumnDef.prototype._name;\n/**\n * \\@docs-private\n * @type {?}\n */\nCdkColumnDef.prototype.cell;\n/**\n * \\@docs-private\n * @type {?}\n */\nCdkColumnDef.prototype.headerCell;\n/**\n * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n * do not match are replaced by the '-' character.\n * @type {?}\n */\nCdkColumnDef.prototype.cssClassFriendlyName;\n}\n\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class CdkHeaderCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef, elementRef: ElementRef, renderer: Renderer2) {\n    renderer.addClass(elementRef.nativeElement, `cdk-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-header-cell',\n  host: {\n    'class': 'cdk-header-cell',\n    'role': 'columnheader',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction CdkHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderCell.ctorParameters;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class CdkCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef, elementRef: ElementRef, renderer: Renderer2) {\n    renderer.addClass(elementRef.nativeElement, `cdk-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-cell',\n  host: {\n    'class': 'cdk-cell',\n    'role': 'gridcell',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction CdkCell_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCell.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CdkCellDef} from './cell';\n/**\n * The row template that can be used by the md-table. Should not be used outside of the\n * material library.\n */\nexport const CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nexport abstract class BaseRowDef {\n/**\n * The columns to be displayed on this row.\n */\ncolumns: string[];\n/**\n * Differ used to check if any changes were made to the columns.\n */\nprotected _columnsDiffer: IterableDiffer<any>;\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(public template: TemplateRef<any>,\n              protected _differs: IterableDiffers) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property.\n    const /** @type {?} */ columns = changes['columns'].currentValue;\n    if (!this._columnsDiffer && columns) {\n      this._columnsDiffer = this._differs.find(columns).create();\n      this._columnsDiffer.diff(columns);\n    }\n  }\n/**\n * Returns the difference between the current columns and the columns from the last diff, or null\n * if there is no difference.\n * @return {?}\n */\ngetColumnsDiff(): IterableChanges<any> | null {\n    return this._columnsDiffer.diff(this.columns);\n  }\n}\n\nfunction BaseRowDef_tsickle_Closure_declarations() {\n/**\n * The columns to be displayed on this row.\n * @type {?}\n */\nBaseRowDef.prototype.columns;\n/**\n * Differ used to check if any changes were made to the columns.\n * @type {?}\n */\nBaseRowDef.prototype._columnsDiffer;\n/** @type {?} */\nBaseRowDef.prototype.template;\n/** @type {?} */\nBaseRowDef.prototype._differs;\n}\n\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport class CdkHeaderRowDef extends BaseRowDef {\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkHeaderRowDef]',\n  inputs: ['columns: cdkHeaderRowDef'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\n}\n\nfunction CdkHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderRowDef.ctorParameters;\n}\n\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display.\n */\nexport class CdkRowDef extends BaseRowDef {\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkRowDef]',\n  inputs: ['columns: cdkRowDefColumns'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\n}\n\nfunction CdkRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkRowDef.ctorParameters;\n}\n\n\n/** Context provided to the row cells */\nexport interface CdkCellOutletRowContext<T> {\n  /** Data for the row that this cell is located within. */\n  $implicit: T;\n\n  /** Index location of the row that this cell is located within. */\n  index?: number;\n\n  /** Length of the number of total rows. */\n  count?: number;\n\n  /** True if this cell is contained in the first row. */\n  first?: boolean;\n\n  /** True if this cell is contained in the last row. */\n  last?: boolean;\n\n  /** True if this cell is contained in a row with an even-numbered index. */\n  even?: boolean;\n\n  /** True if this cell is contained in a row with an odd-numbered index. */\n  odd?: boolean;\n}\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nexport class CdkCellOutlet {\n/**\n * The ordered list of cells to render within this outlet's view container\n */\ncells: CdkCellDef[];\n/**\n * The data context to be provided to each cell\n */\ncontext: any;\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nstatic mostRecentCellOutlet: CdkCellOutlet;\n/**\n * @param {?} _viewContainer\n */\nconstructor(public _viewContainer: ViewContainerRef) {\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkCellOutlet]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction CdkCellOutlet_tsickle_Closure_declarations() {\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n * @type {?}\n */\nCdkCellOutlet.mostRecentCellOutlet;\n/** @type {?} */\nCdkCellOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCellOutlet.ctorParameters;\n/**\n * The ordered list of cells to render within this outlet's view container\n * @type {?}\n */\nCdkCellOutlet.prototype.cells;\n/**\n * The data context to be provided to each cell\n * @type {?}\n */\nCdkCellOutlet.prototype.context;\n/** @type {?} */\nCdkCellOutlet.prototype._viewContainer;\n}\n\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class CdkHeaderRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkHeaderRow_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderRow.ctorParameters;\n}\n\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class CdkRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkRow_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}"],"names":["ContentChildren","ViewChild","Input","Renderer2","ElementRef","ChangeDetectorRef","IterableDiffers","ChangeDetectionStrategy","ViewEncapsulation","Component","takeUntil","ViewContainerRef","Directive","ContentChild","TemplateRef"],"mappings":";;;;;;;;;;;;;AMAA;;;;;;;;;;;;;;;;AAgBA,IAAI,aAAa,GAAG,MAAM,CAAC,cAAc;KACpC,EAAE,SAAS,EAAE,EAAE,EAAE,YAAY,KAAK,IAAI,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC;IAC5E,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;;AAE/E,AAAO,SAAS,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE;IAC5B,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACpB,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE;IACvC,CAAC,CAAC,SAAS,GAAG,CAAC,KAAK,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;CACxF,AAED,AAAO,AACH,AAIA,AACH,AAED,AAAO,AAQN,AAED,AAAO,AAKN,AAED,AAAO,AAEN,AAED,AAAO,AAEN,AAED,AAAO,AAON,AAED,AAAO,AA0BN,AAED,AAAO,AAEN,AAED,AAAO,AASN,AAED,AAAO,AAeN,AAED,AAAO,AAIN,AAED,AAAO,AAEN,AAED,AAAO,AAUN,AAED,AAAO,AAIN,AAED,AAAO;;ADtIP;;;;AAIA,IAAA,gBAAA,GAAA,6CAAA,CAAA;;;;;;AAMA,IAAA,UAAA,IAAA,YAAA;;;;;IAaA,SAAA,UAAA,CAN+C,QAM/C,EALkC,QAKlC,EAAA;QANqB,IAArB,CAAA,QAAqB,GAAA,QAAA,CAA0B;QACvB,IAAxB,CAAA,QAAwB,GAAA,QAAA,CAAU;KAAgB;;;;;IAWlD,UAAA,CATG,SASH,CAAA,WAAA,GAAA,UAAA,OAAA,EAAA;;;QAGI,qBAAJ,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA,CAT6B,YAS7B,CAAA;QACI,IAAI,CATC,IAAC,CAAI,cAAC,IAAiB,OAAA,EAAS;YAUnC,IAAI,CATC,cAAC,GAAgB,IAAA,CAAK,QAAC,CAAQ,IAAC,CAAI,OAAC,CAAO,CAAC,MAAC,EAAM,CAAE;YAU3D,IAAI,CATC,cAAC,CAAc,IAAC,CAAI,OAAC,CAAO,CAAC;SAUnC;KACF,CAAH;;;;;;IAMA,UAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;QACI,OATO,IAAA,CAAK,cAAC,CAAc,IAAC,CAAI,IAAC,CAAI,OAAC,CAAO,CAAC;KAU/C,CAAH;IACA,OAAA,UAAA,CAAA;CAEA,EAAA,CAAA,CAAA;;;;;;;;;;;IA4BA,SAAA,eAAA,CAAA,QAAA,EAAA,QAAA,EAAA;;KA5BA;IA8BA,OAAA,eAAA,CA7BmB;CA8BnB,CAAA,UAAA,CAAA,CAAA,CAAA;AACA,eAAA,CAAE,UAAF,GAAA;IACA,EAAA,IAAA,EAAAY,uBAAA,EAAA,IAAA,EAAA,CAAA;gBACA,QAAA,EAAA,mBAAA;;;;;;;AAOA,eAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;IAGA,EAAA,IAAA,EAAAE,yBAAA,GAAA;;;;;;;;;;;;;IApBA,SAAA,SAAA,CAA2C,QAA3C,EAAA,QAAA,EAAA;QA2CA,OAAA,MA1CQ,CA0CR,IAAA,CA1CmB,IA0CnB,EAAA,QAAA,EAAA,QAAA,CAAA,IAAA,IAAA,CAAA;KACA;IACA,OAAA,SAAA,CAAA;CACA,CAAA,UAAA,CAAC,CAAD,CA1CE;AA2CF,SAAA,CAAA,UAAA,GAAA;;;;aAxCA,EAAA,EAAA;CA6CA,CAAA;;;;;;;CA2CA,CAAA,EAAA,CAAA;;;;;AArCA,IAAA,aAAA,IAAA,YAAA;;;;IAGA,SAAA,aAAA,CAA2C,cAA3C,EAAA;QA0DA,IAzDQ,CAyDR,cAzDmB,GAAM,cAyDzB,CAAA;QACA,aAAA,CAAA,oBAAA,GAAA,IAAA,CAAA;;;;AAvDC,aAAD,CAAA,UAAA,GAAA;IA4DA,EAAC,IAAI,EAAEF,uBAAP,EAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,iBAAA,EAAA,EAAA,EAAA;CACC,CAAC;;;;AAqCF,aAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;;CA3FA,CAAA,EAAA,CAAA;;;;AA+FA,IAAA,YAAE,IAAI,YAAN;IACA,SAAA,YAAA,GAAA;KACA;IACA,OAAA,YAAA,CAAA;CACA,EAAA,CAAA,CAAA;AACA,YAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAAH,uBAAA,EAAA,IAAA,EAAA,CAAA;gBACA,QAAA,EAAA,gBAAA;;;;oBAzFA,MAAA,EAAA,KAAA;iBAiGA;;;aAaA,EAAA,EAAA;;;;;AAGA,YAAA,CAAA,cAAA,GAAA,YAxGY,EAwGZ,OAAA,EAAA,CAAA,EAAA,CAAA;;;;AAIA,IAAA,MAAA,IAAA,YAAA;IACA,SAAA,MAAA,GAAA;KACA;IACA,OAAA,MAxGK,CAwGL;CACC,EAAD,CAAA,CAAA;;;;gBAtGA,QAAC,EAAD,gBAAA;;oBD5LA,OAAA,EAAA,SAAA;;;;gBAIA,aAAA,EAAAD,+BAAA,CAAA,IAAA;;;;;;AAEA,MAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;;;;;;IAUA,SAAA,UAAkB,CAAlB,QAAA,EAAA;QACA,IAAA,CAAA,QAAA,GAAA,QAAA,CAAA;KAGA;;;;IAgBA,EAAA,IAAA,EAAAI,uBAAA,EAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,cAAA,EAAA,EAAA,EAAA;;;;;AAdA,UAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;IAAA,EAAA,IAAA,EAAAE,yBAAA,GAAA;;;;;;;;;;IA2BA,SAAA,gBAAA,CAAA,QAAA,EAAA;QAGA,IAAA,CAAA,QAAA,GAAA,QAAA,CAAA;;;;AAgBA,gBAAA,CAAA,UAAA,GAAA;;;;;;;;;;;;;AAaA,IAAA,YAAA,IAAA,YAAA;;KAtBA;IAuCA,MAtCE,CAsCF,cAAA,CAAA,YAAA,CAAA,SAAA,EAAA,MAAA,EAtCqC;;;;;QAGrC,GAAA,EAAA,YAAA,EAAC,OAAD,IAyCC,CAAC,KAzCF,CAAA,EAAA;;;;;QA8CA,GAAA,EAAA,UAAA,IAAA,EAAA;YAGA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA;;;QAkCA,UAAA,EAAA,IAAA;;;;;;IAMA,EAAA,IAAA,EAAAF,uBAAA,EAAA,IA7EuC,EA6EvC,CAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,EAAA,EAAA;CACA,CAAA;;;;AAGA,YA7EQ,CA6ER,cA7EmB,GAAM,YA6EzB,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;AACA,YAAA,CAAA,cAAA,GAAA;IACA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAAV,mBAAA,EAAA,IAAA,EAAA,CAAA,cAAA,EAAA,EAAA,EAAA;IACA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAAW,0BAAA,EAAA,IAAA,EAAA,CAAA,UAAA,EAAA,EAAA,EAAA;IACA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,0BAAA,EAAA,IAAA,EAAA,CAAA,gBAAA,EAAA,EAAA,EAAA;CACA,CAAA;;;;;;;;;;IAUA,SAAA,aAAA,CAAA,SAAA,EAAA,UAAA,EAAA,QAAA,EAAA;QAGA,QAAA,CAAA,QAAA,CAAA,UAAA,CAAA,aAAA,EAAA,aAAA,GAAA,SAAA,CAAA,oBAAA,CAAA,CAAA;;;CAaA,EAAA,CAAA,CAAA;;;;;;oBAMA,MAAA,EAAA,cAAA;iBACa;aACb,EAAA,EAAA;;;;;AAIA,aAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;IACA,EAAA,IAAA,EAAA,YAAA,GAAW;IACX,EAAA,IAAA,EAAAT,wBAAA,GAAA;IACA,EAAA,IAAA,EAAAD,uBAAA,GAAA;CACA,CAAA,EAAA,CAAA;;;;;;;;;;;QDpNA,QAAA,CAAA,QAAA,CAAA,UAAA,CAAA,aAAA,EAAA,aAAA,GAAA,SAAA,CAAA,oBAAA,CAAA,CAAA;;;;;;gBAMA,QAAA,EAAA,UAMC;gBACQ,IANT,EAAA;oBACA,OAAA,EAAA,UAAA;;;;;;;;AAQA,OAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;IACA,EAAA,IAAA,EAAA,YAAA,GAAA;;IDsBA,EAAA,IAAA,EAAAA,uBAAA,GAAA;;;;;;;;AAQA,SAAA,0BAAA,CAAA,EAAA,EAAA;IAFA,OAAA,KAAA,CAAA,6CAAA,GAAA,EAAA,GAAA,KAAA,CAAA,CAAA;CAAA;;;;;;;;IAKA,OAAA,KAAA,CAAA,0DAAA,GAAA,IAAA,GAAA,KAAA,CAAA,CAAA;CAKA;;;;;;;;;;QAwBA,IAAA,CAAA,aAAA,GAlBoC,aAkBpC,CAAA;KAlBA;IAAA,OAAA,cAAA,CAAA;;AACO,cAAP,CAAA,UAAA,GAAA;IAmBA,EAlBE,IAAA,EAAMS,uBAAA,EAAW,IAAA,EAAM,CAAA,EAAE,QAAC,EAAS,kBAkBrC,EAAA,EAAA,EAlBqC;CAmBpC,CAlBC;;;;AAED,cAAD,CAAA,cAAA,GAAA,YAAC,EAAD,OAAA;IAqBA,EAAC,IAAI,EAAED,8BAAgB,GAAG;CACzB,CAAC,EAAF,CAAA;;;;;AAmBA,IAAA,oBAhCC,IAgCD,YAAA;;;;;;;IAOA,OAAA,oBAAA,CAAA;;;;;;;;AAwFA,oBAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;IA9CA,EAAA,IAAA,EAAAA,8BAAA,GAAA;CACA,CAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;IAkDA,SAAS,QAAT,CAAA,QAAA,EAAA,kBAAA,EAAA,UAAA,EAAA,QAAA,EAAA,IAAA,EAAA;QACA,IAAM,CAAN,QAAe,GAAf,QAAA,CAA2B;QAC3B,IAAA,CAAA,kBAAA,GAAA,kBAAA,CAAA;;;;;;;;;;;;QAhEA,IAAQ,CAAR,wBAAA,GApCoC,IAoCpC,GAAA,EAAA,CApCoC;;;;;;;;SA6CpC;;;;;;QA/BG,GAsCH,EAAA,YAAA,EAAA,OAtC2C,IAsC3C,CAAA,UAtC6D,CAsC7D,EAAA;;;;;;;;;QASA,GAAA,EAAA,UAAA,EAAA,EAAA;;;;aA4CA;;SAEA;QACA,UAAA,EAAA,IAAA;;;;;;;;;;;;;;QAcI,GAAJ,EAAA,UAAA,UAAA,EAAA;YACM,IAAI,IAAV,CAAA,WAAA,KAAA,UAAA,EAAA;gBACA,IAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,CAAA;aACA;;;;KAIA,CAAA,CAAA;;;;IAIA,QAAQ,CAtDC,SAsDT,CAtDU,QAsDV,GAtD6B,YAsD7B;;QAGA,IAAM,CAAN,WAAA,GAtDY,IAsDZ,CAAA,QAAA,CAAA,IAtDuC,CAsDvC,EAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA;KACA,CAAA;;;;;;QAjDA,IAAA,CAAA,6BAAA,EAAA,CAAA;QAwDI,IAAI,CAvDC,kBAuDT,CAAA,OAAA,CAAA,SAAA,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,6BAAA,EAAA,CAAA,EAAA,CAAA,CAAA;QACI,IAAI,CAvDC,gBAuDT,EAvDU,CAAkB;KAwD5B,CAAA;;;;IAIA,QAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,YAAA;QACA,IAAA,CAAA,qBAAA,EAAA,CAAA;;;;;;;;IAQA,QAAQ,CAvDC,SAuDT,CAAA,WAAA,GAvDiC,YAuDjC;QACA,IAAM,CAAN,eAAA,CAAA,aAAA,CAAA,KAvDyC,EAAG,CAuD5C;;QAEA,IAAA,CAAA,UAAA,CAAA,IAAA,EAAA,CAAA;QAEA,IAAA,CAAA,UAAA,CAAA,QAAA,EAAA,CAAA;QACA,IAAA,IAAQ,CAAR,UAAA,EAAA;YACA,IAAA,CAAA,UAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAAA;SACK;;;;;;IAOL,QAAA,CAAA,SAAA,CAAA,6BAAA,GAAA,YAAA;;;;;;;;SAhDA,CAAA,CAAA;KAyDA,CAAA;;;;;;IAQA,QAAM,CAAN,SAAA,CAAA,qBAAA,GAAA,YAAA;QACA,IAAM,KAxDK,GAwDX,IAAA,CAAA;;;YAIQ,IAAR,CAAA,CAAA,aAAA,CAAA,cAAA,EAAA,EAAA;;gBAEA,KAAA,CAAA,WAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA;gBAEA,KAAA,CAAA,eAxDuB,CAAW,aAwDlC,CAAA,KAAA,EAAA,CAAA;gBACA,KAAA,CAAA,iBAAA,EAAA,CAAA;;;;;YArDA,IAAA,CAAA,qBAAA,CAAA,aAAA,CAAA,KAAA,EAAA,CAAA;YA2DQ,IAAR,CAAA,gBAAA,EAAA,CAAA;SACA;KACA,CAAA;;;;;;;;IAlDG,QAAH,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAA,UAAA,EAAA;QA2DI,IAAJ,CAAA,KAAA,GAAA,EAAA,CAAA;QACI,IAAI,IAAR,CAAA,UA1DuB,EA0DvB;YA1DyB,IAAzB,CAAA,UAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAAA;SAAiC;;;;YA+DzB,IAAR,CAAA,yBAAA,GAAA,IAAA,CAAA;SACA;;QAGA,IAAM,CAAN,UAAA,EAAmB;YACnB,IAAA,CAAA,eAAA,CAAA,aAAA,CAAA,KAAA,EAAA,CAAA;SAEA;QACA,IAAA,CAAA,WAAA,GAAA,UAAA,CAAA;;;;;;IAMA,QAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,YAAA;QACI,IAAI,KAAR,GA5DU,IA4DV,CAAA;QA5DA,IAAoB,CAApB,yBAAA,GAAAD,iCAAA,CAAA,IAAA,CAAA,IAAA,CAAA,UAAA,CAAA,OAAA,CAAA,IAAA,CAAA,EAAA,IAAA,CAAA,UAAA,CAAA;aAAA,SAAA,CAAA,UAAA,IAAA,EAAA;YA8DA,KAAA,CAAA,KAAA,GAAA,IAAA,CA5DU;YA6DV,KAAA,CAAA,iBAAA,EAAA,CA3DwC;SA6DxC,CAAA,CAAA;KACA,CAAA;;;;;IAzDA,QAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;QA6DA,qBAAA,KAAA,GAAA,IAAA,CAAA,6BAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,CAAA;QACA,IAAA,CAAA,KAAA,CAAA,MAAA,EAAA;YACA,OAAA;SACS;;;;;;;;;;KAnDT,CAAA;;;;;;QAqEI,IAAJ,KAAA,GAAA,IAAA,CAAA;;;YAIQ,OAAR;;QAGI,qBAAJ,aAAA,GAAA,IA9D4B,CA8D5B,eAAA,CAAA,aAAA,CAAA;QAEI,OAAJ,CAAA,gBAAA,CAAA,UAAA,IAAA,EAAA,qBAAA,EAAA,YAAA,EAAA;YACM,IAAN,IAAA,CAAA,aAAA,IAAA,IAAA,EAAA;gBACA,KAAA,CAAA,UAAA,CAAA,KAAA,CAAA,KAAA,CAAA,YAAA,CAAA,EAAA,YAAA,CAAA,CAAA;aA5DS;iBA+DT,IAAA,YAAA,IAAA,IAAA,EAAA;;;;;;;SAvDA,CAAA,CAAA;QA+DI,IAAJ,CAAA,iBAAA,EAAA,CAAA;KACA,CAAA;;;;;;;;IAQA,QAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAA,OAAA,EAAA,KAAA,EAAA;;;;;;;;;QASI,IAAI,CA/DC,eA+DT,CAAA,aAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,QAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;QA/DA,qBAAA,KAAA,GAAA,OAAA,GAAA,IAAA,CAAA,uBAAA,CAAA,GAAA,CAAA,GAAA,EAAA,CAAA;QAgEI,KAAJ,CAAA,OAAA,CAAA,UA/DsB,IAAQ,EA+D9B;YACM,aAAN,CAAA,oBAAA,CAAA,cAAA,CAAA,kBAAA,CAAA,IAAA,CA/DwD,QA+DxD,EAAA,OAAA,CAAA,CAAA;SAEA,CAAA,CAAA;QACA,IAAA,CAAA,kBAAA,CAAA,YAAA,EAAA,CAAA;KACA,CAAA;;;;;;;;;;YArDA,qBAAA,OAAA,IAAA,aAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA,CAAA;YAiEQ,OAhEE,CAAM,OAAC,CAgEjB,KAAA,GAAA,KAAA,CAAA;YAhE2B,OAAO,CAAlC,OAAA,CAAA,KAAA,GAAA,KAAA,CAAA;YAAA,OAAA,CAAA,OAAA,CAAA,KAAA,GAAA,KAAA,KAAA,CAAA,CAAA;YAiEA,OAAA,CAAA,OAAA,CAAA,IAAA,GAAA,KAAA,KAAA,KAAA,GAAA,CAAA,CAAA;YACM,OAAN,CAAA,OAAA,CAAA,IAAA,GAhEY,KAgEZ,GAAA,CAhEqB,KAAK,CAgE1B,CAAA;YAEM,OAAN,CAAA,OAAA,CAAA,GAAA,GAAA,CAAA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA;SACA;KACA,CAAA;;;;;;;IAOA,QAAA,CAAA,SAAA,CAAA,6BAAA,GAAA,UAAA,SAAA,EAAA;QACA,IAAA,KAAA,GAAA,IAAU,CAAV;QACA,IAAA,CAAA,SAhEQ,CAgER,OAAA,EAAA;YACA,OAAA,EAAA,CAAA;SACA;QACA,OAAA,SAAA,CAAA,OAAA,CAAA,GAAA,CAAA,UAAA,QAAA,EAAA;YACA,qBAhEmB,MAgEnB,GAAA,KAAA,CAAA,wBAAA,CAAA,GAAA,CAAA,QAAA,CAAA,CAAA;YACA,IAAA,CAhEK,MAgEL,EAAA;gBACA,MAAA,0BAAA,CAAA,QAAA,CAAA,CAAA;;;;KA9DA,CAAA;;;;;;;IAOA,QAAA,CAAA,SAAA,CAAO,uBAAP,GAAA,UAAA,MAAA,EAAA;QAmEA,IAAA,KAAA,GAAA,IAlEoB,CAkEpB;QACA,IAAA,CAAA,MAlEc,CAkEd,OAlEuB,EAkEvB;YACA,OAAA,EAAiB,CAAjB;SACA;QACA,OAAA,MAAA,CAAA,OAlEyB,CAkEzB,GAlEyB,CAkEzB,UAAA,QAlEgD,EAkEhD;YACA,qBAAA,MAAA,GAAA,KAAA,CAlE4C,wBAAuB,CAkEnE,GAlEwE,CAkExE,QAAA,CAAA,CAAA;YACA,IAAA,CAAA,MAlEmB,EAkEnB;gBACA,MAAA,0BAAA,CAAA,QAAA,CAAA,CAAA;;YDxcA,OAAA,MAAA,CAAA,IAD8B,CAC9B;SACA,CAAA,CAAA;KACA,CAAA;IACE,OAAF,QAAA,CAAA;CACA,EAAA,CAAE,CAAF;AACA,QAAA,CAAA,UAAA,GAAA;IACE,EAAF,IAAA,EAAAD,uBAAA,EAAA,IAAA,EAAA,CAAA;gBACA,QAAA,EAAA,WAAA;gBACA,QAAA,EAAA,kBAAA;gBACA,IAAA,EAAA;oBACA,OAAA,EAAA,WAAA;iBACA;gBACA,aAAA,EAAAD,+BAAA,CAAA,IAAA;gBACA,eAAA,EAAAD,qCAAA,CAAA,MAAA;aACA,EAAA,EAAA;CACA,CAAA;;;;AAEA,QAAA,CAAA,cAAS,GACE,YAAE,EADb,OAAA;IACA,EAAA,IAAA,EAAAD,6BAAA,GAAA;IACA,EAAA,IAAA,EAAAD,+BAAA,GAAA;IAEA,EAAA,IAAA,EAAAD,wBAAA,GAAA;IACA,EAAA,IAAA,EAAAD,uBAAA,GAAA;;;;IAGA,SAAA,EAAA,CAAA,EAAA,IAAA,EAAAD,mBAAC,EAAD,EAAA;;ID/CA,iBAAA,EAAA,CAAA,EAAA,IAAA,EAAAD,uBAAA,EAAA,IAAA,EAAA,CAAA,cAAA,EAAA,EAAA,EAAA;;IAEA,oBAAA,EAAA,CAAA,EAAA,IAAA,EAAAD,6BAAA,EAAA,IAAA,EAAA,CAAA,YAAA,EAAA,EAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}