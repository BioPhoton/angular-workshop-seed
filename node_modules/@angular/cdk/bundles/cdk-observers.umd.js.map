{"version":3,"file":"cdk-observers.umd.js","sources":["../../src/cdk/observers/index.ts","../../src/cdk/observers/observe-content.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdMutationObserverFactory,ObserveContent,ObserversModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  NgModule,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  AfterContentInit,\n  Injectable,\n  NgZone,\n} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {RxChain, debounceTime} from '@angular/cdk/rxjs';\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\nexport class MdMutationObserverFactory {\n/**\n * @param {?} callback\n * @return {?}\n */\ncreate(callback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMutationObserverFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMutationObserverFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMutationObserverFactory.ctorParameters;\n}\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nexport class ObserveContent implements AfterContentInit, OnDestroy {\nprivate _observer: MutationObserver | null;\n/**\n * Event emitted for each change in the element's content.\n */\nevent = new EventEmitter<MutationRecord[]>();\n/**\n * Used for debouncing the emitted values to the observeContent event.\n */\nprivate _debouncer = new Subject<MutationRecord[]>();\n/**\n * Debounce interval for emitting the changes.\n */\ndebounce: number;\n/**\n * @param {?} _mutationObserverFactory\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _mutationObserverFactory: MdMutationObserverFactory,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this.debounce > 0) {\n      this._ngZone.runOutsideAngular(() => {\n        RxChain.from(this._debouncer)\n          .call(debounceTime, this.debounce)\n          .subscribe((mutations: MutationRecord[]) => this.event.emit(mutations));\n      });\n    } else {\n      this._debouncer.subscribe(mutations => this.event.emit(mutations));\n    }\n\n    this._observer = this._ngZone.runOutsideAngular(() => {\n      return this._mutationObserverFactory.create((mutations: MutationRecord[]) => {\n        this._debouncer.next(mutations);\n      });\n    });\n\n    if (this._observer) {\n      this._observer.observe(this._elementRef.nativeElement, {\n        characterData: true,\n        childList: true,\n        subtree: true\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._observer) {\n      this._observer.disconnect();\n    }\n\n    this._debouncer.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkObserveContent]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdMutationObserverFactory, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'event': [{ type: Output, args: ['cdkObserveContent', ] },],\n'debounce': [{ type: Input },],\n};\n}\n\nfunction ObserveContent_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContent.ctorParameters;\n/** @type {?} */\nObserveContent.propDecorators;\n/** @type {?} */\nObserveContent.prototype._observer;\n/**\n * Event emitted for each change in the element's content.\n * @type {?}\n */\nObserveContent.prototype.event;\n/**\n * Used for debouncing the emitted values to the observeContent event.\n * @type {?}\n */\nObserveContent.prototype._debouncer;\n/**\n * Debounce interval for emitting the changes.\n * @type {?}\n */\nObserveContent.prototype.debounce;\n/** @type {?} */\nObserveContent.prototype._mutationObserverFactory;\n/** @type {?} */\nObserveContent.prototype._elementRef;\n/** @type {?} */\nObserveContent.prototype._ngZone;\n}\n\nexport class ObserversModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [ObserveContent],\n  declarations: [ObserveContent],\n  providers: [MdMutationObserverFactory]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ObserversModule_tsickle_Closure_declarations() {\n/** @type {?} */\nObserversModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserversModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["Input","NgZone","ElementRef","debounceTime","RxChain"],"mappings":";;;;;;;;;;;;;;;;;;IC2BA,SAAA,yBAAA,GAAA;;;;;;IAMA,yBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAA,QAAA,EAAA;QACA,OAAA,OAAA,gBAAA,KAAA,WAAA,GAAA,IAAA,GAAA,IAAA,gBAAA,CAAA,QAAA,CAAA,CAAA;;IAFA,OAAA,yBAAO,CAAP;CAIA,EAAA,CAAA,CAAA;AACA,yBAAA,CAAA,UAAA,GAAA;;;;;;;;;;;;;;;;;IAsBA,SAAA,cAAY,CAAZ,wBAAA,EAAA,WAAA,EAAA,OAAA,EAAA;QACY,IAAZ,CAAA,wBAAA,GAAA,wBAAA,CAAA;;;;;;;;;;;;;;;IA2BA,cAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;QACA,IAAA,KAAA,GAAA,IAvBgB,CAuBhB;QACA,IAAA,IAAA,CAAA,QAvBY,GAuBZ,CAAA,EAAA;YACA,IAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,YAAA;gBACAI,yBAAA,CAAA,IAAA,CAAA,KAAA,CAAA,UAAA,CAAA;qBACA,IAAA,CAAAD,8BAAA,EAAA,KAAA,CAAA,QAAA,CAAA;qBAvBA,SAAA,CAAA,UAAA,SAAA,EAAA,EAAA,OAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA;aAwBA,CAAA,CAAA;SACK;aArBI;YAwBH,IAAN,CAAA,UAAA,CAAA,SAAA,CAAA,UAvBmB,SAAgC,EAuBnD,EAAA,OAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA;SACA;QACA,IAAA,CAAO,SAAP,GAAA,IAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,YAAA;YACA,OAAA,KAAA,CAAA,wBAAA,CAAA,MAAA,CAAA,UAAA,SAAA,EAAA;gBArBS,KAuBT,CAAA,UAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;aACA,CAAA,CAAA;SACA,CAAA,CAAA;QACA,IAAA,IAAQ,CAAR,SAAA,EAAA;YACA,IAAQ,CAAR,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,WAAA,CAAA,aAAA,EAAA;gBACA,aAAA,EAAA,IAAA;gBACA,SAAA,EAAA,IAAA;gBACA,OAAA,EAAA,IAAA;;;;;;;IAOA,cAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;QAEI,IAAI,IAAR,CAAA,SAAA,EAAA;YACA,IAAA,CAAA,SAAA,CAAA,UAAA,EAAA,CAAA;;QAxBA,IAAA,CAAA,UAAA,CAAA,QAAA,EAAA,CAAA;KA0BA,CAzBE;IA0BF,OAAA,cAAA,CAzBY;CA0BZ,EAAA,CAAA,CAAA;AACA,cAAA,CAAA,UAAA,GAAA;;;;CAvBA,CAAA;;;;AA+BA,cAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;IA1BA,EAAA,IAAA,EAAA,yBAAA,GAAA;IA4BA,EAAA,IAAA,EAAAD,wBA3BkB,GA2BlB;IACA,EAAA,IAAA,EAAAD,oBAAA,GAAA;CACC,CA3BC,EA2BF,CAAA;AAGA,cAAA,CAAA,cAAA,GAAA;;IAzBA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAAD,mBAAA,EAAA,EAAA;CA6DA,CAAA;AACA,IAAA,eAAA,IAAS,YAAT;IACA,SAAA,eAAc,GA5DE;KA6DhB;IACA,OAAA,eAAA,CAAA;CACC,EAAD,CAAA,CAAA;;;;gBA1DA,YAAA,EAAC,CAAD,cAAA,CAAA;;aD1HA,EAAA,EAAA;;;;;;;;;;;;;"}