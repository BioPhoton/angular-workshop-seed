{"version":3,"file":"cdk-platform.umd.js","sources":["../../src/cdk/platform/index.ts","../../src/cdk/platform/public_api.ts","../../src/cdk/platform/features.ts","../../src/cdk/platform/platform.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {PlatformModule,Platform,getSupportedInputTypes} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {Platform} from './platform';\nexport class PlatformModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [Platform]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PlatformModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPlatformModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatformModule.ctorParameters;\n}\n\n\n\nexport {Platform} from './platform';\nexport {getSupportedInputTypes} from './features';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Cached result Set of input types support by the current browser.\n */\nlet supportedInputTypes: Set<string>;\n/**\n * Types of <input> that *might* be supported.\n */\nconst candidateInputTypes = [\n  // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n  // first changing it to something else:\n  // The specified value \"\" does not conform to the required format.\n  // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n  'color',\n  'button',\n  'checkbox',\n  'date',\n  'datetime-local',\n  'email',\n  'file',\n  'hidden',\n  'image',\n  'month',\n  'number',\n  'password',\n  'radio',\n  'range',\n  'reset',\n  'search',\n  'submit',\n  'tel',\n  'text',\n  'time',\n  'url',\n  'week',\n];\n/**\n * @return {?} The input types supported by this browser.\n */\nexport function getSupportedInputTypes(): Set<string> {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  }\n\n  // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  let /** @type {?} */ featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n\n  return supportedInputTypes;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nconst /** @type {?} */ hasV8BreakIterator = (typeof(Intl) !== 'undefined' && ( /** @type {?} */((Intl as any))).v8BreakIterator);\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n * \\@docs-private\n */\nexport class Platform {\n  isBrowser: boolean = typeof document === 'object' && !!document;\n/**\n * Layout Engines\n */\nEDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n  TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n  BLINK = this.isBrowser &&\n      (!!(( /** @type {?} */((window as any))).chrome || hasV8BreakIterator) && !!CSS && !this.EDGE && !this.TRIDENT);\n\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n  WEBKIT = this.isBrowser &&\n      /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n/**\n * Browsers and Platform Types\n */\nIOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream;\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n\n  // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n  SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Platform_tsickle_Closure_declarations() {\n/** @type {?} */\nPlatform.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatform.ctorParameters;\n/** @type {?} */\nPlatform.prototype.isBrowser;\n/**\n * Layout Engines\n * @type {?}\n */\nPlatform.prototype.EDGE;\n/** @type {?} */\nPlatform.prototype.TRIDENT;\n/** @type {?} */\nPlatform.prototype.BLINK;\n/** @type {?} */\nPlatform.prototype.WEBKIT;\n/**\n * Browsers and Platform Types\n * @type {?}\n */\nPlatform.prototype.IOS;\n/** @type {?} */\nPlatform.prototype.FIREFOX;\n/** @type {?} */\nPlatform.prototype.ANDROID;\n/** @type {?} */\nPlatform.prototype.SAFARI;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["NgModule","Injectable"],"mappings":";;;;;;;;;;;;;;;;;;;;;;IGmBA,SAAA,QAAA,GAAA;QAAA,IAAA,CAAA,SAAA,GAAA,OAAA,QAAA,KAAA,QAAA,IAAA,CAAA,CAAA,QAAA,CAAA;;;;;QAKA,IAAA,CAAA,OAAG,GAAH,IAAA,CAAA,SAAA,IAAA,iBAAA,CAAA,IAAG,CAAH,SAAG,CAAA,SAAH,CAAA,CAAA;;;aAIA,CAAA,EAAA,EAAO,MAAP,GAAA,MAAA,IAAA,kBAAA,CAAA,IAAA,CAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,IAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA;;;;YAKA,cAAW,CAAK,IAAhB,CAAA,SAAA,CAAA,SAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,IAAA,CAAA,IAAA,CAAA,IAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA;;;;;;;;;;;;;;;;KAmBA;IASA,OAAA,QAAA,CAAA;;AATO,QAAP,CAAA,UAAO,GAAoC;IAE3C,EADE,IAAA,EAAMC,wBAAA,EAAW;CAElB,CADC;;;;AAED,QAAD,CAAA,cAAC,GAAA,YAAD,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;;;;;;;;;;;;;ID3CE,QAAF;IACE,UAAF;IACE,MAAF;IACE,gBAAF;IACE,OAAF;IACE,MAAF;IACE,QAAF;IACE,OAAF;IACE,OAAO;IACP,QAAF;IACE,UAAF;IACE,OAAF;IACE,OAAO;IACP,OAAO;IACP,QAAF;IACE,QAAQ;IACR,KAAF;IACE,MAAF;IACE,MAAM;IACN,KAAF;IACE,MAAF;CACA,CAAA;;;;;;;QAOM,OAAN,mBAAA,CAAA;KACA;;;;;QAMM,mBAAN,GAAA,IAAA,GAAA,CAAA,mBAAA,CAAA,CAAA;QACI,OAAJ,mBAG8B,CAH9B;KACA;IACA,qBAAA,gBAAA,GAAA,QAAA,CAAA,aAAA,CAAA,OAAA,CAAA,CAAA;IAEE,mBAAF,GAAA,IAAA,GAAA,CAAA,mBAGkC,CAHlC,MAAA,CAAA,UAAA,KAGyD,EAHzD;QACA,gBAAA,CAAA,YAAA,CAAA,MAAA,EAAA,KAAA,CAAA,CAGiC;QAF7B,OAAJ,gBAAA,CAAA,IAAA,KAAA,KAG0C,CAH1C;KACA,CAAA,CAAA,CAAI;IACJ,OAAA,mBAAA,CAAA;CAEA;AACA,IAAA,cAAA,IAAA,YAAA;;KDjDA;;CAEA,EAAA,CAAA,CAAA;AADA,cAAA,CAAA,UAAA,GAEwB;IADxB,EAAA,IAAA,EAAAD,sBAAA,EAAA,IAAA,EAEa,CAFb;gBACA,SAAA,EAAA,CAAA,QAAA,CAAA;aACA,EAAA,EAAA;;;;;2DDfA;;;;;;;;"}