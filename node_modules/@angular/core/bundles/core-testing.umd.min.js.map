{"version":3,"sources":["packages/core/core-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","core","testing","this","_global","window","runInTestZone","fn","context","finishCallback","failCallback","currentZone","Zone","current","AsyncTestZoneSpec","undefined","Error","ProxyZoneSpec","proxyZoneSpec","get","assertPresent","proxyZone","getZoneWith","previousDelegate","getDelegate","parent","run","testZoneSpec","setDelegate","error","runGuarded","ComponentFixture","componentRef","ngZone","_autoDetect","_this","_isStable","_isDestroyed","_resolve","_promise","_onUnstableSubscription","_onStableSubscription","_onMicrotaskEmptySubscription","_onErrorSubscription","changeDetectorRef","elementRef","location","debugElement","getDebugNode","nativeElement","componentInstance","instance","runOutsideAngular","onUnstable","subscribe","next","onMicrotaskEmpty","detectChanges","onStable","scheduleMicroTask","hasPendingMacrotasks","onError","prototype","_tick","checkNoChanges","autoDetectChanges","autoDetect","isStable","whenStable","Promise","resolve","res","_getRenderer","_renderer","injector","RendererFactory2","whenRenderingDone","renderer","destroy","unsubscribe","_Zone$1","FakeAsyncTestZoneSpec","_fakeAsyncTestZoneSpec","resetFakeAsyncZoneFallback","resetDelegate","_inFakeAsyncCall","_getFakeAsyncZoneSpec","flushMicrotasksFallback","flushMicrotasks","_Zone","fakeAsyncTestModule","__symbol__","resetFakeAsyncZone","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__values","o","m","Symbol","iterator","i","call","length","value","done","__read","n","r","e","ar","push","__spread","arguments","concat","AsyncTestCompleter","rej","_reject","fail","stackTrace","defineProperty","enumerable","configurable","unimplemented","TestingCompiler","_super","apply","__extends","__","constructor","create","overrideModule","overrides","overrideDirective","directive","overrideComponent","component","overridePipe","loadAotSummaries","summaries","getComponentFactory","getComponentFromError","decorators","type","Injectable","ctorParameters","Compiler","TestingCompilerFactory","UNDEFINED","TestComponentRenderer","insertRootElement","rootElementId","_nextRootElementId","ComponentFixtureAutoDetect","InjectionToken","ComponentFixtureNoNgZone","TestBed","_instantiated","_compiler","_moduleRef","_moduleFactory","_compilerOptions","_moduleOverrides","_componentOverrides","_directiveOverrides","_pipeOverrides","_providers","_declarations","_imports","_schemas","_activeFixtures","_testEnvAotSummaries","_aotSummaries","_templateOverrides","_isRoot","_rootProviderOverrides","platform","ngModule","initTestEnvironment","aotSummaries","testBed","getTestBed","resetTestEnvironment","resetTestingModule","configureCompiler","config","configureTestingModule","moduleDef","compileComponents","override","pipe","overrideTemplate","template","set","templateUrl","overrideTemplateUsingTestingModule","overrideProvider","token","provider","deprecatedOverrideProvider","notFoundValue","Injector","THROW_IF_NOT_FOUND","createComponent","ɵclearOverrides","forEach","fixture","console","stacktrace","_assertNotInstantiated","_a","_b","_c","_d","providers","declarations","imports","schemas","moduleType","_createCompilerAndModule","compileModuleAndAllComponentsAsync","then","moduleAndComponentFactories","ngModuleFactory","_initIfNeeded","compileModuleAndAllComponentsSync","errorCompType","ɵstringify","compFactory","templateOf","ɵoverrideComponentView","e_1_1","e_1","return","NgZone","enableLongStackTrace","ngZoneInjector","provide","useValue","name","ApplicationInitStatus","runInitializers","map","entry","rootScopeImports","rootProviderOverrides","RootScopeModule","NgModule","args","ɵAPP_ROOT","e_2","DynamicTestModule","compilerFactory","createTestingCompiler","e_2_1","methodName","methodDescription","result","execute","tokens","params","t","overrideProviderImpl","deprecated","ngInjectableDef","providedIn","useFactory","deps","flags","dep","depToken","depFlags","isArray","Optional","SkipSelf","ɵoverrideProvider","deprecatedBehavior","OverrideComponent","Component","selector","componentFactory","noNgZone","testComponentRenderer","rootElId","initComponent","NULL","_testBed","inject","indexOf","completer","promise","InjectSetupWrapper","_moduleDef","_addModule","self","_global$1","beforeEach","savedDocument","savedRequestAnimationFrame","savedNode","requestAnimationFrameCount","ɵ0","domino","process","ensureDocument","window_1","createWindow","document","Event","Node","impl","requestAnimationFrame","cb","setImmediate","cleanupDocument","afterEach","async","reject","asyncTest","asyncFallback","jasmine","err","fakeAsync","fakeAsyncFallback","_i","lastProxyZoneSpec","pendingPeriodicTimers","pendingTimers","tick","millis","tickFallback","flush","maxTurns","flushFallback","discardPeriodicTasks","discardPeriodicTasksFallback","withModule","__core_private_testing_placeholder__","ɵTestingCompiler","ɵTestingCompilerFactory","withBody","html","blockFn","body","innerHTML","blockReturn"],"mappings":"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","sourcesContent":["/**\n * @license Angular v6.0.3\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/core/testing', ['exports', '@angular/core'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}, global.ng.core.testing = {}),global.ng.core));\n}(this, (function (exports,core) { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _global = (typeof window === 'undefined' ? global : window);\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n *\n */\nfunction asyncFallback(fn) {\n    // If we're running using the Jasmine test framework, adapt to call the 'done'\n    // function when asynchronous activity is finished.\n    if (_global.jasmine) {\n        // Not using an arrow function to preserve context passed from call site\n        return function (done) {\n            if (!done) {\n                // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n                // fake it here and assume sync.\n                done = function () { };\n                done.fail = function (e) { throw e; };\n            }\n            runInTestZone(fn, this, done, function (err) {\n                if (typeof err === 'string') {\n                    return done.fail(new Error(err));\n                }\n                else {\n                    done.fail(err);\n                }\n            });\n        };\n    }\n    // Otherwise, return a promise which will resolve when asynchronous activity\n    // is finished. This will be correctly consumed by the Mocha framework with\n    // it('...', async(myFn)); or can be used in a custom framework.\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n        var _this = this;\n        return new Promise(function (finishCallback, failCallback) {\n            runInTestZone(fn, _this, finishCallback, failCallback);\n        });\n    };\n}\nfunction runInTestZone(fn, context, finishCallback, failCallback) {\n    var currentZone = Zone.current;\n    var AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n    if (AsyncTestZoneSpec === undefined) {\n        throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/dist/async-test.js');\n    }\n    var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n    if (ProxyZoneSpec === undefined) {\n        throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/dist/proxy.js');\n    }\n    var proxyZoneSpec = ProxyZoneSpec.get();\n    ProxyZoneSpec.assertPresent();\n    // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n    // If we do it in ProxyZone then we will get to infinite recursion.\n    var proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n    var previousDelegate = proxyZoneSpec.getDelegate();\n    proxyZone.parent.run(function () {\n        var testZoneSpec = new AsyncTestZoneSpec(function () {\n            // Need to restore the original zone.\n            currentZone.run(function () {\n                if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                    // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                    proxyZoneSpec.setDelegate(previousDelegate);\n                }\n                finishCallback();\n            });\n        }, function (error) {\n            // Need to restore the original zone.\n            currentZone.run(function () {\n                if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                    // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                    proxyZoneSpec.setDelegate(previousDelegate);\n                }\n                failCallback(error);\n            });\n        }, 'test');\n        proxyZoneSpec.setDelegate(testZoneSpec);\n    });\n    return Zone.current.runGuarded(fn, context);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n *\n */\nfunction async(fn) {\n    var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n    if (!_Zone) {\n        return function () {\n            return Promise.reject('Zone is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/zone.js');\n        };\n    }\n    var asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n    if (typeof asyncTest === 'function') {\n        return asyncTest(fn);\n    }\n    // not using new version of zone.js\n    // TODO @JiaLiPassion, remove this after all library updated to\n    // newest version of zone.js(0.8.25)\n    return asyncFallback(fn);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Fixture for debugging and testing a component.\n *\n *\n */\nvar ComponentFixture = /** @class */ (function () {\n    function ComponentFixture(componentRef, ngZone, _autoDetect) {\n        var _this = this;\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        this._autoDetect = _autoDetect;\n        this._isStable = true;\n        this._isDestroyed = false;\n        this._resolve = null;\n        this._promise = null;\n        this._onUnstableSubscription = null;\n        this._onStableSubscription = null;\n        this._onMicrotaskEmptySubscription = null;\n        this._onErrorSubscription = null;\n        this.changeDetectorRef = componentRef.changeDetectorRef;\n        this.elementRef = componentRef.location;\n        this.debugElement = core.getDebugNode(this.elementRef.nativeElement);\n        this.componentInstance = componentRef.instance;\n        this.nativeElement = this.elementRef.nativeElement;\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        if (ngZone) {\n            // Create subscriptions outside the NgZone so that the callbacks run oustide\n            // of NgZone.\n            ngZone.runOutsideAngular(function () {\n                _this._onUnstableSubscription =\n                    ngZone.onUnstable.subscribe({ next: function () { _this._isStable = false; } });\n                _this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                    next: function () {\n                        if (_this._autoDetect) {\n                            // Do a change detection run with checkNoChanges set to true to check\n                            // there are no changes on the second run.\n                            // Do a change detection run with checkNoChanges set to true to check\n                            // there are no changes on the second run.\n                            _this.detectChanges(true);\n                        }\n                    }\n                });\n                _this._onStableSubscription = ngZone.onStable.subscribe({\n                    next: function () {\n                        _this._isStable = true;\n                        // Check whether there is a pending whenStable() completer to resolve.\n                        if (_this._promise !== null) {\n                            // If so check whether there are no pending macrotasks before resolving.\n                            // Do this check in the next tick so that ngZone gets a chance to update the state of\n                            // pending macrotasks.\n                            scheduleMicroTask(function () {\n                                if (!ngZone.hasPendingMacrotasks) {\n                                    if (_this._promise !== null) {\n                                        _this._resolve(true);\n                                        _this._resolve = null;\n                                        _this._promise = null;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                _this._onErrorSubscription =\n                    ngZone.onError.subscribe({ next: function (error) { throw error; } });\n            });\n        }\n    }\n    ComponentFixture.prototype._tick = function (checkNoChanges) {\n        this.changeDetectorRef.detectChanges();\n        if (checkNoChanges) {\n            this.checkNoChanges();\n        }\n    };\n    /**\n     * Trigger a change detection cycle for the component.\n     */\n    /**\n       * Trigger a change detection cycle for the component.\n       */\n    ComponentFixture.prototype.detectChanges = /**\n       * Trigger a change detection cycle for the component.\n       */\n    function (checkNoChanges) {\n        var _this = this;\n        if (checkNoChanges === void 0) { checkNoChanges = true; }\n        if (this.ngZone != null) {\n            // Run the change detection inside the NgZone so that any async tasks as part of the change\n            // detection are captured by the zone and can be waited for in isStable.\n            this.ngZone.run(function () { _this._tick(checkNoChanges); });\n        }\n        else {\n            // Running without zone. Just do the change detection.\n            this._tick(checkNoChanges);\n        }\n    };\n    /**\n     * Do a change detection run to make sure there were no changes.\n     */\n    /**\n       * Do a change detection run to make sure there were no changes.\n       */\n    ComponentFixture.prototype.checkNoChanges = /**\n       * Do a change detection run to make sure there were no changes.\n       */\n    function () { this.changeDetectorRef.checkNoChanges(); };\n    /**\n     * Set whether the fixture should autodetect changes.\n     *\n     * Also runs detectChanges once so that any existing change is detected.\n     */\n    /**\n       * Set whether the fixture should autodetect changes.\n       *\n       * Also runs detectChanges once so that any existing change is detected.\n       */\n    ComponentFixture.prototype.autoDetectChanges = /**\n       * Set whether the fixture should autodetect changes.\n       *\n       * Also runs detectChanges once so that any existing change is detected.\n       */\n    function (autoDetect) {\n        if (autoDetect === void 0) { autoDetect = true; }\n        if (this.ngZone == null) {\n            throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n        }\n        this._autoDetect = autoDetect;\n        this.detectChanges();\n    };\n    /**\n     * Return whether the fixture is currently stable or has async tasks that have not been completed\n     * yet.\n     */\n    /**\n       * Return whether the fixture is currently stable or has async tasks that have not been completed\n       * yet.\n       */\n    ComponentFixture.prototype.isStable = /**\n       * Return whether the fixture is currently stable or has async tasks that have not been completed\n       * yet.\n       */\n    function () { return this._isStable && !this.ngZone.hasPendingMacrotasks; };\n    /**\n     * Get a promise that resolves when the fixture is stable.\n     *\n     * This can be used to resume testing after events have triggered asynchronous activity or\n     * asynchronous change detection.\n     */\n    /**\n       * Get a promise that resolves when the fixture is stable.\n       *\n       * This can be used to resume testing after events have triggered asynchronous activity or\n       * asynchronous change detection.\n       */\n    ComponentFixture.prototype.whenStable = /**\n       * Get a promise that resolves when the fixture is stable.\n       *\n       * This can be used to resume testing after events have triggered asynchronous activity or\n       * asynchronous change detection.\n       */\n    function () {\n        var _this = this;\n        if (this.isStable()) {\n            return Promise.resolve(false);\n        }\n        else if (this._promise !== null) {\n            return this._promise;\n        }\n        else {\n            this._promise = new Promise(function (res) { _this._resolve = res; });\n            return this._promise;\n        }\n    };\n    ComponentFixture.prototype._getRenderer = function () {\n        if (this._renderer === undefined) {\n            this._renderer = this.componentRef.injector.get(core.RendererFactory2, null);\n        }\n        return this._renderer;\n    };\n    /**\n      * Get a promise that resolves when the ui state is stable following animations.\n      */\n    /**\n        * Get a promise that resolves when the ui state is stable following animations.\n        */\n    ComponentFixture.prototype.whenRenderingDone = /**\n        * Get a promise that resolves when the ui state is stable following animations.\n        */\n    function () {\n        var renderer = this._getRenderer();\n        if (renderer && renderer.whenRenderingDone) {\n            return renderer.whenRenderingDone();\n        }\n        return this.whenStable();\n    };\n    /**\n     * Trigger component destruction.\n     */\n    /**\n       * Trigger component destruction.\n       */\n    ComponentFixture.prototype.destroy = /**\n       * Trigger component destruction.\n       */\n    function () {\n        if (!this._isDestroyed) {\n            this.componentRef.destroy();\n            if (this._onUnstableSubscription != null) {\n                this._onUnstableSubscription.unsubscribe();\n                this._onUnstableSubscription = null;\n            }\n            if (this._onStableSubscription != null) {\n                this._onStableSubscription.unsubscribe();\n                this._onStableSubscription = null;\n            }\n            if (this._onMicrotaskEmptySubscription != null) {\n                this._onMicrotaskEmptySubscription.unsubscribe();\n                this._onMicrotaskEmptySubscription = null;\n            }\n            if (this._onErrorSubscription != null) {\n                this._onErrorSubscription.unsubscribe();\n                this._onErrorSubscription = null;\n            }\n            this._isDestroyed = true;\n        }\n    };\n    return ComponentFixture;\n}());\nfunction scheduleMicroTask(fn) {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * fakeAsync has been moved to zone.js\n * this file is for fallback in case old version of zone.js is used\n */\nvar _Zone$1 = typeof Zone !== 'undefined' ? Zone : null;\nvar FakeAsyncTestZoneSpec = _Zone$1 && _Zone$1['FakeAsyncTestZoneSpec'];\nvar ProxyZoneSpec = _Zone$1 && _Zone$1['ProxyZoneSpec'];\nvar _fakeAsyncTestZoneSpec = null;\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @experimental\n */\nfunction resetFakeAsyncZoneFallback() {\n    _fakeAsyncTestZoneSpec = null;\n    // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n    ProxyZoneSpec && ProxyZoneSpec.assertPresent().resetDelegate();\n}\nvar _inFakeAsyncCall = false;\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * ## Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @experimental\n */\nfunction fakeAsyncFallback(fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var proxyZoneSpec = ProxyZoneSpec.assertPresent();\n        if (_inFakeAsyncCall) {\n            throw new Error('fakeAsync() calls can not be nested');\n        }\n        _inFakeAsyncCall = true;\n        try {\n            if (!_fakeAsyncTestZoneSpec) {\n                if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n                    throw new Error('fakeAsync() calls can not be nested');\n                }\n                _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n            }\n            var res = void 0;\n            var lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n            proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n            try {\n                res = fn.apply(this, args);\n                flushMicrotasksFallback();\n            }\n            finally {\n                proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n            }\n            if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n                throw new Error(_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length + \" \" +\n                    \"periodic timer(s) still in the queue.\");\n            }\n            if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n                throw new Error(_fakeAsyncTestZoneSpec.pendingTimers.length + \" timer(s) still in the queue.\");\n            }\n            return res;\n        }\n        finally {\n            _inFakeAsyncCall = false;\n            resetFakeAsyncZoneFallback();\n        }\n    };\n}\nfunction _getFakeAsyncZoneSpec() {\n    if (_fakeAsyncTestZoneSpec == null) {\n        throw new Error('The code should be running in the fakeAsync zone to call this function');\n    }\n    return _fakeAsyncTestZoneSpec;\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * ## Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @experimental\n */\nfunction tickFallback(millis) {\n    if (millis === void 0) { millis = 0; }\n    _getFakeAsyncZoneSpec().tick(millis);\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @experimental\n */\nfunction flushFallback(maxTurns) {\n    return _getFakeAsyncZoneSpec().flush(maxTurns);\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * @experimental\n */\nfunction discardPeriodicTasksFallback() {\n    var zoneSpec = _getFakeAsyncZoneSpec();\n    var pendingTimers = zoneSpec.pendingPeriodicTimers;\n    zoneSpec.pendingPeriodicTimers.length = 0;\n}\n/**\n * Flush any pending microtasks.\n *\n * @experimental\n */\nfunction flushMicrotasksFallback() {\n    _getFakeAsyncZoneSpec().flushMicrotasks();\n}\n\nvar _Zone = typeof Zone !== 'undefined' ? Zone : null;\nvar fakeAsyncTestModule = _Zone && _Zone[_Zone.__symbol__('fakeAsyncTest')];\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @experimental\n */\nfunction resetFakeAsyncZone() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.resetFakeAsyncZone();\n    }\n    else {\n        return resetFakeAsyncZoneFallback();\n    }\n}\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * ## Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @experimental\n */\nfunction fakeAsync(fn) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.fakeAsync(fn);\n    }\n    else {\n        return fakeAsyncFallback(fn);\n    }\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * ## Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @experimental\n */\nfunction tick(millis) {\n    if (millis === void 0) { millis = 0; }\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.tick(millis);\n    }\n    else {\n        return tickFallback(millis);\n    }\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @experimental\n */\nfunction flush(maxTurns) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.flush(maxTurns);\n    }\n    else {\n        return flushFallback(maxTurns);\n    }\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * @experimental\n */\nfunction discardPeriodicTasks() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.discardPeriodicTasks();\n    }\n    else {\n        discardPeriodicTasksFallback();\n    }\n}\n/**\n * Flush any pending microtasks.\n *\n * @experimental\n */\nfunction flushMicrotasks() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.flushMicrotasks();\n    }\n    else {\n        return flushMicrotasksFallback();\n    }\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n */\nvar AsyncTestCompleter = /** @class */ (function () {\n    function AsyncTestCompleter() {\n        var _this = this;\n        this._promise = new Promise(function (res, rej) {\n            _this._resolve = res;\n            _this._reject = rej;\n        });\n    }\n    AsyncTestCompleter.prototype.done = function (value) { this._resolve(value); };\n    AsyncTestCompleter.prototype.fail = function (error, stackTrace) { this._reject(error); };\n    Object.defineProperty(AsyncTestCompleter.prototype, \"promise\", {\n        get: function () { return this._promise; },\n        enumerable: true,\n        configurable: true\n    });\n    return AsyncTestCompleter;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction unimplemented() {\n    throw Error('unimplemented');\n}\n/**\n * Special interface to the compiler only used by testing\n *\n * @experimental\n */\nvar TestingCompiler = /** @class */ (function (_super) {\n    __extends(TestingCompiler, _super);\n    function TestingCompiler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(TestingCompiler.prototype, \"injector\", {\n        get: function () { throw unimplemented(); },\n        enumerable: true,\n        configurable: true\n    });\n    TestingCompiler.prototype.overrideModule = function (module, overrides) {\n        throw unimplemented();\n    };\n    TestingCompiler.prototype.overrideDirective = function (directive, overrides) {\n        throw unimplemented();\n    };\n    TestingCompiler.prototype.overrideComponent = function (component, overrides) {\n        throw unimplemented();\n    };\n    TestingCompiler.prototype.overridePipe = function (directive, overrides) {\n        throw unimplemented();\n    };\n    /**\n     * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n     * so that it can use the code generated by AOT.\n     */\n    /**\n       * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n       * so that it can use the code generated by AOT.\n       */\n    TestingCompiler.prototype.loadAotSummaries = /**\n       * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n       * so that it can use the code generated by AOT.\n       */\n    function (summaries) { throw unimplemented(); };\n    /**\n     * Gets the component factory for the given component.\n     * This assumes that the component has been compiled before calling this call using\n     * `compileModuleAndAllComponents*`.\n     */\n    /**\n       * Gets the component factory for the given component.\n       * This assumes that the component has been compiled before calling this call using\n       * `compileModuleAndAllComponents*`.\n       */\n    TestingCompiler.prototype.getComponentFactory = /**\n       * Gets the component factory for the given component.\n       * This assumes that the component has been compiled before calling this call using\n       * `compileModuleAndAllComponents*`.\n       */\n    function (component) { throw unimplemented(); };\n    /**\n     * Returns the component type that is stored in the given error.\n     * This can be used for errors created by compileModule...\n     */\n    /**\n       * Returns the component type that is stored in the given error.\n       * This can be used for errors created by compileModule...\n       */\n    TestingCompiler.prototype.getComponentFromError = /**\n       * Returns the component type that is stored in the given error.\n       * This can be used for errors created by compileModule...\n       */\n    function (error) { throw unimplemented(); };\n    TestingCompiler.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    TestingCompiler.ctorParameters = function () { return []; };\n    return TestingCompiler;\n}(core.Compiler));\n/**\n * A factory for creating a Compiler\n *\n * @experimental\n */\nvar TestingCompilerFactory = /** @class */ (function () {\n    function TestingCompilerFactory() {\n    }\n    return TestingCompilerFactory;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar UNDEFINED = new Object();\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @experimental\n */\nvar TestComponentRenderer = /** @class */ (function () {\n    function TestComponentRenderer() {\n    }\n    TestComponentRenderer.prototype.insertRootElement = function (rootElementId) { };\n    return TestComponentRenderer;\n}());\nvar _nextRootElementId = 0;\n/**\n * @experimental\n */\nvar ComponentFixtureAutoDetect = new core.InjectionToken('ComponentFixtureAutoDetect');\n/**\n * @experimental\n */\nvar ComponentFixtureNoNgZone = new core.InjectionToken('ComponentFixtureNoNgZone');\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n *\n */\nvar TestBed = /** @class */ (function () {\n    function TestBed() {\n        this._instantiated = false;\n        this._compiler = null;\n        this._moduleRef = null;\n        this._moduleFactory = null;\n        this._compilerOptions = [];\n        this._moduleOverrides = [];\n        this._componentOverrides = [];\n        this._directiveOverrides = [];\n        this._pipeOverrides = [];\n        this._providers = [];\n        this._declarations = [];\n        this._imports = [];\n        this._schemas = [];\n        this._activeFixtures = [];\n        this._testEnvAotSummaries = function () { return []; };\n        this._aotSummaries = [];\n        this._templateOverrides = [];\n        this._isRoot = true;\n        this._rootProviderOverrides = [];\n        this.platform = null;\n        this.ngModule = null;\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @experimental\n     */\n    /**\n       * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n       * angular module. These are common to every test in the suite.\n       *\n       * This may only be called once, to set up the common providers for the current test\n       * suite on the current platform. If you absolutely need to change the providers,\n       * first use `resetTestEnvironment`.\n       *\n       * Test modules and platforms for individual platforms are available from\n       * '@angular/<platform_name>/testing'.\n       *\n       * @experimental\n       */\n    TestBed.initTestEnvironment = /**\n       * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n       * angular module. These are common to every test in the suite.\n       *\n       * This may only be called once, to set up the common providers for the current test\n       * suite on the current platform. If you absolutely need to change the providers,\n       * first use `resetTestEnvironment`.\n       *\n       * Test modules and platforms for individual platforms are available from\n       * '@angular/<platform_name>/testing'.\n       *\n       * @experimental\n       */\n    function (ngModule, platform, aotSummaries) {\n        var testBed = getTestBed();\n        testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n        return testBed;\n    };\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @experimental\n     */\n    /**\n       * Reset the providers for the test injector.\n       *\n       * @experimental\n       */\n    TestBed.resetTestEnvironment = /**\n       * Reset the providers for the test injector.\n       *\n       * @experimental\n       */\n    function () { getTestBed().resetTestEnvironment(); };\n    TestBed.resetTestingModule = function () {\n        getTestBed().resetTestingModule();\n        return TestBed;\n    };\n    /**\n     * Allows overriding default compiler providers and settings\n     * which are defined in test_injector.js\n     */\n    /**\n       * Allows overriding default compiler providers and settings\n       * which are defined in test_injector.js\n       */\n    TestBed.configureCompiler = /**\n       * Allows overriding default compiler providers and settings\n       * which are defined in test_injector.js\n       */\n    function (config) {\n        getTestBed().configureCompiler(config);\n        return TestBed;\n    };\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n    /**\n       * Allows overriding default providers, directives, pipes, modules of the test injector,\n       * which are defined in test_injector.js\n       */\n    TestBed.configureTestingModule = /**\n       * Allows overriding default providers, directives, pipes, modules of the test injector,\n       * which are defined in test_injector.js\n       */\n    function (moduleDef) {\n        getTestBed().configureTestingModule(moduleDef);\n        return TestBed;\n    };\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n    /**\n       * Compile components with a `templateUrl` for the test's NgModule.\n       * It is necessary to call this function\n       * as fetching urls is asynchronous.\n       */\n    TestBed.compileComponents = /**\n       * Compile components with a `templateUrl` for the test's NgModule.\n       * It is necessary to call this function\n       * as fetching urls is asynchronous.\n       */\n    function () { return getTestBed().compileComponents(); };\n    TestBed.overrideModule = function (ngModule, override) {\n        getTestBed().overrideModule(ngModule, override);\n        return TestBed;\n    };\n    TestBed.overrideComponent = function (component, override) {\n        getTestBed().overrideComponent(component, override);\n        return TestBed;\n    };\n    TestBed.overrideDirective = function (directive, override) {\n        getTestBed().overrideDirective(directive, override);\n        return TestBed;\n    };\n    TestBed.overridePipe = function (pipe, override) {\n        getTestBed().overridePipe(pipe, override);\n        return TestBed;\n    };\n    TestBed.overrideTemplate = function (component, template) {\n        getTestBed().overrideComponent(component, { set: { template: template, templateUrl: (null) } });\n        return TestBed;\n    };\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    /**\n       * Overrides the template of the given component, compiling the template\n       * in the context of the TestingModule.\n       *\n       * Note: This works for JIT and AOTed components as well.\n       */\n    TestBed.overrideTemplateUsingTestingModule = /**\n       * Overrides the template of the given component, compiling the template\n       * in the context of the TestingModule.\n       *\n       * Note: This works for JIT and AOTed components as well.\n       */\n    function (component, template) {\n        getTestBed().overrideTemplateUsingTestingModule(component, template);\n        return TestBed;\n    };\n    TestBed.overrideProvider = function (token, provider) {\n        getTestBed().overrideProvider(token, provider);\n        return TestBed;\n    };\n    TestBed.deprecatedOverrideProvider = function (token, provider) {\n        getTestBed().deprecatedOverrideProvider(token, provider);\n        return TestBed;\n    };\n    TestBed.get = function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n        return getTestBed().get(token, notFoundValue);\n    };\n    TestBed.createComponent = function (component) {\n        return getTestBed().createComponent(component);\n    };\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @experimental\n     */\n    /**\n       * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n       * angular module. These are common to every test in the suite.\n       *\n       * This may only be called once, to set up the common providers for the current test\n       * suite on the current platform. If you absolutely need to change the providers,\n       * first use `resetTestEnvironment`.\n       *\n       * Test modules and platforms for individual platforms are available from\n       * '@angular/<platform_name>/testing'.\n       *\n       * @experimental\n       */\n    TestBed.prototype.initTestEnvironment = /**\n       * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n       * angular module. These are common to every test in the suite.\n       *\n       * This may only be called once, to set up the common providers for the current test\n       * suite on the current platform. If you absolutely need to change the providers,\n       * first use `resetTestEnvironment`.\n       *\n       * Test modules and platforms for individual platforms are available from\n       * '@angular/<platform_name>/testing'.\n       *\n       * @experimental\n       */\n    function (ngModule, platform, aotSummaries) {\n        if (this.platform || this.ngModule) {\n            throw new Error('Cannot set base providers because it has already been called');\n        }\n        this.platform = platform;\n        this.ngModule = ngModule;\n        if (aotSummaries) {\n            this._testEnvAotSummaries = aotSummaries;\n        }\n    };\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @experimental\n     */\n    /**\n       * Reset the providers for the test injector.\n       *\n       * @experimental\n       */\n    TestBed.prototype.resetTestEnvironment = /**\n       * Reset the providers for the test injector.\n       *\n       * @experimental\n       */\n    function () {\n        this.resetTestingModule();\n        this.platform = (null);\n        this.ngModule = (null);\n        this._testEnvAotSummaries = function () { return []; };\n    };\n    TestBed.prototype.resetTestingModule = function () {\n        core.ɵclearOverrides();\n        this._aotSummaries = [];\n        this._templateOverrides = [];\n        this._compiler = (null);\n        this._moduleOverrides = [];\n        this._componentOverrides = [];\n        this._directiveOverrides = [];\n        this._pipeOverrides = [];\n        this._isRoot = true;\n        this._rootProviderOverrides = [];\n        this._moduleRef = (null);\n        this._moduleFactory = (null);\n        this._compilerOptions = [];\n        this._providers = [];\n        this._declarations = [];\n        this._imports = [];\n        this._schemas = [];\n        this._instantiated = false;\n        this._activeFixtures.forEach(function (fixture) {\n            try {\n                fixture.destroy();\n            }\n            catch (e) {\n                console.error('Error during cleanup of component', {\n                    component: fixture.componentInstance,\n                    stacktrace: e,\n                });\n            }\n        });\n        this._activeFixtures = [];\n    };\n    TestBed.prototype.configureCompiler = function (config) {\n        this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n        this._compilerOptions.push(config);\n    };\n    TestBed.prototype.configureTestingModule = function (moduleDef) {\n        this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n        if (moduleDef.providers) {\n            (_a = this._providers).push.apply(_a, __spread(moduleDef.providers));\n        }\n        if (moduleDef.declarations) {\n            (_b = this._declarations).push.apply(_b, __spread(moduleDef.declarations));\n        }\n        if (moduleDef.imports) {\n            (_c = this._imports).push.apply(_c, __spread(moduleDef.imports));\n        }\n        if (moduleDef.schemas) {\n            (_d = this._schemas).push.apply(_d, __spread(moduleDef.schemas));\n        }\n        if (moduleDef.aotSummaries) {\n            this._aotSummaries.push(moduleDef.aotSummaries);\n        }\n        var _a, _b, _c, _d;\n    };\n    TestBed.prototype.compileComponents = function () {\n        var _this = this;\n        if (this._moduleFactory || this._instantiated) {\n            return Promise.resolve(null);\n        }\n        var moduleType = this._createCompilerAndModule();\n        return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n            .then(function (moduleAndComponentFactories) {\n            _this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n        });\n    };\n    TestBed.prototype._initIfNeeded = function () {\n        if (this._instantiated) {\n            return;\n        }\n        if (!this._moduleFactory) {\n            try {\n                var moduleType = this._createCompilerAndModule();\n                this._moduleFactory =\n                    this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n            }\n            catch (e) {\n                var errorCompType = this._compiler.getComponentFromError(e);\n                if (errorCompType) {\n                    throw new Error(\"This test module uses the component \" + core.ɵstringify(errorCompType) + \" which is using a \\\"templateUrl\\\" or \\\"styleUrls\\\", but they were never compiled. \" +\n                        \"Please call \\\"TestBed.compileComponents\\\" before your test.\");\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        try {\n            for (var _a = __values(this._templateOverrides), _b = _a.next(); !_b.done; _b = _a.next()) {\n                var _c = _b.value, component = _c.component, templateOf = _c.templateOf;\n                var compFactory = this._compiler.getComponentFactory(templateOf);\n                core.ɵoverrideComponentView(component, compFactory);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var ngZone = new core.NgZone({ enableLongStackTrace: true });\n        var providers = [{ provide: core.NgZone, useValue: ngZone }];\n        var ngZoneInjector = core.Injector.create({\n            providers: providers,\n            parent: this.platform.injector,\n            name: this._moduleFactory.moduleType.name\n        });\n        this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n        // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n        // before accessing it.\n        // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n        // before accessing it.\n        this._moduleRef.injector.get(core.ApplicationInitStatus).runInitializers();\n        this._instantiated = true;\n        var e_1, _d;\n    };\n    TestBed.prototype._createCompilerAndModule = function () {\n        var _this = this;\n        var providers = this._providers.concat([{ provide: TestBed, useValue: this }]);\n        var declarations = __spread(this._declarations, this._templateOverrides.map(function (entry) { return entry.templateOf; }));\n        var rootScopeImports = [];\n        var rootProviderOverrides = this._rootProviderOverrides;\n        if (this._isRoot) {\n            var RootScopeModule = /** @class */ (function () {\n                function RootScopeModule() {\n                }\n                RootScopeModule.decorators = [\n                    { type: core.NgModule, args: [{\n                                providers: __spread(rootProviderOverrides),\n                            },] },\n                ];\n                /** @nocollapse */\n                RootScopeModule.ctorParameters = function () { return []; };\n                return RootScopeModule;\n            }());\n            rootScopeImports.push(RootScopeModule);\n        }\n        providers.push({ provide: core.ɵAPP_ROOT, useValue: this._isRoot });\n        var imports = [rootScopeImports, this.ngModule, this._imports];\n        var schemas = this._schemas;\n        var DynamicTestModule = /** @class */ (function () {\n            function DynamicTestModule() {\n            }\n            DynamicTestModule.decorators = [\n                { type: core.NgModule, args: [{ providers: providers, declarations: declarations, imports: imports, schemas: schemas },] },\n            ];\n            /** @nocollapse */\n            DynamicTestModule.ctorParameters = function () { return []; };\n            return DynamicTestModule;\n        }());\n        var compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n        this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n        try {\n            for (var _a = __values(__spread([this._testEnvAotSummaries], this._aotSummaries)), _b = _a.next(); !_b.done; _b = _a.next()) {\n                var summary = _b.value;\n                this._compiler.loadAotSummaries(summary);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        this._moduleOverrides.forEach(function (entry) { return _this._compiler.overrideModule(entry[0], entry[1]); });\n        this._componentOverrides.forEach(function (entry) { return _this._compiler.overrideComponent(entry[0], entry[1]); });\n        this._directiveOverrides.forEach(function (entry) { return _this._compiler.overrideDirective(entry[0], entry[1]); });\n        this._pipeOverrides.forEach(function (entry) { return _this._compiler.overridePipe(entry[0], entry[1]); });\n        return DynamicTestModule;\n        var e_2, _c;\n    };\n    TestBed.prototype._assertNotInstantiated = function (methodName, methodDescription) {\n        if (this._instantiated) {\n            throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n        }\n    };\n    TestBed.prototype.get = function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n        this._initIfNeeded();\n        if (token === TestBed) {\n            return this;\n        }\n        // Tests can inject things from the ng module and from the compiler,\n        // but the ng module can't inject things from the compiler and vice versa.\n        var result = this._moduleRef.injector.get(token, UNDEFINED);\n        return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n    };\n    TestBed.prototype.execute = function (tokens, fn, context) {\n        var _this = this;\n        this._initIfNeeded();\n        var params = tokens.map(function (t) { return _this.get(t); });\n        return fn.apply(context, params);\n    };\n    TestBed.prototype.overrideModule = function (ngModule, override) {\n        this._assertNotInstantiated('overrideModule', 'override module metadata');\n        this._moduleOverrides.push([ngModule, override]);\n    };\n    TestBed.prototype.overrideComponent = function (component, override) {\n        this._assertNotInstantiated('overrideComponent', 'override component metadata');\n        this._componentOverrides.push([component, override]);\n    };\n    TestBed.prototype.overrideDirective = function (directive, override) {\n        this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n        this._directiveOverrides.push([directive, override]);\n    };\n    TestBed.prototype.overridePipe = function (pipe, override) {\n        this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n        this._pipeOverrides.push([pipe, override]);\n    };\n    TestBed.prototype.overrideProvider = function (token, provider) {\n        this.overrideProviderImpl(token, provider);\n    };\n    TestBed.prototype.deprecatedOverrideProvider = function (token, provider) {\n        this.overrideProviderImpl(token, provider, /* deprecated */ /* deprecated */ true);\n    };\n    TestBed.prototype.overrideProviderImpl = function (token, provider, deprecated) {\n        if (deprecated === void 0) { deprecated = false; }\n        if (typeof token !== 'string' && token.ngInjectableDef &&\n            token.ngInjectableDef.providedIn === 'root') {\n            if (provider.useFactory) {\n                this._rootProviderOverrides.push({ provide: token, useFactory: provider.useFactory, deps: provider.deps || [] });\n            }\n            else {\n                this._rootProviderOverrides.push({ provide: token, useValue: provider.useValue });\n            }\n        }\n        var flags = 0;\n        var value;\n        if (provider.useFactory) {\n            flags |= 1024 /* TypeFactoryProvider */;\n            value = provider.useFactory;\n        }\n        else {\n            flags |= 256 /* TypeValueProvider */;\n            value = provider.useValue;\n        }\n        var deps = (provider.deps || []).map(function (dep) {\n            var depFlags = 0;\n            var depToken;\n            if (Array.isArray(dep)) {\n                dep.forEach(function (entry) {\n                    if (entry instanceof core.Optional) {\n                        depFlags |= 2 /* Optional */;\n                    }\n                    else if (entry instanceof core.SkipSelf) {\n                        depFlags |= 1 /* SkipSelf */;\n                    }\n                    else {\n                        depToken = entry;\n                    }\n                });\n            }\n            else {\n                depToken = dep;\n            }\n            return [depFlags, depToken];\n        });\n        core.ɵoverrideProvider({ token: token, flags: flags, deps: deps, value: value, deprecatedBehavior: deprecated });\n    };\n    TestBed.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n        this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n        var OverrideComponent = /** @class */ (function () {\n            function OverrideComponent() {\n            }\n            OverrideComponent.decorators = [\n                { type: core.Component, args: [{ selector: 'empty', template: template },] },\n            ];\n            /** @nocollapse */\n            OverrideComponent.ctorParameters = function () { return []; };\n            return OverrideComponent;\n        }());\n        this._templateOverrides.push({ component: component, templateOf: OverrideComponent });\n    };\n    TestBed.prototype.createComponent = function (component) {\n        var _this = this;\n        this._initIfNeeded();\n        var componentFactory = this._compiler.getComponentFactory(component);\n        if (!componentFactory) {\n            throw new Error(\"Cannot create the component \" + core.ɵstringify(component) + \" as it was not imported into the testing module!\");\n        }\n        var noNgZone = this.get(ComponentFixtureNoNgZone, false);\n        var autoDetect = this.get(ComponentFixtureAutoDetect, false);\n        var ngZone = noNgZone ? null : this.get(core.NgZone, null);\n        var testComponentRenderer = this.get(TestComponentRenderer);\n        var rootElId = \"root\" + _nextRootElementId++;\n        testComponentRenderer.insertRootElement(rootElId);\n        var initComponent = function () {\n            var componentRef = componentFactory.create(core.Injector.NULL, [], \"#\" + rootElId, _this._moduleRef);\n            return new ComponentFixture(componentRef, ngZone, autoDetect);\n        };\n        var fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n        this._activeFixtures.push(fixture);\n        return fixture;\n    };\n    return TestBed;\n}());\nvar _testBed = (null);\n/**\n * @experimental\n */\nfunction getTestBed() {\n    return _testBed = _testBed || new TestBed();\n}\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n *\n */\nfunction inject(tokens, fn) {\n    var testBed = getTestBed();\n    if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var _this = this;\n            // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n            // the injected tokens.\n            return testBed.compileComponents().then(function () {\n                var completer = testBed.get(AsyncTestCompleter);\n                testBed.execute(tokens, fn, _this);\n                return completer.promise;\n            });\n        };\n    }\n    else {\n        // Not using an arrow function to preserve context passed from call site\n        return function () { return testBed.execute(tokens, fn, this); };\n    }\n}\n/**\n * @experimental\n */\nvar InjectSetupWrapper = /** @class */ (function () {\n    function InjectSetupWrapper(_moduleDef) {\n        this._moduleDef = _moduleDef;\n    }\n    InjectSetupWrapper.prototype._addModule = function () {\n        var moduleDef = this._moduleDef();\n        if (moduleDef) {\n            getTestBed().configureTestingModule(moduleDef);\n        }\n    };\n    InjectSetupWrapper.prototype.inject = function (tokens, fn) {\n        var self = this;\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            self._addModule();\n            return inject(tokens, fn).call(this);\n        };\n    };\n    return InjectSetupWrapper;\n}());\nfunction withModule(moduleDef, fn) {\n    if (fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var testBed = getTestBed();\n            if (moduleDef) {\n                testBed.configureTestingModule(moduleDef);\n            }\n            return fn.apply(this);\n        };\n    }\n    return new InjectSetupWrapper(function () { return moduleDef; });\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _global$1 = (typeof window === 'undefined' ? global : window);\n// Reset the test providers and the fake async zone before each test.\nif (_global$1.beforeEach) {\n    _global$1.beforeEach(function () {\n        TestBed.resetTestingModule();\n        resetFakeAsyncZone();\n    });\n}\n// TODO(juliemr): remove this, only used because we need to export something to have compilation\n// work.\nvar __core_private_testing_placeholder__ = '';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n* Wraps a function in a new function which sets up document and HTML for running a test.\n*\n* This function is intended to wrap an existing testing function. The wrapper\n* adds HTML to the `body` element of the `document` and subsequently tears it down.\n*\n* This function is intended to be used with `async await` and `Promise`s. If the wrapped\n* function returns a promise (or is `async`) then the teardown is delayed until that `Promise`\n* is resolved.\n*\n* On `node` this function detects if `document` is present and if not it will create one by\n* loading `domino` and installing it.\n*\n* Example:\n*\n* ```\n* describe('something', () => {\n*   it('should do something', withBody('<my-app></my-app>', async () => {\n*     const myApp = renderComponent(MyApp);\n*     await whenRendered(myApp);\n*     expect(getRenderedText(myApp)).toEqual('Hello World!');\n*   }));\n* });\n* ```\n*\n* @param html HTML which should be inserted into `body` of the `document`.\n* @param blockFn function to wrap. The function can return promise or be `async`.\n* @experimental\n*/\nfunction withBody(html, blockFn) {\n    return function (done) {\n        ensureDocument();\n        if (typeof blockFn === 'function') {\n            document.body.innerHTML = html;\n            // TODO(i): I'm not sure why a cast is required here but otherwise I get\n            //   TS2349: Cannot invoke an expression whose type lacks a call signature. Type 'never' has\n            //   no compatible call signatures.\n            var blockReturn = blockFn();\n            if (blockReturn instanceof Promise) {\n                blockReturn = blockReturn.then(done, done.fail);\n            }\n            else {\n                done();\n            }\n        }\n    };\n}\nvar savedDocument = undefined;\nvar savedRequestAnimationFrame = undefined;\nvar savedNode = undefined;\nvar requestAnimationFrameCount = 0;\nvar ɵ0 = function (domino) {\n    if (typeof global == 'object' && global.process && typeof require == 'function') {\n        try {\n            return require(domino);\n        }\n        catch (e) {\n            // It is possible that we don't have domino available in which case just give up.\n        }\n    }\n    // Seems like we don't have domino, give up.\n    return null;\n};\n/**\n * System.js uses regexp to look for `require` statements. `domino` has to be\n * extracted into a constant so that the regexp in the System.js does not match\n * and does not try to load domino in the browser.\n */\nvar domino = (ɵ0)('domino');\n/**\n * Ensure that global has `Document` if we are in node.js\n * @experimental\n */\nfunction ensureDocument() {\n    if (domino) {\n        // we are in node.js.\n        var window_1 = domino.createWindow('', 'http://localhost');\n        savedDocument = global.document;\n        global.window = window_1;\n        global.document = window_1.document;\n        // Trick to avoid Event patching from\n        // https://github.com/angular/angular/blob/7cf5e95ac9f0f2648beebf0d5bd9056b79946970/packages/platform-browser/src/dom/events/dom_events.ts#L112-L132\n        // It fails with Domino with TypeError: Cannot assign to read only property\n        // 'stopImmediatePropagation' of object '#<Event>'\n        // Trick to avoid Event patching from\n        // https://github.com/angular/angular/blob/7cf5e95ac9f0f2648beebf0d5bd9056b79946970/packages/platform-browser/src/dom/events/dom_events.ts#L112-L132\n        // It fails with Domino with TypeError: Cannot assign to read only property\n        // 'stopImmediatePropagation' of object '#<Event>'\n        global.Event = null;\n        savedNode = global.Node;\n        global.Node = domino.impl.Node;\n        savedRequestAnimationFrame = global.requestAnimationFrame;\n        global.requestAnimationFrame = function (cb) {\n            setImmediate(cb);\n            return requestAnimationFrameCount++;\n        };\n    }\n}\n/**\n * Restore the state of `Document` between tests.\n * @experimental\n */\nfunction cleanupDocument() {\n    if (savedDocument) {\n        global.document = savedDocument;\n        global.window = undefined;\n        savedDocument = undefined;\n    }\n    if (savedNode) {\n        global.Node = savedNode;\n        savedNode = undefined;\n    }\n    if (savedRequestAnimationFrame) {\n        global.requestAnimationFrame = savedRequestAnimationFrame;\n        savedRequestAnimationFrame = undefined;\n    }\n}\nif (typeof beforeEach == 'function')\n    beforeEach(ensureDocument);\nif (typeof afterEach == 'function')\n    beforeEach(cleanupDocument);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.async = async;\nexports.ComponentFixture = ComponentFixture;\nexports.resetFakeAsyncZone = resetFakeAsyncZone;\nexports.fakeAsync = fakeAsync;\nexports.tick = tick;\nexports.flush = flush;\nexports.discardPeriodicTasks = discardPeriodicTasks;\nexports.flushMicrotasks = flushMicrotasks;\nexports.TestComponentRenderer = TestComponentRenderer;\nexports.ComponentFixtureAutoDetect = ComponentFixtureAutoDetect;\nexports.ComponentFixtureNoNgZone = ComponentFixtureNoNgZone;\nexports.TestBed = TestBed;\nexports.getTestBed = getTestBed;\nexports.inject = inject;\nexports.InjectSetupWrapper = InjectSetupWrapper;\nexports.withModule = withModule;\nexports.__core_private_testing_placeholder__ = __core_private_testing_placeholder__;\nexports.ɵTestingCompiler = TestingCompiler;\nexports.ɵTestingCompilerFactory = TestingCompilerFactory;\nexports.withBody = withBody;\nexports.ensureDocument = ensureDocument;\nexports.cleanupDocument = cleanupDocument;\nexports.ɵ0 = ɵ0;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=core-testing.umd.js.map\n"]}