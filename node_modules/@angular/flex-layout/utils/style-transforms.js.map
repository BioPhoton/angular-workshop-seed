{"version":3,"sources":["../../../../src/lib/utils/style-transforms.ts"],"names":[],"mappings":"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","file":"style-transforms.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport type NgStyleRawList = string[];\nexport type NgStyleMap = {[klass: string]: string};\n// NgStyle selectors accept NgStyleType values\nexport type NgStyleType = string | Set<string> | NgStyleRawList | NgStyleMap;\n\n/**\n * Callback function for SecurityContext.STYLE sanitization\n */\nexport type NgStyleSanitizer = (val: any) => string;\n\n/**\n * NgStyle allowed inputs\n */\nexport class NgStyleKeyValue {\n  constructor(public key: string, public value: string, noQuotes = true) {\n    this.key = noQuotes ? key.replace(/['\"]/g, \"\").trim() : key.trim();\n\n    this.value = noQuotes ? value.replace(/['\"]/g, \"\").trim() : value.trim();\n    this.value = this.value.replace(/;/, \"\");\n  }\n}\n\n/**\n * Transform Operators for @angular/flex-layout NgStyle Directive\n */\nexport const ngStyleUtils = {\n  getType,\n  buildRawList,\n  buildMapFromList,\n  buildMapFromSet\n};\n\nfunction getType(target: any): string {\n  let what = typeof target;\n  if (what === 'object') {\n    return (target.constructor === Array) ? 'array' :\n        (target.constructor === Set ) ? 'set' : 'object';\n  }\n  return what;\n}\n\n/**\n * Split string of key:value pairs into Array of k-v pairs\n * e.g.  'key:value; key:value; key:value;' -> ['key:value',...]\n */\nfunction buildRawList(source: any, delimiter = \";\"): NgStyleRawList {\n  return String(source)\n      .trim()\n      .split(delimiter)\n      .map((val: string) => val.trim())\n      .filter(val => val !== \"\");\n}\n\n/**\n * Convert array of key:value strings to a iterable map object\n */\nfunction buildMapFromList(styles: NgStyleRawList, sanitize?: NgStyleSanitizer): NgStyleMap {\n  let sanitizeValue = (it: NgStyleKeyValue) => {\n    if (sanitize) {\n      it.value = sanitize(it.value);\n    }\n    return it;\n  };\n\n  return styles\n      .map(stringToKeyValue)\n      .filter(entry => !!entry)\n      .map(sanitizeValue)\n      .reduce(keyValuesToMap, {});\n};\n\n/**\n * Convert Set<string> or raw Object to an iterable NgStyleMap\n */\nfunction buildMapFromSet(source: any, sanitize?: NgStyleSanitizer): NgStyleMap {\n  let list = new Array<string>();\n  if (getType(source) == 'set') {\n    source.forEach(entry => list.push(entry));\n  } else {                                // simple hashmap\n    Object.keys(source).forEach(key => {\n      list.push(`${key}:${source[key]}`);\n    });\n  }\n  return buildMapFromList(list, sanitize);\n}\n\n\n/**\n * Convert \"key:value\" -> [key, value]\n */\nfunction stringToKeyValue(it: string): NgStyleKeyValue {\n  let [key, val] = it.split(\":\");\n  return val ? new NgStyleKeyValue(key, val) : null;\n};\n\n/**\n * Convert [ [key,value] ] -> { key : value }\n */\nfunction keyValuesToMap(map: NgStyleMap, entry: NgStyleKeyValue): NgStyleMap {\n  if (!!entry.key) {\n    map[entry.key] = entry.value;\n  }\n  return map;\n}\n"]}