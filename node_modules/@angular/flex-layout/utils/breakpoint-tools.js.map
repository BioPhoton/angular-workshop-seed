{"version":3,"sources":["../../../../src/lib/utils/breakpoint-tools.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAC,YAAY,EAAC,MAAM,iBAAiB,CAAC;AAE7C,IAAM,gBAAgB,GAAG,WAAW,CAAC;AACrC,wBAAwB,IAAY;IAClC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IAClD,IAAI,SAAS,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IACvD,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,GAAG,SAAS,CAAC;AACzC,CAAC;AAED;;;GAGG;AACH,mBAAmB,IAAY;IAC7B,MAAM,CAAC,IAAI;SACN,OAAO,CAAC,gBAAgB,EAAE,GAAG,CAAC;SAC9B,KAAK,CAAC,GAAG,CAAC;SACV,GAAG,CAAC,cAAc,CAAC;SACnB,IAAI,CAAC,EAAE,CAAC,CAAC;AAChB,CAAC;AAED;;;GAGG;AACH,MAAM,2BAA2B,IAAkB;IACjD,IAAI,CAAC,OAAO,CAAC,UAAC,EAAc;QAC1B,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,MAAM,KAAK,EAAE,CAAC,CAAC,CAAC;YACnC,EAAE,CAAC,MAAM,GAAG,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAU,qCAAqC;YAC/E,EAAE,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,IAAI,KAAK,CAAC,CAAC,uBAAuB;QACnE,CAAC;IACH,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,IAAI,CAAC;AACd,CAAC;AAED;;;;GAIG;AACH,MAAM,uBAAuB,QAAsB,EAAE,MAAyB;IAAzB,uBAAA,EAAA,WAAyB;IAC5E,IAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAC,EAAE,IAAK,OAAA,YAAY,CAAC,EAAE,EAAE,EAAE,CAAC,EAApB,CAAoB,CAAC,CAAC;IAC1D,IAAM,WAAW,GAAG,UAAC,KAAK,IAAK,OAAA,MAAM,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,EAAE;QACtD,MAAM,CAAC,MAAM,IAAI,CAAC,CAAE,EAAE,CAAC,KAAK,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IACvD,CAAC,EAAE,IAAI,CAAC,EAFuB,CAEvB,CAAC;IAET,2BAA2B;IAC3B,MAAM,CAAC,OAAO,CAAC,UAAC,EAAc;QAC5B,IAAI,MAAM,GAAG,WAAW,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;QACnC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,YAAY,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC3B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAClB,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;AAClC,CAAC","file":"breakpoint-tools.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n import {BreakPoint} from '../media-query/breakpoints/break-point';\nimport {extendObject} from './object-extend';\n\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part: string) {\n  let first = part.length > 0 ? part.charAt(0) : \"\";\n  let remainder = (part.length > 1) ? part.slice(1) : \"\";\n  return first.toUpperCase() + remainder;\n}\n\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name: string): string {\n  return name\n      .replace(ALIAS_DELIMITERS, \"|\")\n      .split(\"|\")\n      .map(firstUpperCase)\n      .join(\"\");\n}\n\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nexport function validateSuffixes(list: BreakPoint[]): BreakPoint[] {\n  list.forEach((bp: BreakPoint) => {\n    if (!bp.suffix || bp.suffix === \"\") {\n      bp.suffix = camelCase(bp.alias);          // create Suffix value based on alias\n      bp.overlapping = bp.overlapping || false; // ensure default value\n    }\n  });\n  return list;\n}\n\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nexport function mergeByAlias(defaults: BreakPoint[], custom: BreakPoint[] = []): BreakPoint[] {\n  const merged = defaults.map((bp) => extendObject({}, bp));\n  const findByAlias = (alias) => merged.reduce((result, bp) => {\n    return result || (( bp.alias === alias) ? bp : null);\n  }, null);\n\n  // Merge custom breakpoints\n  custom.forEach((bp: BreakPoint) => {\n    let target = findByAlias(bp.alias);\n    if (target) {\n      extendObject(target, bp);\n    } else {\n      merged.push(bp);\n    }\n  });\n\n  return validateSuffixes(merged);\n}\n\n"]}