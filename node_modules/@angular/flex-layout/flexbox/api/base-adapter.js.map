{"version":3,"sources":["../../../../../src/lib/flexbox/api/base-adapter.ts"],"names":[],"mappings":"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","file":"base-adapter.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, Renderer2} from '@angular/core';\n\nimport {BaseFxDirective} from './base';\nimport {ResponsiveActivation} from './../responsive/responsive-activation';\nimport {MediaQuerySubscriber} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\n\n/**\n * Adapter to the BaseFxDirective abstract class so it can be used via composition.\n * @see BaseFxDirective\n */\nexport class BaseFxDirectiveAdapter extends BaseFxDirective {\n\n  /**\n   * Accessor to determine which @Input property is \"active\"\n   * e.g. which property value will be used.\n   */\n  get activeKey() {\n    let mqa = this._mqActivation;\n    let key = mqa ? mqa.activatedInputKey : this._baseKey;\n    // Note: ClassDirective::SimpleChanges uses 'klazz' instead of 'class' as a key\n    return (key === 'class') ? 'klazz' : key;\n  }\n\n  /** Hash map of all @Input keys/values defined/used */\n  get inputMap() {\n    return this._inputMap;\n  }\n\n  /**\n   * @see BaseFxDirective._mqActivation\n   */\n  get mqActivation(): ResponsiveActivation {\n    return this._mqActivation;\n  }\n\n  /**\n   * BaseFxDirectiveAdapter constructor\n   */\n  constructor(protected _baseKey: string,   // non-responsive @Input property name\n              protected _mediaMonitor: MediaMonitor,\n              protected _elementRef: ElementRef,\n              protected _renderer: Renderer2 ) {\n    super(_mediaMonitor, _elementRef, _renderer);\n  }\n\n\n  /**\n   * @see BaseFxDirective._queryInput\n   */\n  queryInput(key) {\n    return key ? this._queryInput(key) : undefined;\n  }\n\n  /**\n   *  Save the property value.\n   */\n  cacheInput(key?: string, source?: any, cacheRaw = false) {\n    if (cacheRaw) {\n      this._cacheInputRaw(key, source);\n    } else if (Array.isArray(source)) {\n      this._cacheInputArray(key, source);\n    } else if (typeof source === 'object') {\n      this._cacheInputObject(key, source);\n    } else if (typeof source === 'string') {\n      this._cacheInputString(key, source);\n    } else {\n      throw new Error('Invalid class value provided. Did you want to cache the raw value?');\n    }\n  }\n\n  /**\n   * @see BaseFxDirective._listenForMediaQueryChanges\n   */\n  listenForMediaQueryChanges(key: string,\n                             defaultValue: any,\n                             onMediaQueryChange: MediaQuerySubscriber): ResponsiveActivation {\n    return this._listenForMediaQueryChanges(key, defaultValue, onMediaQueryChange);\n  }\n\n  // ************************************************************\n  // Protected Methods\n  // ************************************************************\n\n  /**\n   * No implicit transforms of the source.\n   * Required when caching values expected later for KeyValueDiffers\n   */\n  protected _cacheInputRaw(key?: string, source?: any) {\n    this._inputMap[key] = source;\n  }\n\n  /**\n   *  Save the property value for Array values.\n   */\n  protected _cacheInputArray(key?: string, source?: boolean[]) {\n    this._inputMap[key] = source.join(' ');\n  }\n\n  /**\n   *  Save the property value for key/value pair values.\n   */\n  protected _cacheInputObject(key?: string, source?: {[key: string]: boolean}) {\n    let classes = [];\n    for (let prop in source) {\n      if (!!source[prop]) {\n        classes.push(prop);\n      }\n    }\n    this._inputMap[key] = classes.join(' ');\n  }\n\n  /**\n   *  Save the property value for string values.\n   */\n  protected _cacheInputString(key?: string, source?: string) {\n    this._inputMap[key] = source;\n  }\n}\n"]}