{"version":3,"sources":["../../../../../src/lib/media-query/breakpoints/break-points-provider.ts"],"names":[],"mappings":"AAYA,OAAO,EAAC,WAAW,EAAC,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAC,mBAAmB,EAAC,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAC,uBAAuB,EAAC,MAAM,iCAAiC,CAAC;AAExE,OAAO,EAAC,YAAY,EAAC,MAAM,2BAA2B,CAAC;AACvD,OAAO,EAAC,YAAY,EAAE,gBAAgB,EAAC,MAAM,8BAA8B,CAAC;AAoB5E;;GAEG;AACH,MAAM,iCAAiC,OAAsB,EACtB,OAAmC;IACxE,OAAO,GAAG,YAAY,CAAC,EAAG,EAAE;QACtB,QAAQ,EAAE,IAAI;QACd,WAAW,EAAE,KAAK,CAAM,4DAA4D;KACzF,EAAE,OAAO,IAAI,EAAG,CAAC,CAAC;IAEnB,MAAM,CAAC;QACL,oFAAoF;QACpF,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,GAAG,uBAAuB,CAAC,MAAM,CAAC,mBAAmB,CAAC;YACrF,mBAAmB,CAAC;QAExB,MAAM,CAAC,OAAO,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,EAAE,OAAO,IAAI,EAAE,CAAC,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;IAC1F,CAAC,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM;IACJ,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC;AAC/C,CAAC;AACD;;;;;;;;GAQG;AACH,MAAM,CAAC,IAAM,4BAA4B,GAAG;IAC1C,OAAO,EAAE,WAAW;IACpB,UAAU,EAAE,oCAAoC;CACjD,CAAC;AACF;;GAEG;AACH,MAAM,8CAA8C,OAAsB,EACtB,OAAmC;IACrF,MAAM,CAAC;QACL,OAAO,EAAE,WAAW;QACpB,UAAU,EAAE,sBAAsB,CAAC,OAAO,EAAE,OAAO,CAAC;KACrD,CAAC;AACJ,CAAC","file":"break-points-provider.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  InjectionToken,    // tslint:disable-line:no-unused-variable\n} from '@angular/core';\n\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINTS} from './break-points-token';\nimport {DEFAULT_BREAKPOINTS} from './data/break-points';\nimport {ORIENTATION_BREAKPOINTS} from './data/orientation-break-points';\n\nimport {extendObject} from '../../utils/object-extend';\nimport {mergeByAlias, validateSuffixes} from '../../utils/breakpoint-tools';\n\n\n/**\n * Options to identify which breakpoint types to include as part of\n * a BreakPoint provider\n */\nexport interface BreakPointProviderOptions {\n  /**\n   * include pre-configured, internal default breakpoints.\n   * @default 'true'\n   */\n  defaults ?: boolean;\n  /**\n   * include pre-configured, internal orientations breakpoints.\n   * @default 'false'\n   */\n  orientations ?: boolean;\n}\n\n/**\n * Add new custom items to the default list or override existing default with custom overrides\n */\nexport function buildMergedBreakPoints(_custom?: BreakPoint[],\n                                       options?: BreakPointProviderOptions) {\n  options = extendObject({ }, {\n        defaults: true,       // exclude pre-configured, internal default breakpoints\n        orientation: false      // exclude pre-configured, internal orientations breakpoints\n  }, options || { });\n\n  return () => {\n    // Order so the defaults are loaded last; so ObservableMedia will report these last!\n    let defaults = options.orientations ? ORIENTATION_BREAKPOINTS.concat(DEFAULT_BREAKPOINTS) :\n        DEFAULT_BREAKPOINTS;\n\n    return options.defaults ? mergeByAlias(defaults, _custom || []) : mergeByAlias(_custom);\n  };\n}\n\n/**\n *  Ensure that only a single global BreakPoint list is instantiated...\n */\nexport function DEFAULT_BREAKPOINTS_PROVIDER_FACTORY() {\n  return validateSuffixes(DEFAULT_BREAKPOINTS);\n}\n/**\n * Default Provider that does not support external customization nor provide\n * the extra extended breakpoints:   \"handset\", \"tablet\", and \"web\"\n *\n *  NOTE: !! breakpoints are considered to have unique 'alias' properties,\n *        custom breakpoints matching existing breakpoints will override the properties\n *        of the existing (and not be added as an extra breakpoint entry).\n *        [xs, gt-xs, sm, gt-sm, md, gt-md, lg, gt-lg, xl]\n */\nexport const DEFAULT_BREAKPOINTS_PROVIDER = { // tslint:disable-line:variable-name\n  provide: BREAKPOINTS,\n  useFactory: DEFAULT_BREAKPOINTS_PROVIDER_FACTORY\n};\n/**\n * Use with FlexLayoutModule.CUSTOM_BREAKPOINTS_PROVIDER_FACTORY!\n */\nexport function CUSTOM_BREAKPOINTS_PROVIDER_FACTORY(_custom?: BreakPoint[],\n                                                    options?: BreakPointProviderOptions) {\n  return {\n    provide: BREAKPOINTS,\n    useFactory: buildMergedBreakPoints(_custom, options)\n  };\n}\n"]}