{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/core/line/line.ts","../../src/lib/core/style/focus-origin-monitor.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/select/select.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/index.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/table/index.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/index.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/index.ts","../../src/lib/module.ts","../../src/lib/index.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/autocomplete/index.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/expansion/accordion.ts","../../src/lib/datepicker/index.ts","../../src/lib/expansion/accordion-item.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tooltip/index.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/menu/index.ts","../../src/lib/dialog/dialog-injector.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/index.ts","../../src/lib/core/a11y/activedescendant-key-manager.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/index.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/index.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/index.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/index.ts","../../src/lib/input/input-container-errors.ts","../../src/lib/input/input-container.ts","../../src/lib/input/autosize.ts","../../src/lib/input/index.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/index.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/index.ts","../../src/lib/card/card.ts","../../src/lib/card/index.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/index.ts","../../src/lib/slider/slider.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/slider/index.ts","../../src/lib/sidenav/index.ts","../../src/lib/list/list.ts","../../src/lib/list/index.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/index.ts","../../src/lib/core/a11y/focus-key-manager.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-errors.ts","../../src/lib/select/index.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/index.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/index.ts","../../src/lib/button/button.ts","../../src/lib/button/index.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/index.ts","../../src/lib/core/overlay/overlay-ref.ts","../../src/lib/core/overlay/position/connected-position.ts","../../src/lib/core/overlay/position/connected-position-strategy.ts","../../src/lib/core/overlay/position/global-position-strategy.ts","../../src/lib/core/overlay/position/overlay-position-builder.ts","../../src/lib/core/overlay/overlay-container.ts","../../src/lib/core/overlay/overlay.ts","../../src/lib/core/overlay/overlay-directives.ts","../../src/lib/core/overlay/fullscreen-overlay-container.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/overlay/index.ts","../../src/lib/core/selection/selection.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/core/style/index.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/core.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/placeholder/placeholder-options.ts","../../src/lib/core/error/error-options.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/overlay/scroll/scroll-dispatcher.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/overlay/scroll/reposition-scroll-strategy.ts","../../src/lib/core/overlay/scroll/scroll-strategy-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/icon/index.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/overlay/position/viewport-ruler.ts","../../src/lib/core/overlay/scroll/scrollable.ts","../../src/lib/core/overlay/scroll/close-scroll-strategy.ts","../../src/lib/core/overlay/scroll/scroll-strategy.ts","../../src/lib/core/overlay/scroll/noop-scroll-strategy.ts","../../src/lib/core/overlay/scroll/block-scroll-strategy.ts","../../src/lib/core/overlay/scroll/index.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/overlay/overlay-state.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line], [mdLine], [matLine]',\n  host: {'class': 'mat-line'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdLine, MdCommonModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  SkipSelf,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Platform} from '../platform/platform';\nimport {of as observableOf} from 'rxjs/observable/of';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const /** @type {?} */ TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n\ntype MonitoredElementInfo = {\n  unlisten: Function,\n  checkChildren: boolean,\n  renderer: Renderer2,\n  subject: Subject<FocusOrigin>\n};\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nexport class FocusOriginMonitor {\n/**\n * The focus origin that the next focus event is a result of.\n */\nprivate _origin: FocusOrigin = null;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n */\nprivate _lastFocusOrigin: FocusOrigin;\n/**\n * Whether the window has just been focused.\n */\nprivate _windowFocused = false;\n/**\n * The target of the last touch event.\n */\nprivate _lastTouchTarget: EventTarget | null;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n */\nprivate _touchTimeout: number;\n/**\n * Weak map of elements being monitored to their info.\n */\nprivate _elementInfo = new WeakMap<Element, MonitoredElementInfo>();\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) {\n    this._ngZone.runOutsideAngular(() => this._registerDocumentEvents());\n  }\n/**\n * Monitors focus on an element and applies appropriate CSS classes.\n * @param {?} element The element to monitor\n * @param {?} renderer The renderer to use to apply CSS classes to the element.\n * @param {?} checkChildren Whether to count the element as focused when its children are focused.\n * @return {?} An observable that emits when the focus state of the element changes.\n *     When the element is blurred, null will be emitted.\n */\nmonitor(\n      element: HTMLElement,\n      renderer: Renderer2,\n      checkChildren: boolean): Observable<FocusOrigin> {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return observableOf(null);\n    }\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(element)) {\n      let /** @type {?} */ info = this._elementInfo.get(element); /** @type {?} */((\n      info)).checkChildren = checkChildren;\n      return /** @type {?} */(( info)).subject.asObservable();\n    }\n\n    // Create monitored element info.\n    let /** @type {?} */ info: MonitoredElementInfo = {\n      unlisten: () => {},\n      checkChildren: checkChildren,\n      renderer: renderer,\n      subject: new Subject<FocusOrigin>()\n    };\n    this._elementInfo.set(element, info);\n\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    let /** @type {?} */ focusListener = (event: FocusEvent) => this._onFocus(event, element);\n    let /** @type {?} */ blurListener = (event: FocusEvent) => this._onBlur(event, element);\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('focus', focusListener, true);\n      element.addEventListener('blur', blurListener, true);\n    });\n\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      element.removeEventListener('focus', focusListener, true);\n      element.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n/**\n * Stops monitoring an element and removes all focus classes.\n * @param {?} element The element to stop monitoring.\n * @return {?}\n */\nstopMonitoring(element: HTMLElement): void {\n    let /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(element);\n      this._elementInfo.delete(element);\n    }\n  }\n/**\n * Focuses the element via the specified focus origin.\n * @param {?} element The element to focus.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nfocusVia(element: HTMLElement, origin: FocusOrigin): void {\n    this._setOriginForCurrentEventQueue(origin);\n    element.focus();\n  }\n/**\n * Register necessary event listeners on the document and window.\n * @return {?}\n */\nprivate _registerDocumentEvents() {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n\n    // On keydown record the origin and clear any touch event that may be in progress.\n    document.addEventListener('keydown', () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    }, true);\n\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\n    // happen as a result of a touch event.\n    document.addEventListener('mousedown', () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    }, true);\n\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n    // see if a focus happens.\n    document.addEventListener('touchstart', (event: Event) => {\n      if (this._touchTimeout != null) {\n        clearTimeout(this._touchTimeout);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeout = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    }, true);\n\n    // Make a note of when the window regains focus, so we can restore the origin info for the\n    // focused element.\n    window.addEventListener('focus', () => {\n      this._windowFocused = true;\n      setTimeout(() => this._windowFocused = false, 0);\n    });\n  }\n/**\n * Sets the focus classes on the element based on the given focus origin.\n * @param {?} element The element to update the classes on.\n * @param {?=} origin The focus origin.\n * @return {?}\n */\nprivate _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      const /** @type {?} */ toggleClass = (className: string, shouldSet: boolean) => {\n        shouldSet ? elementInfo.renderer.addClass(element, className) :\n                    elementInfo.renderer.removeClass(element, className);\n      };\n\n      toggleClass('cdk-focused', !!origin);\n      toggleClass('cdk-touch-focused', origin === 'touch');\n      toggleClass('cdk-keyboard-focused', origin === 'keyboard');\n      toggleClass('cdk-mouse-focused', origin === 'mouse');\n      toggleClass('cdk-program-focused', origin === 'program');\n    }\n  }\n/**\n * Sets the origin and schedules an async function to clear it at the end of the event queue.\n * @param {?} origin The origin to set.\n * @return {?}\n */\nprivate _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._origin = origin;\n    setTimeout(() => this._origin = null, 0);\n  }\n/**\n * Checks whether the given focus event was caused by a touchstart event.\n * @param {?} event The focus event to check.\n * @return {?} Whether the event was caused by a touch.\n */\nprivate _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, renderer,  'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    let /** @type {?} */ focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n/**\n * Handles focus events on a registered element.\n * @param {?} event The focus event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n      return;\n    }\n\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (!this._origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        this._origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        this._origin = 'touch';\n      } else {\n        this._origin = 'program';\n      }\n    }\n\n    this._setClasses(element, this._origin);\n    elementInfo.subject.next(this._origin);\n    this._lastFocusOrigin = this._origin;\n    this._origin = null;\n  }\n/**\n * Handles blur events on a registered element.\n * @param {?} event The blur event.\n * @param {?} element The monitored element.\n * @return {?}\n */\n_onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget))) {\n      return;\n    }\n\n    this._setClasses(element);\n    elementInfo.subject.next(null);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction FocusOriginMonitor_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusOriginMonitor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusOriginMonitor.ctorParameters;\n/**\n * The focus origin that the next focus event is a result of.\n * @type {?}\n */\nFocusOriginMonitor.prototype._origin;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastFocusOrigin;\n/**\n * Whether the window has just been focused.\n * @type {?}\n */\nFocusOriginMonitor.prototype._windowFocused;\n/**\n * The target of the last touch event.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastTouchTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n * @type {?}\n */\nFocusOriginMonitor.prototype._touchTimeout;\n/**\n * Weak map of elements being monitored to their info.\n * @type {?}\n */\nFocusOriginMonitor.prototype._elementInfo;\n/** @type {?} */\nFocusOriginMonitor.prototype._ngZone;\n/** @type {?} */\nFocusOriginMonitor.prototype._platform;\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n * \n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nexport class CdkMonitorFocus implements OnDestroy {\nprivate _monitorSubscription: Subscription;\n   cdkFocusChange = new EventEmitter<FocusOrigin>();\n/**\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\n              renderer: Renderer2) {\n    this._monitorSubscription = this._focusOriginMonitor.monitor(\n        this._elementRef.nativeElement, renderer,\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._monitorSubscription.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cdkFocusChange': [{ type: Output },],\n};\n}\n\nfunction CdkMonitorFocus_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkMonitorFocus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkMonitorFocus.ctorParameters;\n/** @type {?} */\nCdkMonitorFocus.propDecorators;\n/** @type {?} */\nCdkMonitorFocus.prototype._monitorSubscription;\n/** @type {?} */\nCdkMonitorFocus.prototype.cdkFocusChange;\n/** @type {?} */\nCdkMonitorFocus.prototype._elementRef;\n/** @type {?} */\nCdkMonitorFocus.prototype._focusOriginMonitor;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY(\n    parentDispatcher: FocusOriginMonitor, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new FocusOriginMonitor(ngZone, platform);\n}\n\n\nexport const /** @type {?} */ FOCUS_ORIGIN_MONITOR_PROVIDER = {\n  // If there is already a FocusOriginMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusOriginMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusOriginMonitor], NgZone, Platform],\n  useFactory: FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {DateAdapter} from '../core/datetime/index';\nimport {MdDatepickerIntl} from './datepicker-intl';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../core';\nimport {first} from '../core/rxjs/index';\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n */\nexport class MdCalendar<D> implements AfterContentInit {\n/**\n * A date representing the period (month or year) to start the calendar in.\n */\nstartAt: D;\n/**\n * Whether the calendar should be started in month or year view.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * The currently selected date.\n */\nselected: D;\n/**\n * The minimum selectable date.\n */\nminDate: D;\n/**\n * The maximum selectable date.\n */\nmaxDate: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when the currently selected date changes.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Date filter for the month and year views.\n */\n_dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n/**\n * The current active date. This determines which time period is shown and which date is\n * highlighted when using keyboard navigation.\n * @return {?}\n */\nget _activeDate(): D { return this._clampedActiveDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\nprivate _clampedActiveDate: D;\n/**\n * Whether the calendar is in month view.\n */\n_monthView: boolean;\n/**\n * The label for the current calendar view.\n * @return {?}\n */\nget _periodButtonText(): string {\n    return this._monthView ?\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n            .toLocaleUpperCase() :\n        this._dateAdapter.getYearName(this._activeDate);\n  }\n/**\n * @return {?}\n */\nget _periodButtonLabel(): string {\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n/**\n * The label for the the previous button.\n * @return {?}\n */\nget _prevButtonLabel(): string {\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n  }\n/**\n * The label for the the next button.\n * @return {?}\n */\nget _nextButtonLabel(): string {\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _intl\n * @param {?} _ngZone\n * @param {?} _isCompatibilityMode\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(private _elementRef: ElementRef,\nprivate _intl: MdDatepickerIntl,\nprivate _ngZone: NgZone,\npublic _isCompatibilityMode: boolean,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._monthView = this.startView != 'year';\n  }\n/**\n * Handles date selection in the month view.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n/**\n * Handles month selection in the year view.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: D): void {\n    this._activeDate = month;\n    this._monthView = true;\n  }\n/**\n * Handles user clicks on the period label.\n * @return {?}\n */\n_currentPeriodClicked(): void {\n    this._monthView = !this._monthView;\n  }\n/**\n * Handles user clicks on the previous button.\n * @return {?}\n */\n_previousClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n/**\n * Handles user clicks on the next button.\n * @return {?}\n */\n_nextClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n/**\n * Whether the previous period button is enabled.\n * @return {?}\n */\n_previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n/**\n * Whether the next period button is enabled.\n * @return {?}\n */\n_nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n/**\n * Handles keydown events on the calendar body.\n * @param {?} event\n * @return {?}\n */\n_handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._monthView) {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else {\n      this._handleCalendarBodyKeydownInYearView(event);\n    }\n  }\n/**\n * Focuses the active cell after the microtask queue is empty.\n * @return {?}\n */\n_focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => first.call(this._ngZone.onStable).subscribe(() => {\n      this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n    }));\n  }\n/**\n * Whether the two dates represent the same view in the current view mode (month or year).\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nprivate _isSameView(date1: D, date2: D): boolean {\n    return this._monthView ?\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in month view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in year view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Determine the date for the month that comes before the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _prevMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? -5 :\n        (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\n/**\n * Determine the date for the month that comes after the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _nextMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? 7 :\n        (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MdDatepickerIntl, },\n{type: NgZone, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'selected': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendar.ctorParameters;\n/** @type {?} */\nMdCalendar.propDecorators;\n/**\n * A date representing the period (month or year) to start the calendar in.\n * @type {?}\n */\nMdCalendar.prototype.startAt;\n/**\n * Whether the calendar should be started in month or year view.\n * @type {?}\n */\nMdCalendar.prototype.startView;\n/**\n * The currently selected date.\n * @type {?}\n */\nMdCalendar.prototype.selected;\n/**\n * The minimum selectable date.\n * @type {?}\n */\nMdCalendar.prototype.minDate;\n/**\n * The maximum selectable date.\n * @type {?}\n */\nMdCalendar.prototype.maxDate;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdCalendar.prototype.dateFilter;\n/**\n * Emits when the currently selected date changes.\n * @type {?}\n */\nMdCalendar.prototype.selectedChange;\n/**\n * Date filter for the month and year views.\n * @type {?}\n */\nMdCalendar.prototype._dateFilterForViews;\n/** @type {?} */\nMdCalendar.prototype._clampedActiveDate;\n/**\n * Whether the calendar is in month view.\n * @type {?}\n */\nMdCalendar.prototype._monthView;\n/** @type {?} */\nMdCalendar.prototype._elementRef;\n/** @type {?} */\nMdCalendar.prototype._intl;\n/** @type {?} */\nMdCalendar.prototype._ngZone;\n/** @type {?} */\nMdCalendar.prototype._isCompatibilityMode;\n/** @type {?} */\nMdCalendar.prototype._dateAdapter;\n/** @type {?} */\nMdCalendar.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n  ViewChild,\n  ChangeDetectorRef,\n  Attribute,\n  OnInit,\n  Inject\n} from '@angular/core';\nimport {MdOption, MdOptionSelectionChange, MdOptgroup} from '../core/option/index';\nimport {ENTER, SPACE, UP_ARROW, DOWN_ARROW, HOME, END} from '../core/keyboard/keycodes';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {Directionality} from '../core/bidi/index';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformPlaceholder, transformPanel, fadeInContent} from './select-animations';\nimport {ControlValueAccessor, NgControl} from '@angular/forms';\nimport {coerceBooleanProperty} from '@angular/cdk';\nimport {ConnectedOverlayDirective} from '../core/overlay/overlay-directives';\nimport {ViewportRuler} from '../core/overlay/position/viewport-ruler';\nimport {SelectionModel} from '../core/selection/selection';\nimport {getMdSelectDynamicMultipleError, getMdSelectNonArrayValueError} from './select-errors';\nimport {startWith, filter} from '../core/rxjs/index';\nimport {merge} from 'rxjs/observable/merge';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS\n} from '../core/placeholder/placeholder-options';\n/**\n * The fixed height of every option element (option, group header etc.).\n */\nexport const SELECT_ITEM_HEIGHT = 48;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The max number of options visible at once in the select panel.\n */\nexport const SELECT_MAX_OPTIONS_DISPLAYED =\n    Math.floor(SELECT_PANEL_MAX_HEIGHT / SELECT_ITEM_HEIGHT);\n/**\n * The fixed height of the select's trigger element.\n */\nexport const SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n */\nexport const SELECT_OPTION_HEIGHT_ADJUSTMENT = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n * \n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nexport const SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSelectBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSelectBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectBase.prototype._renderer;\n/** @type {?} */\nMdSelectBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSelectMixinBase = mixinColor(mixinDisabled(MdSelectBase), 'primary');\nexport class MdSelect extends _MdSelectMixinBase implements AfterContentInit, OnDestroy, OnInit,\n    ControlValueAccessor, CanColor, CanDisable {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription: Subscription | null;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription: Subscription;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MdOption>;\n/**\n * The animation state of the placeholder.\n */\nprivate _placeholderState = '';\n/**\n * Tab index for the element.\n */\nprivate _tabIndex: number;\n/**\n * Deals with configuring placeholder options\n */\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n */\n_triggerWidth: number;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n */\n_selectedValueWidth: number;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n */\n_positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MdOption>;\n/**\n * All of the defined groups of options.\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n */\npanelClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n\n    // Must wait to record the trigger width to ensure placeholder width is included.\n    Promise.resolve(null).then(() => this._setTriggerWidth());\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMdSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * Whether to float the placeholder text.\n * @return {?}\n */\nget floatPlaceholder(): FloatPlaceholderType { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Tab index for the select element.\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    if (typeof value !== 'undefined') {\n      this._tabIndex = value;\n    }\n  }\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\n    return merge(...this.options.map(option => option.onSelectionChange));\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _control\n * @param {?} tabIndex\n * @param {?} placeholderOptions\n */\nconstructor(\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\n    renderer: Renderer2,\n    elementRef: ElementRef,\nprivate _dir: Directionality,\npublic _control: NgControl,\n     tabIndex: string,\n      placeholderOptions: PlaceholderOptions) {\n    super(renderer, elementRef);\n\n    if (this._control) {\n      this._control.valueAccessor = this;\n    }\n\n    this._tabIndex = parseInt(tabIndex) || 0;\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, undefined, false);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = startWith.call(this.options.changes, null).subscribe(() => {\n      this._resetOptions();\n\n      if (this._control) {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve(null).then(() => this._setSelectionByValue(this._control.value));\n      }\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    if (!this._triggerWidth) {\n      this._setTriggerWidth();\n    }\n\n    this._calculateOverlayPosition();\n    this._placeholderState = this._floatPlaceholderState();\n    this._panelOpen = true;\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      if (this._selectionModel.isEmpty()) {\n        this._placeholderState = '';\n      }\n\n      this.focus();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (this._multiple) {\n      let /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Sets the width of the trigger element. This is necessary to match\n * the overlay width to the trigger width.\n * @return {?}\n */\nprivate _setTriggerWidth(): void {\n    this._triggerWidth = this._getTriggerRect().width;\n  }\n/**\n * Handles the keyboard interactions of a closed select.\n * @param {?} event\n * @return {?}\n */\n_handleClosedKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      if (event.keyCode === ENTER || event.keyCode === SPACE) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this._handleArrowKey(event);\n      }\n    }\n  }\n/**\n * Handles keypresses inside the panel.\n * @param {?} event\n * @return {?}\n */\n_handlePanelKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === HOME || event.keyCode === END) {\n      event.preventDefault();\n      event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                               this._keyManager.setLastItemActive();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.panelOpen) {\n      this._onTouched();\n    }\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\n    this._calculateOverlayOffsetX();\n    this._setScrollTop();\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel'); /** @type {?} */((\n    scrollContainer)).scrollTop = this._scrollTop;\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw getMdSelectNonArrayValueError();\n    }\n\n    this._clearSelection();\n\n    if (isArray) {\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._selectValue(value, isUserInput);\n    }\n\n    this._setValueWidth();\n\n    if (this._selectionModel.isEmpty()) {\n      this._placeholderState = '';\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput = false): MdOption | undefined {\n    let /** @type {?} */ optionsArray = this.options.toArray();\n    let /** @type {?} */ correspondingOption = optionsArray.find(option => {\n      return option.value != null && option.value === value;\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this._keyManager.setActiveItem(optionsArray.indexOf(correspondingOption));\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getTriggerRect(): ClientRect {\n    return this.trigger.nativeElement.getBoundingClientRect();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager(this.options);\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = filter.call(this.optionSelectionChanges,\n      event => event.isUserInput).subscribe(event => {\n        this._onSelect(event.source);\n        this._setValueWidth();\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    if (this._optionSubscription) {\n      this._optionSubscription.unsubscribe();\n      this._optionSubscription = null;\n    }\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._onChange(valueToEmit);\n    this.change.emit(new MdSelectChange(this, valueToEmit));\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Must set the width of the selected option's value programmatically\n * because it is absolutely positioned and otherwise will not clip\n * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n * @return {?}\n */\nprivate _setValueWidth() {\n    this._selectedValueWidth =  this._triggerWidth - 13;\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem( /** @type {?} */((this._getOptionIndex(this._selectionModel.selected[0]))));\n    }\n  }\n/**\n * Focuses the select element.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number | undefined {\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    const /** @type {?} */ items = this._getItemCount();\n    const /** @type {?} */ panelHeight = Math.min(items * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = items * SELECT_ITEM_HEIGHT;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    if (this._selectionModel.hasValue()) {\n      let /** @type {?} */ selectedOptionOffset = /** @type {?} */(( this._getOptionIndex(this._selectionModel.selected[0])));\n\n      selectedOptionOffset += this._getLabelCountBeforeOption(selectedOptionOffset);\n\n      // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n      const /** @type {?} */ scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n    } else {\n      // If no option is selected, the panel centers on the first option. In this case,\n      // we must only adjust for the height difference between the option element\n      // and the trigger element, then multiply it by -1 to ensure the panel moves\n      // in the correct direction up the page.\n      this._offsetY = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1 -\n          (this._getLabelCountBeforeOption(0) * SELECT_ITEM_HEIGHT);\n    }\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ optionOffsetFromScrollTop = SELECT_ITEM_HEIGHT * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = SELECT_ITEM_HEIGHT / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Figures out the appropriate animation state for the placeholder.\n * @return {?}\n */\n_getPlaceholderAnimationState(): string {\n    if (this.floatPlaceholder === 'never') {\n      return '';\n    }\n\n    if (this.floatPlaceholder === 'always') {\n      return this._floatPlaceholderState();\n    }\n\n    return this._placeholderState;\n  }\n/**\n * Determines the CSS `opacity` of the placeholder element.\n * @return {?}\n */\n_getPlaceholderOpacity(): string {\n    return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ?\n        '1' : '0';\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n * can't be calculated until the panel has been attached, because we need to know the\n * content width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ isRtl = this._isRtl();\n    const /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let /** @type {?} */ offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let /** @type {?} */ selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * SELECT_ITEM_HEIGHT;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this._getItemCount() - SELECT_MAX_OPTIONS_DISPLAYED;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop =\n          selectedDisplayIndex * SELECT_ITEM_HEIGHT + SELECT_PANEL_PADDING_Y;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - SELECT_ITEM_HEIGHT / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ triggerRect = this._getTriggerRect();\n\n    const /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this._getItemCount() * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    const /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    const /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ originY =\n        Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_ITEM_HEIGHT / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Figures out the floating placeholder state value.\n * @return {?}\n */\nprivate _floatPlaceholderState(): string {\n    return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n  }\n/**\n * Handles the user pressing the arrow keys on a closed select.\n * @param {?} event\n * @return {?}\n */\nprivate _handleArrowKey(event: KeyboardEvent): void {\n    if (this._multiple) {\n      event.preventDefault();\n      this.open();\n    } else {\n      const /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\n\n      // Cycle though the select options even when the select is closed,\n      // matching the behavior of the native select element.\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\n      // however the key manager only supports up/down at the moment.\n      this._keyManager.onKeydown(event);\n\n      const /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MdOption));\n\n      if (currentActiveItem !== prevActiveItem) {\n        this._clearSelection();\n        this._setSelectionByValue(currentActiveItem.value, true);\n        this._propagateChanges();\n      }\n    }\n  }\n/**\n * Calculates the amount of items in the select. This includes options and group labels.\n * @return {?}\n */\nprivate _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n/**\n * Calculates the amount of option group labels that precede the specified option.\n * Useful when positioning the panel, because the labels will offset the index of the\n * currently-selected option.\n * @param {?} optionIndex\n * @return {?}\n */\nprivate _getLabelCountBeforeOption(optionIndex: number): number {\n    if (this.optionGroups.length) {\n      let /** @type {?} */ options = this.options.toArray();\n      let /** @type {?} */ groups = this.optionGroups.toArray();\n      let /** @type {?} */ groupCounter = 0;\n\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\n        if (options[i].group && options[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-select, mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['color', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': '_control?.invalid || \"false\"',\n    '[attr.aria-owns]': '_optionIds',\n    '[class.mat-select-disabled]': 'disabled',\n    'class': 'mat-select',\n    '(keydown)': '_handleClosedKeydown($event)',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'mdSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'panelClass': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * The animation state of the placeholder.\n * @type {?}\n */\nMdSelect.prototype._placeholderState;\n/**\n * Tab index for the element.\n * @type {?}\n */\nMdSelect.prototype._tabIndex;\n/**\n * Deals with configuring placeholder options\n * @type {?}\n */\nMdSelect.prototype._placeholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n * @type {?}\n */\nMdSelect.prototype._triggerWidth;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n * @type {?}\n */\nMdSelect.prototype._selectedValueWidth;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/**\n * All of the defined groups of options.\n * @type {?}\n */\nMdSelect.prototype.optionGroups;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nMdSelect.prototype.panelClass;\n/** @type {?} */\nMdSelect.prototype._floatPlaceholder;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._control;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewContainerRef,\n} from '@angular/core';\nimport {MdMenuPanel} from './menu-panel';\nimport {throwMdMenuMissingError} from './menu-errors';\nimport {\n    isFakeMousedownFromScreenReader,\n    Directionality,\n    Direction,\n    Overlay,\n    OverlayState,\n    OverlayRef,\n    TemplatePortal,\n    ConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    VerticalConnectionPos,\n} from '../core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nexport class MdMenuTrigger implements AfterViewInit, OnDestroy {\nprivate _portal: TemplatePortal;\nprivate _overlayRef: OverlayRef | null = null;\nprivate _menuOpen: boolean = false;\nprivate _backdropSubscription: Subscription;\nprivate _positionSubscription: Subscription;\nprivate _openedByMouse: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMdMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMdMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMatMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMatMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * @return {?}\n */\nget _matMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * References the menu instance that the trigger is associated with.\n */\nmenu: MdMenuPanel;\n/**\n * Event emitted when the associated menu is opened.\n */\nonMenuOpen = new EventEmitter<void>();\n/**\n * Event emitted when the associated menu is closed.\n */\nonMenuClose = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _element\n * @param {?} _viewContainerRef\n * @param {?} _dir\n */\nconstructor(private _overlay: Overlay,\nprivate _element: ElementRef,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _dir: Directionality) { }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._checkMenu();\n    this.menu.close.subscribe(() => this.closeMenu());\n  }\n/**\n * @return {?}\n */\nngOnDestroy() { this.destroyMenu(); }\n/**\n * Whether the menu is open.\n * @return {?}\n */\nget menuOpen(): boolean { return this._menuOpen; }\n/**\n * Toggles the menu between the open and closed states.\n * @return {?}\n */\ntoggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n/**\n * Opens the menu.\n * @return {?}\n */\nopenMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._subscribeToBackdrop();\n      this._initMenu();\n    }\n  }\n/**\n * Closes the menu.\n * @return {?}\n */\ncloseMenu(): void {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this._backdropSubscription.unsubscribe();\n      this._resetMenu();\n    }\n  }\n/**\n * Removes the menu from the DOM.\n * @return {?}\n */\ndestroyMenu(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n\n      this._cleanUpSubscriptions();\n    }\n  }\n/**\n * Focuses the menu trigger.\n * @return {?}\n */\nfocus() {\n    this._element.nativeElement.focus();\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\nget dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * This method ensures that the menu closes when the overlay backdrop is clicked.\n * We do not use first() here because doing so would not catch clicks from within\n * the menu, and it would fail to unsubscribe properly. Instead, we unsubscribe\n * explicitly when the menu is closed or destroyed.\n * @return {?}\n */\nprivate _subscribeToBackdrop(): void {\n    if (this._overlayRef) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n        this.menu._emitCloseEvent();\n      });\n    }\n  }\n/**\n * This method sets the menu state to open and focuses the first item if\n * the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _initMenu(): void {\n    this._setIsMenuOpen(true);\n\n    // Should only set focus if opened via the keyboard, so keyboard users can\n    // can easily navigate menu items. According to spec, mouse users should not\n    // see the focus style.\n    if (!this._openedByMouse) {\n      this.menu.focusFirstItem();\n    }\n  }\n/**\n * This method resets the menu when it's closed, most importantly restoring\n * focus to the menu trigger if the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // Focus only needs to be reset to the host element if the menu was opened\n    // by the keyboard and manually shifted to the first menu item.\n    if (!this._openedByMouse) {\n      this.focus();\n    }\n    this._openedByMouse = false;\n  }\n/**\n * @param {?} isOpen\n * @return {?}\n */\nprivate _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\n  }\n/**\n *  This method checks that a valid instance of MdMenu has been passed into\n *  mdMenuTriggerFor. If not, an exception is thrown.\n * @return {?}\n */\nprivate _checkMenu() {\n    if (!this.menu) {\n      throwMdMenuMissingError();\n    }\n  }\n/**\n *  This method creates the overlay from the provided menu's template and saves its\n *  OverlayRef so that it can be attached to the DOM when openMenu is called.\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const /** @type {?} */ config = this._getOverlayConfig();\n      this._subscribeToPositions( /** @type {?} */((config.positionStrategy as ConnectedPositionStrategy)));\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n/**\n * This method builds the configuration object needed to create the overlay, the OverlayState.\n * @return {?} OverlayState\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getPosition()\n                                        .withDirection(this.dir);\n    overlayState.hasBackdrop = true;\n    overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';\n    overlayState.direction = this.dir;\n    overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n    return overlayState;\n  }\n/**\n * Listens to changes in the position of the overlay and sets the correct classes\n * on the menu based on the new position. This ensures the animation origin is always\n * correct, even if a fallback position is used for the overlay.\n * @param {?} position\n * @return {?}\n */\nprivate _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe((change) => {\n      const /** @type {?} */ posX: MenuPositionX = change.connectionPair.originX === 'start' ? 'after' : 'before';\n      let /** @type {?} */ posY: MenuPositionY = change.connectionPair.originY === 'top' ? 'below' : 'above';\n\n      if (!this.menu.overlapTrigger) {\n        posY = posY === 'below' ? 'above' : 'below';\n      }\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n/**\n * This method builds the position strategy for the overlay, so the menu is properly connected\n * to the trigger.\n * @return {?} ConnectedPositionStrategy\n */\nprivate _getPosition(): ConnectedPositionStrategy  {\n    const [posX, fallbackX]: HorizontalConnectionPos[] =\n      this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    const [overlayY, fallbackOverlayY]: VerticalConnectionPos[] =\n      this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let /** @type {?} */ originY = overlayY;\n    let /** @type {?} */ fallbackOriginY = fallbackOverlayY;\n\n    if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      fallbackOriginY = fallbackOverlayY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n      .connectedTo(this._element,\n          {originX: posX, originY: originY}, {overlayX: posX, overlayY: overlayY})\n      .withFallbackPosition(\n          {originX: fallbackX, originY: originY},\n          {overlayX: fallbackX, overlayY: overlayY})\n      .withFallbackPosition(\n          {originX: posX, originY: fallbackOriginY},\n          {overlayX: posX, overlayY: fallbackOverlayY})\n      .withFallbackPosition(\n          {originX: fallbackX, originY: fallbackOriginY},\n          {overlayX: fallbackX, overlayY: fallbackOverlayY});\n  }\n/**\n * @return {?}\n */\nprivate _cleanUpSubscriptions(): void {\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-menu-trigger-for], [mat-menu-trigger-for],\n             [mdMenuTriggerFor], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(click)': 'toggleMenu()',\n  },\n  exportAs: 'mdMenuTrigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedMdMenuTriggerFor': [{ type: Input, args: ['md-menu-trigger-for', ] },],\n'_deprecatedMatMenuTriggerFor': [{ type: Input, args: ['mat-menu-trigger-for', ] },],\n'_matMenuTriggerFor': [{ type: Input, args: ['matMenuTriggerFor', ] },],\n'menu': [{ type: Input, args: ['mdMenuTriggerFor', ] },],\n'onMenuOpen': [{ type: Output },],\n'onMenuClose': [{ type: Output },],\n};\n}\n\nfunction MdMenuTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuTrigger.ctorParameters;\n/** @type {?} */\nMdMenuTrigger.propDecorators;\n/** @type {?} */\nMdMenuTrigger.prototype._portal;\n/** @type {?} */\nMdMenuTrigger.prototype._overlayRef;\n/** @type {?} */\nMdMenuTrigger.prototype._menuOpen;\n/** @type {?} */\nMdMenuTrigger.prototype._backdropSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._positionSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._openedByMouse;\n/**\n * References the menu instance that the trigger is associated with.\n * @type {?}\n */\nMdMenuTrigger.prototype.menu;\n/**\n * Event emitted when the associated menu is opened.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuOpen;\n/**\n * Event emitted when the associated menu is closed.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuClose;\n/** @type {?} */\nMdMenuTrigger.prototype._overlay;\n/** @type {?} */\nMdMenuTrigger.prototype._element;\n/** @type {?} */\nMdMenuTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdMenuTrigger.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Host,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {SPACE, ENTER} from '../core/keyboard/keycodes';\nimport {MdExpansionPanel, EXPANSION_PANEL_ANIMATION_TIMING} from './expansion-panel';\n/**\n * <md-expansion-panel-header> component.\n * \n * This component corresponds to the header element of an <md-expansion-panel>.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanelHeader {\n/**\n * @param {?} panel\n */\nconstructor(\npublic panel: MdExpansionPanel) {}\n/**\n * Toggles the expanded state of the panel.\n * @return {?}\n */\n_toggle(): void {\n    this.panel.toggle();\n  }\n/**\n * Gets whether the panel is expanded.\n * @return {?}\n */\n_isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n/**\n * Gets the expanded state string of the panel.\n * @return {?}\n */\n_getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n/**\n * Gets the panel id.\n * @return {?}\n */\n_getPanelId(): string {\n    return this.panel.id;\n  }\n/**\n * Gets whether the expand indicator is hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\n    return this.panel.hideToggle;\n  }\n/**\n * Handle keyup event calling to toggle() if appropriate.\n * @param {?} event\n * @return {?}\n */\n_keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-expansion-panel-header, mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    'tabindex': '0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': '_getExpandedState()',\n  },\n  animations: [\n    trigger('indicatorRotate', [\n      state('collapsed', style({transform: 'rotate(0deg)'})),\n      state('expanded', style({transform: 'rotate(180deg)'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('expansionHeight', [\n      state('collapsed', style({height: '48px', 'line-height': '48px'})),\n      state('expanded', style({height: '64px', 'line-height': '68px'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdExpansionPanel, decorators: [{ type: Host }, ]},\n];\n}\n\nfunction MdExpansionPanelHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelHeader.ctorParameters;\n/** @type {?} */\nMdExpansionPanelHeader.prototype.panel;\n}\n\n/**\n * <md-panel-description> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelDescription {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-description, mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelDescription_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelDescription.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelDescription.ctorParameters;\n}\n\n/**\n * <md-panel-title> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-title, mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelTitle.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CompatibilityModule, UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '../core';\nimport {\n  MdExpansionPanelHeader,\n  MdExpansionPanelDescription,\n  MdExpansionPanelTitle\n} from './expansion-panel-header';\nimport {\n  MdExpansionPanel,\n  MdExpansionPanelActionRow,\n} from './expansion-panel';\nimport {\n  CdkAccordion,\n  MdAccordion,\n} from './accordion';\nexport class MdExpansionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, CommonModule],\n  exports: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  declarations: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionModule.ctorParameters;\n}\n\n\nexport {\n  CdkAccordion,\n  MdAccordion,\n  MdAccordionDisplayMode\n} from './accordion';\nexport {AccordionItem} from './accordion-item';\nexport {\n  MdExpansionPanel,\n  MdExpansionPanelState,\n  MdExpansionPanelActionRow\n} from './expansion-panel';\nexport {\n  MdExpansionPanelHeader,\n  MdExpansionPanelDescription,\n  MdExpansionPanelTitle\n} from './expansion-panel-header';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdTable = CdkTable;\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport class MdTable<T> extends _MdTable<T> { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-table, mat-table',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTable_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTable.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Renderer2} from '@angular/core';\nimport {CdkCell, CdkColumnDef, CdkHeaderCell} from '@angular/cdk';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdHeaderCellBase = CdkHeaderCell;\nexport const /** @type {?} */ _MdCell = CdkCell;\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class MdHeaderCell extends _MdHeaderCellBase {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef,\n              renderer: Renderer2) {\n    super(columnDef, elementRef, renderer);\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.name}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-header-cell, mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderCell.ctorParameters;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class MdCell extends _MdCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef,\n              renderer: Renderer2) {\n    super(columnDef, elementRef, renderer);\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.name}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-cell, mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCell.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {CdkHeaderRow, CdkRow, CDK_ROW_TEMPLATE} from '@angular/cdk';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdHeaderRow = CdkHeaderRow;\nexport const /** @type {?} */ _MdRow = CdkRow;\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MdHeaderRow extends _MdHeaderRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'md-header-row, mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderRow.ctorParameters;\n}\n\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MdRow extends _MdRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'md-row, mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {SortDirection} from './sort-direction';\n/**\n * To modify the labels and text displayed, create a new instance of MdSortHeaderIntl and\n * include it in a custom provider.\n */\nexport class MdSortHeaderIntl {\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n/**\n * A label to describe the current sort (visible only to screenreaders).\n */\nsortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortHeaderIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeaderIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeaderIntl.ctorParameters;\n/** @type {?} */\nMdSortHeaderIntl.prototype.sortButtonLabel;\n/**\n * A label to describe the current sort (visible only to screenreaders).\n * @type {?}\n */\nMdSortHeaderIntl.prototype.sortDescriptionLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdTable} from './table';\nimport {CdkTableModule} from '@angular/cdk';\nimport {MdCell, MdHeaderCell} from './cell';\nimport {MdHeaderRow, MdRow} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\n\nexport {_MdHeaderCellBase,_MdCell,MdHeaderCell,MdCell} from './cell';\nexport {_MdTable,MdTable} from './table';\nexport {_MdHeaderRow,_MdRow,MdHeaderRow,MdRow} from './row';\nexport class MdTableModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CdkTableModule, CommonModule, MdCommonModule],\n  exports: [MdTable, MdHeaderCell, MdCell, MdHeaderRow, MdRow],\n  declarations: [MdTable, MdHeaderCell, MdCell, MdHeaderRow, MdRow],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTableModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTableModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTableModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nexport function getMdSortDuplicateMdSortableIdError(id: string): Error {\n  return Error(`Cannot have two MdSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSortHeaderNotContainedWithinMdSortError(): Error {\n  return Error(`MdSortHeader must be placed within a parent element with the MdSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSortHeaderMissingIdError(): Error {\n  return Error(`MdSortHeader must be provided with a unique id.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Input, Output} from '@angular/core';\nimport {SortDirection} from './sort-direction';\nimport {coerceBooleanProperty} from '../core';\nimport {getMdSortDuplicateMdSortableIdError, getMdSortHeaderMissingIdError} from './sort-errors';\n\nexport interface MdSortable {\n  id: string;\n  start: 'asc' | 'desc';\n  disableClear: boolean;\n}\n\nexport interface Sort {\n  active: string;\n  direction: SortDirection;\n}\n/**\n * Container for MdSortables to manage the sort state and provide default sort parameters.\n */\nexport class MdSort {\n/**\n * Collection of all registered sortables that this directive manages.\n */\nsortables = new Map<string, MdSortable>();\n/**\n * The id of the most recently sorted MdSortable.\n */\nactive: string;\n/**\n * The direction to set when an MdSortable is initially sorted.\n * May be overriden by the MdSortable's sort start.\n */\nstart: 'asc' | 'desc' = 'asc';\n/**\n * The sort direction of the currently active MdSortable.\n */\ndirection: SortDirection = '';\n/**\n * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n * May be overriden by the MdSortable's disable clear input.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n */\nmdSortChange = new EventEmitter<Sort>();\n/**\n * Register function to be used by the contained MdSortables. Adds the MdSortable to the\n * collection of MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nregister(sortable: MdSortable) {\n    if (!sortable.id) {\n      throw getMdSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getMdSortDuplicateMdSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n/**\n * Unregister function to be used by the contained MdSortables. Removes the MdSortable from the\n * collection of contained MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nderegister(sortable: MdSortable) {\n    this.sortables.delete(sortable.id);\n  }\n/**\n * Sets the active sort id and determines the new sort direction.\n * @param {?} sortable\n * @return {?}\n */\nsort(sortable: MdSortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.mdSortChange.next({active: this.active, direction: this.direction});\n  }\n/**\n * Returns the next sort direction of the active sortable, checking for potential overrides.\n * @param {?} sortable\n * @return {?}\n */\ngetNextSortDirection(sortable: MdSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const /** @type {?} */ disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let /** @type {?} */ sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let /** @type {?} */ nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSort], [matSort]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input, args: ['mdSortActive', ] },],\n'start': [{ type: Input, args: ['mdSortStart', ] },],\n'direction': [{ type: Input, args: ['mdSortDirection', ] },],\n'disableClear': [{ type: Input, args: ['mdSortDisableClear', ] },],\n'mdSortChange': [{ type: Output },],\n};\n}\n\nfunction MdSort_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSort.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSort.ctorParameters;\n/** @type {?} */\nMdSort.propDecorators;\n/**\n * Collection of all registered sortables that this directive manages.\n * @type {?}\n */\nMdSort.prototype.sortables;\n/**\n * The id of the most recently sorted MdSortable.\n * @type {?}\n */\nMdSort.prototype.active;\n/**\n * The direction to set when an MdSortable is initially sorted.\n * May be overriden by the MdSortable's sort start.\n * @type {?}\n */\nMdSort.prototype.start;\n/**\n * The sort direction of the currently active MdSortable.\n * @type {?}\n */\nMdSort.prototype.direction;\n/** @type {?} */\nMdSort.prototype._disableClear;\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n * @type {?}\n */\nMdSort.prototype.mdSortChange;\n}\n\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let /** @type {?} */ sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef, Component, Input,\n  Optional, ViewEncapsulation\n} from '@angular/core';\nimport {MdSort, MdSortable} from './sort';\nimport {MdSortHeaderIntl} from './sort-header-intl';\nimport {CdkColumnDef} from '@angular/cdk';\nimport {coerceBooleanProperty} from '../core';\nimport {getMdSortHeaderNotContainedWithinMdSortError} from './sort-errors';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n * \n * Must be provided with an id and contained within a parent MdSort directive.\n * \n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nexport class MdSortHeader implements MdSortable {\n/**\n * \\@docs-private\n */\nsortSubscription: Subscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n * the column's name.\n */\nid: string;\n/**\n * Sets the position of the arrow that displays when sorted.\n */\narrowPosition: 'before' | 'after' = 'after';\n/**\n * Overrides the sort start value of the containing MdSort for this MdSortable.\n */\nstart: 'asc' | 'desc';\n/**\n * Overrides the disable clear value of the containing MdSort for this MdSortable.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _id() { return this.id; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _id(v: string) { this.id = v; }\n/**\n * @param {?} _intl\n * @param {?} _changeDetectorRef\n * @param {?} _sort\n * @param {?} _cdkColumnDef\n */\nconstructor(public _intl: MdSortHeaderIntl,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic _sort: MdSort,\npublic _cdkColumnDef: CdkColumnDef) {\n    if (!_sort) {\n      throw getMdSortHeaderNotContainedWithinMdSortError();\n    }\n\n    this.sortSubscription = _sort.mdSortChange.subscribe(() => _changeDetectorRef.markForCheck());\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._sort.deregister(this);\n    this.sortSubscription.unsubscribe();\n  }\n/**\n * Whether this MdSortHeader is currently sorted in either ascending or descending order.\n * @return {?}\n */\n_isSorted() {\n    return this._sort.active == this.id && this._sort.direction;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-sort-header], [mat-sort-header]',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_sort.sort(this)',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSortHeaderIntl, },\n{type: ChangeDetectorRef, },\n{type: MdSort, decorators: [{ type: Optional }, ]},\n{type: CdkColumnDef, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input, args: ['md-sort-header', ] },],\n'arrowPosition': [{ type: Input },],\n'start': [{ type: Input, args: ['start', ] },],\n'disableClear': [{ type: Input },],\n'_id': [{ type: Input, args: ['mat-sort-header', ] },],\n};\n}\n\nfunction MdSortHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeader.ctorParameters;\n/** @type {?} */\nMdSortHeader.propDecorators;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdSortHeader.prototype.sortSubscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n * the column's name.\n * @type {?}\n */\nMdSortHeader.prototype.id;\n/**\n * Sets the position of the arrow that displays when sorted.\n * @type {?}\n */\nMdSortHeader.prototype.arrowPosition;\n/**\n * Overrides the sort start value of the containing MdSort for this MdSortable.\n * @type {?}\n */\nMdSortHeader.prototype.start;\n/** @type {?} */\nMdSortHeader.prototype._disableClear;\n/** @type {?} */\nMdSortHeader.prototype._intl;\n/** @type {?} */\nMdSortHeader.prototype._changeDetectorRef;\n/** @type {?} */\nMdSortHeader.prototype._sort;\n/** @type {?} */\nMdSortHeader.prototype._cdkColumnDef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdSortHeader} from './sort-header';\nimport {MdSort} from './sort';\nimport {MdSortHeaderIntl} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\nexport {SortDirection} from './sort-direction';\nexport {MdSortHeader} from './sort-header';\nexport {MdSortHeaderIntl} from './sort-header-intl';\nexport {MdSortable,Sort,MdSort} from './sort';\nexport class MdSortModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  exports: [MdSort, MdSortHeader],\n  declarations: [MdSort, MdSortHeader],\n  providers: [MdSortHeaderIntl]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n/**\n * To modify the labels and text displayed, create a new instance of MdPaginatorIntl and\n * include it in a custom provider\n */\nexport class MdPaginatorIntl {\n/**\n * A label for the page size selector.\n */\nitemsPerPageLabel = 'Items per page:';\n/**\n * A label for the button that increments the current page.\n */\nnextPageLabel = 'Next page';\n/**\n * A label for the button that decrements the current page.\n */\npreviousPageLabel = 'Previous page';\n/**\n * A label for the range of items within the current page and the length of the whole list.\n */\ngetRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPaginatorIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginatorIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginatorIntl.ctorParameters;\n/**\n * A label for the page size selector.\n * @type {?}\n */\nMdPaginatorIntl.prototype.itemsPerPageLabel;\n/**\n * A label for the button that increments the current page.\n * @type {?}\n */\nMdPaginatorIntl.prototype.nextPageLabel;\n/**\n * A label for the button that decrements the current page.\n * @type {?}\n */\nMdPaginatorIntl.prototype.previousPageLabel;\n/**\n * A label for the range of items within the current page and the length of the whole list.\n * @type {?}\n */\nMdPaginatorIntl.prototype.getRangeLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdPaginatorIntl} from './paginator-intl';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../core';\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n/**\n * The current page index.\n */\npageIndex: number;\n/**\n * The current page size\n */\npageSize: number;\n/**\n * The current total number of items being paged\n */\nlength: number;\n}\n\nfunction PageEvent_tsickle_Closure_declarations() {\n/**\n * The current page index.\n * @type {?}\n */\nPageEvent.prototype.pageIndex;\n/**\n * The current page size\n * @type {?}\n */\nPageEvent.prototype.pageSize;\n/**\n * The current total number of items being paged\n * @type {?}\n */\nPageEvent.prototype.length;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nexport class MdPaginator implements OnInit {\nprivate _initialized: boolean;\n/**\n * The zero-based page index of the displayed list of items. Defaulted to 0.\n */\npageIndex: number = 0;\n/**\n * The length of the total number of items that are being paginated. Defaulted to 0.\n */\nlength: number = 0;\n/**\n * Number of items to display on a page. By default set to 50.\n * @return {?}\n */\nget pageSize(): number { return this._pageSize; }\n/**\n * @param {?} pageSize\n * @return {?}\n */\nset pageSize(pageSize: number) {\n    this._pageSize = pageSize;\n    this._updateDisplayedPageSizeOptions();\n  }\nprivate _pageSize: number = 50;\n/**\n * The set of provided page size options to display to the user.\n * @return {?}\n */\nget pageSizeOptions(): number[] { return this._pageSizeOptions; }\n/**\n * @param {?} pageSizeOptions\n * @return {?}\n */\nset pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = pageSizeOptions;\n    this._updateDisplayedPageSizeOptions();\n  }\nprivate _pageSizeOptions: number[] = [];\n/**\n * Event emitted when the paginator changes the page size or page index.\n */\npage = new EventEmitter<PageEvent>();\n/**\n * Displayed set of page size options. Will be sorted and include current page size.\n */\n_displayedPageSizeOptions: number[];\n/**\n * @param {?} _intl\n */\nconstructor(public _intl: MdPaginatorIntl) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n/**\n * Advances to the next page if it exists.\n * @return {?}\n */\nnextPage() {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n/**\n * Move back to the previous page if it exists.\n * @return {?}\n */\npreviousPage() {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n/**\n * Whether there is a previous page.\n * @return {?}\n */\nhasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n/**\n * Whether there is a next page.\n * @return {?}\n */\nhasNextPage() {\n    const /** @type {?} */ numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n/**\n * Changes the page size so that the first item displayed on the page will still be\n * displayed using the new page size.\n * \n * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n * switching so that the page size is 5 will set the third page as the current page so\n * that the 10th item will still be displayed.\n * @param {?} pageSize\n * @return {?}\n */\n_changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const /** @type {?} */ startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n/**\n * Updates the list of page size options to display to the user. Includes making sure that\n * the page size is an option and that the list is sorted.\n * @return {?}\n */\nprivate _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n  }\n/**\n * Emits an event notifying that a change of the paginator's properties has been triggered.\n * @return {?}\n */\nprivate _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-paginator, mat-paginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  providers: [\n    {provide: MATERIAL_COMPATIBILITY_MODE, useValue: false}\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdPaginatorIntl, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'pageIndex': [{ type: Input },],\n'length': [{ type: Input },],\n'pageSize': [{ type: Input },],\n'pageSizeOptions': [{ type: Input },],\n'page': [{ type: Output },],\n};\n}\n\nfunction MdPaginator_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginator.ctorParameters;\n/** @type {?} */\nMdPaginator.propDecorators;\n/** @type {?} */\nMdPaginator.prototype._initialized;\n/**\n * The zero-based page index of the displayed list of items. Defaulted to 0.\n * @type {?}\n */\nMdPaginator.prototype.pageIndex;\n/**\n * The length of the total number of items that are being paginated. Defaulted to 0.\n * @type {?}\n */\nMdPaginator.prototype.length;\n/** @type {?} */\nMdPaginator.prototype._pageSize;\n/** @type {?} */\nMdPaginator.prototype._pageSizeOptions;\n/**\n * Event emitted when the paginator changes the page size or page index.\n * @type {?}\n */\nMdPaginator.prototype.page;\n/**\n * Displayed set of page size options. Will be sorted and include current page size.\n * @type {?}\n */\nMdPaginator.prototype._displayedPageSizeOptions;\n/** @type {?} */\nMdPaginator.prototype._intl;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {MdCommonModule, OverlayModule} from '../core';\nimport {MdButtonModule} from '../button/index';\nimport {MdSelectModule} from '../select/index';\nimport {MdPaginator} from './paginator';\nimport {MdPaginatorIntl} from './paginator-intl';\nimport {MdTooltipModule} from '../tooltip/index';\nexport class MdPaginatorModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    FormsModule,\n    MdButtonModule,\n    MdSelectModule,\n    MdTooltipModule,\n  ],\n  exports: [MdPaginator],\n  declarations: [MdPaginator],\n  providers: [MdPaginatorIntl],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPaginatorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginatorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginatorModule.ctorParameters;\n}\n\n\n\nexport {PageEvent,MdPaginator} from './paginator';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\n\nimport {\n  A11yModule,\n  BidiModule,\n  MdCommonModule,\n  MdRippleModule,\n  ObserveContentModule,\n  OverlayModule,\n  PortalModule\n} from './core/index';\n\nimport {MdButtonToggleModule} from './button-toggle/index';\nimport {MdButtonModule} from './button/index';\nimport {MdCheckboxModule} from './checkbox/index';\nimport {MdRadioModule} from './radio/index';\nimport {MdSelectModule} from './select/index';\nimport {MdSlideToggleModule} from './slide-toggle/index';\nimport {MdSliderModule} from './slider/index';\nimport {MdSidenavModule} from './sidenav/index';\nimport {MdListModule} from './list/index';\nimport {MdGridListModule} from './grid-list/index';\nimport {MdCardModule} from './card/index';\nimport {MdChipsModule} from './chips/index';\nimport {MdIconModule} from './icon/index';\nimport {MdProgressSpinnerModule} from './progress-spinner/index';\nimport {MdProgressBarModule} from './progress-bar/index';\nimport {MdInputModule} from './input/index';\nimport {MdSnackBarModule} from './snack-bar/index';\nimport {MdTabsModule} from './tabs/index';\nimport {MdToolbarModule} from './toolbar/index';\nimport {MdTooltipModule} from './tooltip/index';\nimport {MdMenuModule} from './menu/index';\nimport {MdDialogModule} from './dialog/index';\nimport {PlatformModule} from './core/platform/index';\nimport {MdAutocompleteModule} from './autocomplete/index';\nimport {StyleModule} from './core/style/index';\nimport {MdDatepickerModule} from './datepicker/index';\nimport {MdExpansionModule} from './expansion/index';\nimport {MdTableModule} from './table/index';\nimport {MdSortModule} from './sort/index';\nimport {MdPaginatorModule} from './paginator/index';\n\nconst /** @type {?} */ MATERIAL_MODULES = [\n  MdAutocompleteModule,\n  MdButtonModule,\n  MdButtonToggleModule,\n  MdCardModule,\n  MdChipsModule,\n  MdCheckboxModule,\n  MdDatepickerModule,\n  MdTableModule,\n  MdDialogModule,\n  MdExpansionModule,\n  MdGridListModule,\n  MdIconModule,\n  MdInputModule,\n  MdListModule,\n  MdMenuModule,\n  MdPaginatorModule,\n  MdProgressBarModule,\n  MdProgressSpinnerModule,\n  MdRadioModule,\n  MdRippleModule,\n  MdSelectModule,\n  MdSidenavModule,\n  MdSliderModule,\n  MdSlideToggleModule,\n  MdSnackBarModule,\n  MdSortModule,\n  MdTabsModule,\n  MdToolbarModule,\n  MdTooltipModule,\n  OverlayModule,\n  PortalModule,\n  BidiModule,\n  StyleModule,\n  A11yModule,\n  PlatformModule,\n  MdCommonModule,\n  ObserveContentModule\n];\n/**\n * @deprecated\n */\nexport class MaterialModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: MATERIAL_MODULES,\n  exports: MATERIAL_MODULES,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MaterialModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMaterialModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaterialModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {coerceBooleanProperty,coerceNumberProperty,ObserveContentModule,ObserveContent,Dir,Direction,Directionality,BidiModule,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,PortalHostDirective,TemplatePortalDirective,PortalModule,DomPortalHost,GestureConfig,HammerInput,HammerManager,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_ELEMENT_TOKEN,LIVE_ANNOUNCER_PROVIDER,InteractivityChecker,isFakeMousedownFromScreenReader,A11yModule,UniqueSelectionDispatcher,UniqueSelectionDispatcherListener,UNIQUE_SELECTION_DISPATCHER_PROVIDER,MdLineModule,MdLine,MdLineSetter,ComponentType,CompatibilityModule,NoConflictStyleCompatibilityMode,MdCommonModule,MATERIAL_SANITY_CHECKS,FloatPlaceholderType,PlaceholderOptions,MD_PLACEHOLDER_GLOBAL_OPTIONS,ErrorStateMatcher,ErrorOptions,MD_ERROR_GLOBAL_OPTIONS,defaultErrorStateMatcher,showOnDirtyErrorStateMatcher,MdCoreModule,MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup,PlatformModule,Platform,getSupportedInputTypes,OVERLAY_PROVIDERS,OverlayModule,Overlay,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,SelectionModel,SelectionChange,FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective,StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,AnimationCurves,AnimationDurations,MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckboxBase,_MdPseudoCheckboxBase,MdPseudoCheckbox,NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS,MaterialModule,MdAutocompleteModule,AutocompletePositionY,MdAutocomplete,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger,MdButtonModule,MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor,MdButtonToggleModule,ToggleType,MdButtonToggleGroupBase,_MdButtonToggleGroupMixinBase,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle,MdCardModule,MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardImage,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup,MdChipsModule,MdChipList,MdChipEvent,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip,MdCheckboxModule,MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox,MdDatepickerModule,MdCalendar,MdCalendarCell,MdCalendarBody,MdDatepickerContent,MdDatepicker,MD_DATEPICKER_VALUE_ACCESSOR,MD_DATEPICKER_VALIDATORS,MdDatepickerInput,MdDatepickerIntl,MdDatepickerToggle,MdMonthView,MdYearView,MdDialogModule,MD_DIALOG_DATA,MdDialog,throwMdDialogContentAlreadyAttachedError,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef,MdExpansionModule,CdkAccordion,MdAccordion,MdAccordionDisplayMode,AccordionItem,MdExpansionPanel,MdExpansionPanelState,MdExpansionPanelActionRow,MdExpansionPanelHeader,MdExpansionPanelDescription,MdExpansionPanelTitle,MdGridListModule,MdGridTile,MdGridList,MdIconModule,MdIconBase,_MdIconMixinBase,MdIcon,getMdIconNameNotFoundError,getMdIconNoHttpProviderError,getMdIconFailedToSanitizeError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER,MdInputModule,MdTextareaAutosize,MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer,getMdInputContainerPlaceholderConflictError,getMdInputContainerUnsupportedTypeError,getMdInputContainerDuplicatedHintError,getMdInputContainerMissingMdInputError,MdListModule,MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem,MdMenuModule,fadeInItems,transformMenu,MdMenu,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY,MdPaginatorModule,PageEvent,MdPaginator,MdProgressBarModule,MdProgressBar,MdProgressSpinnerModule,PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner,MdRadioModule,MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton,MdSelectModule,fadeInContent,transformPanel,transformPlaceholder,SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelect,MdSidenavModule,throwMdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer,MdSliderModule,MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,SliderRenderer,MdSlideToggleModule,MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle,MdSnackBarModule,MdSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer,MdSnackBarConfig,MdSnackBarRef,SimpleSnackBar,MdSortModule,SortDirection,MdSortHeader,MdSortHeaderIntl,MdSortable,Sort,MdSort,MdTableModule,_MdHeaderCellBase,_MdCell,MdHeaderCell,MdCell,_MdTable,MdTable,_MdHeaderRow,_MdRow,MdHeaderRow,MdRow,MdTabsModule,MdInkBar,MdTabBody,MdTabBodyOriginState,MdTabBodyPositionState,MdTabHeader,ScrollDirection,MdTabLabelWrapper,MdTab,MdTabLabel,MdTabNav,MdTabLink,MdTabChangeEvent,MdTabHeaderPosition,MdTabGroup,MdTabLinkBase,_MdTabLinkMixinBase,MdToolbarModule,MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar,MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,getMdTooltipInvalidPositionError,MdTooltip,TooltipVisibility,TooltipComponent} from './public_api';\n\nexport {mixinColor as ɵu} from './core/common-behaviors/color';\nexport {mixinDisabled as ɵv} from './core/common-behaviors/disabled';\nexport {UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY as ɵh} from './core/coordination/unique-selection-dispatcher';\nexport {MdDateFormats as ɵw} from './core/datetime/date-formats';\nexport {OVERLAY_CONTAINER_PROVIDER as ɵb,OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa} from './core/overlay/overlay-container';\nexport {OverlayPositionBuilder as ɵt} from './core/overlay/position/overlay-position-builder';\nexport {VIEWPORT_RULER_PROVIDER as ɵd,VIEWPORT_RULER_PROVIDER_FACTORY as ɵc} from './core/overlay/position/viewport-ruler';\nexport {SCROLL_DISPATCHER_PROVIDER as ɵf,SCROLL_DISPATCHER_PROVIDER_FACTORY as ɵe} from './core/overlay/scroll/scroll-dispatcher';\nexport {RippleRenderer as ɵg} from './core/ripple/ripple-renderer';\nexport {EXPANSION_PANEL_ANIMATION_TIMING as ɵi} from './expansion/expansion-panel';\nexport {MdGridAvatarCssMatStyler as ɵk,MdGridTileFooterCssMatStyler as ɵm,MdGridTileHeaderCssMatStyler as ɵl,MdGridTileText as ɵj} from './grid-list/grid-tile';\nexport {MdMenuItemBase as ɵn,_MdMenuItemMixinBase as ɵo} from './menu/menu-item';\nexport {MdPaginatorIntl as ɵx} from './paginator/paginator-intl';\nexport {MdTabBase as ɵr,_MdTabMixinBase as ɵs} from './tabs/tab';\nexport {MdTabLabelWrapperBase as ɵp,_MdTabLabelWrapperMixinBase as ɵq} from './tabs/tab-label-wrapper';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Input,\n  NgZone,\n  Optional,\n  OnDestroy,\n  ViewContainerRef,\n  Inject,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Overlay, OverlayRef, OverlayState, TemplatePortal} from '../core';\nimport {MdAutocomplete} from './autocomplete';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {ConnectedPositionStrategy} from '../core/overlay/position/connected-position-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {MdOptionSelectionChange, MdOption} from '../core/option/option';\nimport {ENTER, UP_ARROW, DOWN_ARROW, ESCAPE} from '../core/keyboard/keycodes';\nimport {Directionality} from '../core/bidi/index';\nimport {MdInputContainer} from '../input/input-container';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {RxChain, switchMap, first, filter} from '../core/rxjs/index';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @return {?}\n */\nexport function getMdAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `md-autocomplete`. ' +\n               'Make sure that the id passed to the `mdAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef | null;\nprivate _portal: TemplatePortal;\nprivate _panelOpen: boolean = false;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n */\nprivate _panelPositionSubscription: Subscription;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * The subscription for closing actions (some are bound to document).\n */\nprivate _closingActionsSubscription: Subscription;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _zone\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n * @param {?} _inputContainer\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _zone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality,\nprivate _inputContainer: MdInputContainer,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._panelPositionSubscription) {\n      this._panelPositionSubscription.unsubscribe();\n    }\n\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    if (!this.autocomplete) {\n      throw getMdAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n      this._overlayRef.updateSize();\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._floatPlaceholder();\n    this._panelOpen = true;\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    this._panelOpen = false;\n    this._resetPlaceholder();\n\n    // We need to trigger change detection manually, because\n    // `fromEvent` doesn't seem to do it at the proper time.\n    // This ensures that the placeholder is reset when the\n    // user clicks outside.\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut,\n      this._outsideClickStream\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return /** @type {?} */(( this.autocomplete._keyManager.activeItem as MdOption));\n    }\n\n    return null;\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return RxChain.from(merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )).call(filter, (event: MouseEvent | TouchEvent) => {\n      const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n      const /** @type {?} */ inputContainer = this._inputContainer ?\n          this._inputContainer._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n             clickTarget !== this._element.nativeElement &&\n             (!inputContainer || !inputContainer.contains(clickTarget)) &&\n             (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }).result();\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && this.panelOpen) {\n      this.closePanel();\n    } else if (this.activeOption && event.keyCode === ENTER) {\n      this.activeOption._selectViaInteraction();\n      event.preventDefault();\n    } else {\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n\n      this.autocomplete._keyManager.onKeydown(event);\n\n      if (isArrowKey) {\n        this.openPanel();\n      }\n\n      Promise.resolve().then(() => {\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      });\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @return {?}\n */\nprivate _floatPlaceholder(): void {\n    if (this._inputContainer && this._inputContainer.floatPlaceholder === 'auto') {\n      this._inputContainer.floatPlaceholder = 'always';\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._inputContainer.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n * the panel height + the option height, so the active option will be just visible at the\n * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n * will become the offset. If that offset is visible within the panel already, the scrollTop is\n * not adjusted.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ optionOffset = this.autocomplete._keyManager.activeItemIndex ?\n        this.autocomplete._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT : 0;\n    const /** @type {?} */ panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const /** @type {?} */ newScrollTop =\n          Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n      this.autocomplete._setScrollTop(newScrollTop);\n    }\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): Subscription {\n    // When the zone is stable initially, and when the option list changes...\n    return RxChain.from(merge(first.call(this._zone.onStable), this.autocomplete.options.changes))\n      // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      .call(switchMap, () => {\n        this._resetPanel();\n        return this.panelClosingActions;\n      })\n      // when the first closing event occurs...\n      .call(first)\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    this._element.nativeElement.value = toDisplay != null ? toDisplay : '';\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach((option) => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _createOverlay(): void {\n    this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n    this._overlayRef = this._overlay.create(this._getOverlayConfig());\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getOverlayPosition();\n    overlayState.width = this._getHostWidth();\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n    return overlayState;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._element,\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    this._subscribeToPositionChanges(this._positionStrategy);\n    return this._positionStrategy;\n  }\n/**\n * This method subscribes to position changes in the autocomplete panel, so the panel's\n * y-offset can be adjusted to match the new position.\n * @param {?} strategy\n * @return {?}\n */\nprivate _subscribeToPositionChanges(strategy: ConnectedPositionStrategy) {\n    this._panelPositionSubscription = strategy.onPositionChange.subscribe(change => {\n      this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';\n    });\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._element.nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to -1 so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n/**\n * Resets the active item and re-calculates alignment of the panel in case its size\n * has changed due to fewer or greater number of options.\n * @return {?}\n */\nprivate _resetPanel() {\n    this._resetActiveItem();\n    this._positionStrategy.recalculateLastPosition();\n    this.autocomplete._setVisibility();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdAutocomplete], input[matAutocomplete],' +\n            'textarea[mdAutocomplete], textarea[matAutocomplete]',\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': 'openPanel()',\n    '(input)': '_handleInput($event)',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: MdInputContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._panelPositionSubscription;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * The subscription for closing actions (some are bound to document).\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._closingActionsSubscription;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._inputContainer;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nexport class MdCalendarCell {\n/**\n * @param {?} value\n * @param {?} displayValue\n * @param {?} ariaLabel\n * @param {?} enabled\n */\nconstructor(public value: number,\npublic displayValue: string,\npublic ariaLabel: string,\npublic enabled: boolean) {}\n}\n\nfunction MdCalendarCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarCell.prototype.value;\n/** @type {?} */\nMdCalendarCell.prototype.displayValue;\n/** @type {?} */\nMdCalendarCell.prototype.ariaLabel;\n/** @type {?} */\nMdCalendarCell.prototype.enabled;\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nexport class MdCalendarBody {\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n */\nlabel: string;\n/**\n * The cells to display in the table.\n */\nrows: MdCalendarCell[][];\n/**\n * The value in the table that corresponds to today.\n */\ntodayValue: number;\n/**\n * The value in the table that is currently selected.\n */\nselectedValue: number;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n */\nlabelMinRequiredCells: number;\n/**\n * The number of columns in the table.\n */\nnumCols = 7;\n/**\n * Whether to allow selection of disabled cells.\n */\nallowDisabledSelection = false;\n/**\n * The cell number of the active cell in the table.\n */\nactiveCell = 0;\n/**\n * Emits when a new value is selected.\n */\nselectedValueChange = new EventEmitter<number>();\n/**\n * @param {?} cell\n * @return {?}\n */\n_cellClicked(cell: MdCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n/**\n * The number of blank cells to put at the beginning for the first row.\n * @return {?}\n */\nget _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n/**\n * @param {?} rowIndex\n * @param {?} colIndex\n * @return {?}\n */\n_isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'rows': [{ type: Input },],\n'todayValue': [{ type: Input },],\n'selectedValue': [{ type: Input },],\n'labelMinRequiredCells': [{ type: Input },],\n'numCols': [{ type: Input },],\n'allowDisabledSelection': [{ type: Input },],\n'activeCell': [{ type: Input },],\n'selectedValueChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendarBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendarBody.ctorParameters;\n/** @type {?} */\nMdCalendarBody.propDecorators;\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n * @type {?}\n */\nMdCalendarBody.prototype.label;\n/**\n * The cells to display in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.rows;\n/**\n * The value in the table that corresponds to today.\n * @type {?}\n */\nMdCalendarBody.prototype.todayValue;\n/**\n * The value in the table that is currently selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValue;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n * @type {?}\n */\nMdCalendarBody.prototype.labelMinRequiredCells;\n/**\n * The number of columns in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.numCols;\n/**\n * Whether to allow selection of disabled cells.\n * @type {?}\n */\nMdCalendarBody.prototype.allowDisabledSelection;\n/**\n * The cell number of the active cell in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.activeCell;\n/**\n * Emits when a new value is selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValueChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdOptionModule, OverlayModule, MdCommonModule} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdAutocomplete} from './autocomplete';\nimport {MdAutocompleteTrigger} from './autocomplete-trigger';\nexport class MdAutocompleteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdOptionModule, OverlayModule, MdCommonModule, CommonModule],\n  exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, MdCommonModule],\n  declarations: [MdAutocomplete, MdAutocompleteTrigger],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteModule.ctorParameters;\n}\n\n\n\nexport {AutocompletePositionY,MdAutocomplete} from './autocomplete';\nexport {AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger} from './autocomplete-trigger';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n */\nexport class MdYearView<D> implements AfterContentInit {\n/**\n * The date to display in this year view (everything other than the year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new month is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Grid of calendar cells representing the months of the year.\n */\n_months: MdCalendarCell[][];\n/**\n * The label for this year (e.g. \"2017\").\n */\n_yearLabel: string;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n */\n_todayMonth: number | null;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n */\n_selectedMonth: number | null;\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._init();\n  }\n/**\n * Handles when a new month is selected.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: number) {\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        this._dateAdapter.getDate(this.activeDate)));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n  }\n/**\n * Gets the month in this year that the given Date falls on.\n * Returns null if the given Date is in another year.\n * @param {?} date\n * @return {?}\n */\nprivate _getMonthInCurrentYear(date: D) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n/**\n * Creates an MdCalendarCell for the given month.\n * @param {?} month\n * @param {?} monthName\n * @return {?}\n */\nprivate _createCellForMonth(month: number, monthName: string) {\n    let /** @type {?} */ ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MdCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n/**\n * Whether the given month is enabled.\n * @param {?} month\n * @return {?}\n */\nprivate _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-year-view',\n  templateUrl: 'year-view.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdYearView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdYearView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdYearView.ctorParameters;\n/** @type {?} */\nMdYearView.propDecorators;\n/** @type {?} */\nMdYearView.prototype._activeDate;\n/** @type {?} */\nMdYearView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdYearView.prototype.dateFilter;\n/**\n * Emits when a new month is selected.\n * @type {?}\n */\nMdYearView.prototype.selectedChange;\n/**\n * Grid of calendar cells representing the months of the year.\n * @type {?}\n */\nMdYearView.prototype._months;\n/**\n * The label for this year (e.g. \"2017\").\n * @type {?}\n */\nMdYearView.prototype._yearLabel;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n * @type {?}\n */\nMdYearView.prototype._todayMonth;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n * @type {?}\n */\nMdYearView.prototype._selectedMonth;\n/** @type {?} */\nMdYearView.prototype._dateAdapter;\n/** @type {?} */\nMdYearView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MdDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MdNativeDateModule, or provide a custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n\n\nconst /** @type {?} */ DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n */\nexport class MdMonthView<D> implements AfterContentInit {\n/**\n * The date to display in this month view (everything other than the month and year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new date is selected.\n */\nselectedChange = new EventEmitter<D | null>();\n/**\n * The label for this month (e.g. \"January 2017\").\n */\n_monthLabel: string;\n/**\n * Grid of calendar cells representing the dates of the month.\n */\n_weeks: MdCalendarCell[][];\n/**\n * The number of blank cells in the first row before the 1st of the month.\n */\n_firstWeekOffset: number;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n */\n_selectedDate: number | null;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n */\n_todayDate: number | null;\n/**\n * The names of the weekdays.\n */\n_weekdays: {long: string, narrow: string}[];\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._init();\n  }\n/**\n * Handles when a new date is selected.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: number) {\n    if (this._selectedDate == date) {\n      return;\n    }\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate),\n        date));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n  }\n/**\n * Creates MdCalendarCells for the dates in this month.\n * @return {?}\n */\nprivate _createWeekCells() {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let /** @type {?} */ date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let /** @type {?} */ enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n/**\n * Gets the date in this month that the given Date falls on.\n * Returns null if the given Date is in another month.\n * @param {?} date\n * @return {?}\n */\nprivate _getDateInCurrentMonth(date: D): number | null {\n    return this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n/**\n * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n * @param {?} d1\n * @param {?} d2\n * @return {?}\n */\nprivate _hasSameMonthAndYear(d1: D, d2: D): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-month-view',\n  templateUrl: 'month-view.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdMonthView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMonthView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMonthView.ctorParameters;\n/** @type {?} */\nMdMonthView.propDecorators;\n/** @type {?} */\nMdMonthView.prototype._activeDate;\n/** @type {?} */\nMdMonthView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdMonthView.prototype.dateFilter;\n/**\n * Emits when a new date is selected.\n * @type {?}\n */\nMdMonthView.prototype.selectedChange;\n/**\n * The label for this month (e.g. \"January 2017\").\n * @type {?}\n */\nMdMonthView.prototype._monthLabel;\n/**\n * Grid of calendar cells representing the dates of the month.\n * @type {?}\n */\nMdMonthView.prototype._weeks;\n/**\n * The number of blank cells in the first row before the 1st of the month.\n * @type {?}\n */\nMdMonthView.prototype._firstWeekOffset;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n * @type {?}\n */\nMdMonthView.prototype._selectedDate;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n * @type {?}\n */\nMdMonthView.prototype._todayDate;\n/**\n * The names of the weekdays.\n * @type {?}\n */\nMdMonthView.prototype._weekdays;\n/** @type {?} */\nMdMonthView.prototype._dateAdapter;\n/** @type {?} */\nMdMonthView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n/**\n * Datepicker data that requires internationalization.\n */\nexport class MdDatepickerIntl {\n/**\n * A label for the calendar popup (used by screen readers).\n */\ncalendarLabel = 'Calendar';\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n */\nopenCalendarLabel = 'Open calendar';\n/**\n * A label for the previous month button (used by screen readers).\n */\nprevMonthLabel = 'Previous month';\n/**\n * A label for the next month button (used by screen readers).\n */\nnextMonthLabel = 'Next month';\n/**\n * A label for the previous year button (used by screen readers).\n */\nprevYearLabel = 'Previous year';\n/**\n * A label for the next year button (used by screen readers).\n */\nnextYearLabel = 'Next year';\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n */\nswitchToMonthViewLabel = 'Change to month view';\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n */\nswitchToYearViewLabel = 'Change to year view';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerIntl.ctorParameters;\n/**\n * A label for the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.calendarLabel;\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.openCalendarLabel;\n/**\n * A label for the previous month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevMonthLabel;\n/**\n * A label for the next month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextMonthLabel;\n/**\n * A label for the previous year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevYearLabel;\n/**\n * A label for the next year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextYearLabel;\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToMonthViewLabel;\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToYearViewLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  NgZone,\n  Inject,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Overlay} from '../core/overlay/overlay';\nimport {OverlayRef} from '../core/overlay/overlay-ref';\nimport {ComponentPortal} from '../core/portal/portal';\nimport {OverlayState} from '../core/overlay/overlay-state';\nimport {Directionality} from '../core/bidi/index';\nimport {MdDialog} from '../dialog/dialog';\nimport {MdDialogRef} from '../dialog/dialog-ref';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {MdDatepickerInput} from './datepicker-input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdDialogConfig} from '../dialog/dialog-config';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {MdCalendar} from './calendar';\nimport {first} from '../core/rxjs/index';\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nlet datepickerUid = 0;\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MdCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n */\nexport class MdDatepickerContent<D> implements AfterContentInit {\n  datepicker: MdDatepicker<D>;\n\n   _calendar: MdCalendar<D>;\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n/**\n * Handles keydown event on datepicker content.\n * @param {?} event The event.\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE) {\n      this.datepicker.close();\n      event.preventDefault();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_calendar': [{ type: ViewChild, args: [MdCalendar, ] },],\n};\n}\n\nfunction MdDatepickerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerContent.ctorParameters;\n/** @type {?} */\nMdDatepickerContent.propDecorators;\n/** @type {?} */\nMdDatepickerContent.prototype.datepicker;\n/** @type {?} */\nMdDatepickerContent.prototype._calendar;\n}\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\nexport class MdDatepicker<D> implements OnDestroy {\n/**\n * The date to open the calendar to initially.\n * @return {?}\n */\nget startAt(): D {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nset startAt(date: D) { this._startAt = date; }\nprivate _startAt: D;\n/**\n * The view that the calendar should start in.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n */\ntouchUi = false;\n/**\n * Emits new selected date when selected date changes.\n */\nselectedChanged = new EventEmitter<D>();\n/**\n * Whether the calendar is open.\n */\nopened = false;\n/**\n * The id for the datepicker calendar.\n */\nid = `md-datepicker-${datepickerUid++}`;\n/**\n * The currently selected date.\n */\n_selected: D | null = null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget _minDate(): D {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget _maxDate(): D {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n/**\n * @return {?}\n */\nget _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n */\nprivate _popupRef: OverlayRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n */\nprivate _dialogRef: MdDialogRef<any> | null;\n/**\n * A portal containing the calendar for this datepicker.\n */\nprivate _calendarPortal: ComponentPortal<MdDatepickerContent<D>>;\n/**\n * The input element this datepicker is associated with.\n */\nprivate _datepickerInput: MdDatepickerInput<D>;\n/**\n * The element that was focused before the datepicker was opened.\n */\nprivate _focusedElementBeforeOpen: HTMLElement | null = null;\nprivate _inputSubscription: Subscription;\n/**\n * @param {?} _dialog\n * @param {?} _overlay\n * @param {?} _ngZone\n * @param {?} _viewContainerRef\n * @param {?} _dateAdapter\n * @param {?} _dir\n * @param {?} _document\n */\nconstructor(private _dialog: MdDialog,\nprivate _overlay: Overlay,\nprivate _ngZone: NgZone,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dir: Directionality,\nprivate _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.close();\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n    if (this._inputSubscription) {\n      this._inputSubscription.unsubscribe();\n    }\n  }\n/**\n * Selects the given date and closes the currently open popup or dialog.\n * @param {?} date\n * @return {?}\n */\n_selectAndClose(date: D): void {\n    let /** @type {?} */ oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n    this.close();\n  }\n/**\n * Register an input with this datepicker.\n * @param {?} input The datepicker input to register with this datepicker.\n * @return {?}\n */\n_registerInput(input: MdDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('An MdDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D) => this._selected = value);\n  }\n/**\n * Open the calendar.\n * @return {?}\n */\nopen(): void {\n    if (this.opened) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MdDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this.opened = true;\n  }\n/**\n * Close the calendar.\n * @return {?}\n */\nclose(): void {\n    if (!this.opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n    if (this._focusedElementBeforeOpen && 'focus' in this._focusedElementBeforeOpen) {\n      this._focusedElementBeforeOpen.focus();\n      this._focusedElementBeforeOpen = null;\n    }\n\n    this.opened = false;\n  }\n/**\n * Open the calendar as a dialog.\n * @return {?}\n */\nprivate _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MdDatepickerContent, {\n      viewContainerRef: this._viewContainerRef,\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n/**\n * Open the calendar as a popup.\n * @return {?}\n */\nprivate _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MdDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let /** @type {?} */ componentRef: ComponentRef<MdDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      first.call(this._ngZone.onStable).subscribe(() => this._popupRef.updatePosition());\n    }\n\n    this._popupRef.backdropClick().subscribe(() => this.close());\n  }\n/**\n * Create the popup.\n * @return {?}\n */\nprivate _createPopup(): void {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._createPopupPositionStrategy();\n    overlayState.hasBackdrop = true;\n    overlayState.backdropClass = 'md-overlay-transparent-backdrop';\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n\n    this._popupRef = this._overlay.create(overlayState);\n  }\n/**\n * Create the popup PositionStrategy.\n * @return {?}\n */\nprivate _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'start', originY: 'top' },\n        { overlayX: 'start', overlayY: 'bottom' }\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'end', originY: 'top' },\n        { overlayX: 'end', overlayY: 'bottom' }\n      );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker, mat-datepicker',\n  template: '',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n{type: Overlay, },\n{type: NgZone, },\n{type: ViewContainerRef, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'touchUi': [{ type: Input },],\n'selectedChanged': [{ type: Output },],\n};\n}\n\nfunction MdDatepicker_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepicker.ctorParameters;\n/** @type {?} */\nMdDatepicker.propDecorators;\n/** @type {?} */\nMdDatepicker.prototype._startAt;\n/**\n * The view that the calendar should start in.\n * @type {?}\n */\nMdDatepicker.prototype.startView;\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n * @type {?}\n */\nMdDatepicker.prototype.touchUi;\n/**\n * Emits new selected date when selected date changes.\n * @type {?}\n */\nMdDatepicker.prototype.selectedChanged;\n/**\n * Whether the calendar is open.\n * @type {?}\n */\nMdDatepicker.prototype.opened;\n/**\n * The id for the datepicker calendar.\n * @type {?}\n */\nMdDatepicker.prototype.id;\n/**\n * The currently selected date.\n * @type {?}\n */\nMdDatepicker.prototype._selected;\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n * @type {?}\n */\nMdDatepicker.prototype._popupRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n * @type {?}\n */\nMdDatepicker.prototype._dialogRef;\n/**\n * A portal containing the calendar for this datepicker.\n * @type {?}\n */\nMdDatepicker.prototype._calendarPortal;\n/**\n * The input element this datepicker is associated with.\n * @type {?}\n */\nMdDatepicker.prototype._datepickerInput;\n/**\n * The element that was focused before the datepicker was opened.\n * @type {?}\n */\nMdDatepicker.prototype._focusedElementBeforeOpen;\n/** @type {?} */\nMdDatepicker.prototype._inputSubscription;\n/** @type {?} */\nMdDatepicker.prototype._dialog;\n/** @type {?} */\nMdDatepicker.prototype._overlay;\n/** @type {?} */\nMdDatepicker.prototype._ngZone;\n/** @type {?} */\nMdDatepicker.prototype._viewContainerRef;\n/** @type {?} */\nMdDatepicker.prototype._dateAdapter;\n/** @type {?} */\nMdDatepicker.prototype._dir;\n/** @type {?} */\nMdDatepicker.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Renderer2\n} from '@angular/core';\nimport {MdDatepicker} from './datepicker';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdInputContainer} from '../input/input-container';\nimport {DOWN_ARROW} from '../core/keyboard/keycodes';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n/**\n * Directive used to connect an input to a MdDatepicker.\n */\nexport class MdDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n/**\n * The datepicker that this input is associated with.\n * @param {?} value\n * @return {?}\n */\nset mdDatepicker(value: MdDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n  _datepicker: MdDatepicker<D>;\n/**\n * @param {?} value\n * @return {?}\n */\nset matDatepicker(value: MdDatepicker<D>) { this.mdDatepicker = value; }\n/**\n * @param {?} filter\n * @return {?}\n */\nset mdDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n/**\n * @param {?} filter\n * @return {?}\n */\nset matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this.mdDatepickerFilter = filter;\n  }\n/**\n * The value of the input.\n * @return {?}\n */\nget value(): D | null {\n    return this._dateAdapter.parse(this._elementRef.nativeElement.value,\n        this._dateFormats.parse.dateInput);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: D | null) {\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    let /** @type {?} */ oldDate = this.value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value',\n        date ? this._dateAdapter.format(date, this._dateFormats.display.dateInput) : '');\n    if (!this._dateAdapter.sameDate(oldDate, date)) {\n      this._valueChange.emit(date);\n    }\n  }\n/**\n * The minimum valid date.\n * @return {?}\n */\nget min(): D { return this._min; }\n/**\n * @param {?} value\n * @return {?}\n */\nset min(value: D) {\n    this._min = value;\n    this._validatorOnChange();\n  }\nprivate _min: D;\n/**\n * The maximum valid date.\n * @return {?}\n */\nget max(): D { return this._max; }\n/**\n * @param {?} value\n * @return {?}\n */\nset max(value: D) {\n    this._max = value;\n    this._validatorOnChange();\n  }\nprivate _max: D;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n */\n_valueChange = new EventEmitter<D|null>();\n\n  _onTouched = () => {};\nprivate _cvaOnChange: (value: any) => void = () => {};\nprivate _validatorOnChange = () => {};\nprivate _datepickerSubscription: Subscription;\n/**\n * The form control validator for the min date.\n */\nprivate _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return (!this.min || !control.value ||\n        this._dateAdapter.compareDate(this.min, control.value) <= 0) ?\n        null : {'mdDatepickerMin': {'min': this.min, 'actual': control.value}};\n  }\n/**\n * The form control validator for the max date.\n */\nprivate _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return (!this.max || !control.value ||\n        this._dateAdapter.compareDate(this.max, control.value) >= 0) ?\n        null : {'mdDatepickerMax': {'max': this.max, 'actual': control.value}};\n  }\n/**\n * The form control validator for the date filter.\n */\nprivate _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return !this._dateFilter || !control.value || this._dateFilter(control.value) ?\n        null : {'mdDatepickerFilter': true};\n  }\n/**\n * The combined form control validator for this input.\n */\nprivate _validator: ValidatorFn | null =\n      Validators.compose([this._minValidator, this._maxValidator, this._filterValidator]);\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} _mdInputContainer\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\nprivate _mdInputContainer: MdInputContainer) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n          });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._datepickerSubscription) {\n      this._datepickerSubscription.unsubscribe();\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n/**\n * Gets the element that the datepicker popup should be connected to.\n * @return {?} The element to connect the popup to.\n */\ngetPopupConnectionElementRef(): ElementRef {\n    return this._mdInputContainer ? this._mdInputContainer.underlineRef : this._elementRef;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: D): void {\n    this.value = value;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\n_onInput(value: string) {\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdDatepicker], input[matDatepicker]',\n  providers: [MD_DATEPICKER_VALUE_ACCESSOR, MD_DATEPICKER_VALIDATORS],\n  host: {\n    '[attr.aria-expanded]': '_datepicker?.opened || \"false\"',\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '_datepicker?.id',\n    '[attr.min]': 'min ? _dateAdapter.getISODateString(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.getISODateString(max) : null',\n    '(input)': '_onInput($event.target.value)',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: MdInputContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mdDatepicker': [{ type: Input },],\n'matDatepicker': [{ type: Input },],\n'mdDatepickerFilter': [{ type: Input },],\n'matDatepickerFilter': [{ type: Input },],\n'value': [{ type: Input },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n};\n}\n\nfunction MdDatepickerInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerInput.ctorParameters;\n/** @type {?} */\nMdDatepickerInput.propDecorators;\n/** @type {?} */\nMdDatepickerInput.prototype._datepicker;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFilter;\n/** @type {?} */\nMdDatepickerInput.prototype._min;\n/** @type {?} */\nMdDatepickerInput.prototype._max;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n * @type {?}\n */\nMdDatepickerInput.prototype._valueChange;\n/** @type {?} */\nMdDatepickerInput.prototype._onTouched;\n/** @type {?} */\nMdDatepickerInput.prototype._cvaOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._validatorOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._datepickerSubscription;\n/**\n * The form control validator for the min date.\n * @type {?}\n */\nMdDatepickerInput.prototype._minValidator;\n/**\n * The form control validator for the max date.\n * @type {?}\n */\nMdDatepickerInput.prototype._maxValidator;\n/**\n * The form control validator for the date filter.\n * @type {?}\n */\nMdDatepickerInput.prototype._filterValidator;\n/**\n * The combined form control validator for this input.\n * @type {?}\n */\nMdDatepickerInput.prototype._validator;\n/** @type {?} */\nMdDatepickerInput.prototype._elementRef;\n/** @type {?} */\nMdDatepickerInput.prototype._renderer;\n/** @type {?} */\nMdDatepickerInput.prototype._dateAdapter;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFormats;\n/** @type {?} */\nMdDatepickerInput.prototype._mdInputContainer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {MdDatepicker} from './datepicker';\nimport {MdDatepickerIntl} from './datepicker-intl';\nexport class MdDatepickerToggle<D> {\n/**\n * Datepicker instance that the button will toggle.\n */\ndatepicker: MdDatepicker<D>;\n/**\n * @return {?}\n */\nget _datepicker() { return this.datepicker; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _datepicker(v: MdDatepicker<D>) { this.datepicker = v; }\n/**\n * @param {?} _intl\n */\nconstructor(public _intl: MdDatepickerIntl) {}\n/**\n * @param {?} event\n * @return {?}\n */\n_open(event: Event): void {\n    if (this.datepicker) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'button[mdDatepickerToggle], button[matDatepickerToggle]',\n  template: '',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'type': 'button',\n    'class': 'mat-datepicker-toggle',\n    '[attr.aria-label]': '_intl.openCalendarLabel',\n    '(click)': '_open($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDatepickerIntl, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'datepicker': [{ type: Input, args: ['mdDatepickerToggle', ] },],\n'_datepicker': [{ type: Input, args: ['matDatepickerToggle', ] },],\n};\n}\n\nfunction MdDatepickerToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerToggle.ctorParameters;\n/** @type {?} */\nMdDatepickerToggle.propDecorators;\n/**\n * Datepicker instance that the button will toggle.\n * @type {?}\n */\nMdDatepickerToggle.prototype.datepicker;\n/** @type {?} */\nMdDatepickerToggle.prototype._intl;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk';\n\n/** MdAccordion's display modes. */\nexport type MdAccordionDisplayMode = 'default' | 'flat';\n/**\n * Unique ID counter\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nexport class CdkAccordion {\n/**\n * A readonly id value to use for unique selection coordination.\n */\nreadonly id = `cdk-accordion-${nextId++}`;\n/**\n * Whether the accordion should allow multiple expanded accordion items simulateously.\n * @return {?}\n */\nget multi(): boolean { return this._multi; }\n/**\n * @param {?} multi\n * @return {?}\n */\nset multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\nprivate  _multi: boolean = false;\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\nget hideToggle(): boolean { return this._hideToggle; }\n/**\n * @param {?} show\n * @return {?}\n */\nset hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\nprivate  _hideToggle: boolean = false;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n */\ndisplayMode: MdAccordionDisplayMode = 'default';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-accordion]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multi': [{ type: Input },],\n'hideToggle': [{ type: Input },],\n'displayMode': [{ type: Input },],\n};\n}\n\nfunction CdkAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkAccordion.ctorParameters;\n/** @type {?} */\nCdkAccordion.propDecorators;\n/**\n * A readonly id value to use for unique selection coordination.\n * @type {?}\n */\nCdkAccordion.prototype.id;\n/** @type {?} */\nCdkAccordion.prototype._multi;\n/** @type {?} */\nCdkAccordion.prototype._hideToggle;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n * @type {?}\n */\nCdkAccordion.prototype.displayMode;\n}\n\n/**\n * Directive for a Material Design Accordion.\n */\nexport class MdAccordion extends CdkAccordion {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-accordion, md-accordion',\n  host: {\n    class: 'mat-accordion'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAccordion.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdMonthView} from './month-view';\nimport {CommonModule} from '@angular/common';\nimport {StyleModule, OverlayModule, A11yModule} from '../core';\nimport {MdCalendarBody} from './calendar-body';\nimport {MdYearView} from './year-view';\nimport {MdDatepicker, MdDatepickerContent} from './datepicker';\nimport {MdDatepickerInput} from './datepicker-input';\nimport {MdDialogModule} from '../dialog/index';\nimport {MdCalendar} from './calendar';\nimport {MdDatepickerToggle} from './datepicker-toggle';\nimport {MdButtonModule} from '../button/index';\nimport {MdDatepickerIntl} from './datepicker-intl';\n\n\nexport {MdCalendar} from './calendar';\nexport {MdCalendarCell,MdCalendarBody} from './calendar-body';\nexport {MdDatepickerContent,MdDatepicker} from './datepicker';\nexport {MD_DATEPICKER_VALUE_ACCESSOR,MD_DATEPICKER_VALIDATORS,MdDatepickerInput} from './datepicker-input';\nexport {MdDatepickerIntl} from './datepicker-intl';\nexport {MdDatepickerToggle} from './datepicker-toggle';\nexport {MdMonthView} from './month-view';\nexport {MdYearView} from './year-view';\nexport class MdDatepickerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdButtonModule,\n    MdDialogModule,\n    OverlayModule,\n    StyleModule,\n    A11yModule,\n  ],\n  exports: [\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n  ],\n  declarations: [\n    MdCalendar,\n    MdCalendarBody,\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n    MdMonthView,\n    MdYearView,\n  ],\n  providers: [\n    MdDatepickerIntl,\n  ],\n  entryComponents: [\n    MdDatepickerContent,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Output, EventEmitter, Input, Injectable, OnDestroy, Optional} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '../core';\nimport {CdkAccordion} from './accordion';\n/**\n * Used to generate unique ID for each expansion panel.\n */\nlet nextId = 0;\n/**\n * An abstract class to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nexport class AccordionItem implements OnDestroy {\n/**\n * Event emitted every time the MdAccordianChild is closed.\n */\nclosed = new EventEmitter<void>();\n/**\n * Event emitted every time the MdAccordianChild is opened.\n */\nopened = new EventEmitter<void>();\n/**\n * Event emitted when the MdAccordianChild is destroyed.\n */\ndestroyed = new EventEmitter<void>();\n/**\n * The unique MdAccordianChild id.\n */\nreadonly id = `cdk-accordion-child-${nextId++}`;\n/**\n * Whether the MdAccordianChild is expanded.\n * @return {?}\n */\nget expanded(): boolean { return this._expanded; }\n/**\n * @param {?} expanded\n * @return {?}\n */\nset expanded(expanded: boolean) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      if (expanded) {\n        this.opened.emit();\n/**\n * In the unique selection dispatcher, the id parameter is the id of the CdkAccordonItem,\n * the name value is the id of the accordion.\n */\nlet accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n    }\n  }\nprivate _expanded: boolean;\n/**\n * Unregister function for _expansionDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * @param {?} accordion\n * @param {?} _expansionDispatcher\n */\nconstructor(\npublic accordion: CdkAccordion,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n     this._removeUniqueSelectionListener =\n       _expansionDispatcher.listen((id: string, accordionId: string) => {\n         if (this.accordion && !this.accordion.multi &&\n             this.accordion.id === accordionId && this.id !== id) {\n           this.expanded = false;\n         }\n       });\n    }\n/**\n * Emits an event for the accordion item being destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this.destroyed.emit();\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Toggles the expanded state of the accordion item.\n * @return {?}\n */\ntoggle(): void {\n    this.expanded = !this.expanded;\n  }\n/**\n * Sets the expanded state of the accordion item to false.\n * @return {?}\n */\nclose(): void {\n    this.expanded = false;\n  }\n/**\n * Sets the expanded state of the accordion item to true.\n * @return {?}\n */\nopen(): void {\n    this.expanded = true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkAccordion, decorators: [{ type: Optional }, ]},\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'closed': [{ type: Output },],\n'opened': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'expanded': [{ type: Input },],\n};\n}\n\nfunction AccordionItem_tsickle_Closure_declarations() {\n/** @type {?} */\nAccordionItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccordionItem.ctorParameters;\n/** @type {?} */\nAccordionItem.propDecorators;\n/**\n * Event emitted every time the MdAccordianChild is closed.\n * @type {?}\n */\nAccordionItem.prototype.closed;\n/**\n * Event emitted every time the MdAccordianChild is opened.\n * @type {?}\n */\nAccordionItem.prototype.opened;\n/**\n * Event emitted when the MdAccordianChild is destroyed.\n * @type {?}\n */\nAccordionItem.prototype.destroyed;\n/**\n * The unique MdAccordianChild id.\n * @type {?}\n */\nAccordionItem.prototype.id;\n/** @type {?} */\nAccordionItem.prototype._expanded;\n/**\n * Unregister function for _expansionDispatcher *\n * @type {?}\n */\nAccordionItem.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nAccordionItem.prototype.accordion;\n/** @type {?} */\nAccordionItem.prototype._expansionDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Host,\n  Input,\n  ViewEncapsulation,\n  Optional,\n  forwardRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {MdAccordion, MdAccordionDisplayMode} from './accordion';\nimport {AccordionItem} from './accordion-item';\nimport {UniqueSelectionDispatcher} from '../core';\n\n\n/** MdExpansionPanel's states. */\nexport type MdExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * Time and timing curve for expansion panel animations.\n */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * <md-expansion-panel> component.\n * \n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the CdkAccordion directive attached.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanel extends AccordionItem {\n/**\n * Whether the toggle indicator should be hidden.\n */\nhideToggle: boolean = false;\n/**\n * @param {?} accordion\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(  accordion: MdAccordion,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n/**\n * Gets the panel's display mode.\n * @return {?}\n */\n_getDisplayMode(): MdAccordionDisplayMode | MdExpansionPanelState {\n    if (!this.expanded) {\n      return this._getExpandedState();\n    }\n    if (this.accordion) {\n      return this.accordion.displayMode;\n    }\n    return this._getExpandedState();\n  }\n/**\n * Gets the expanded state string.\n * @return {?}\n */\n_getExpandedState(): MdExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'md-expansion-panel, mat-expansion-panel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[@displayMode]': '_getDisplayMode()',\n  },\n  providers: [\n    {provide: AccordionItem, useExisting: forwardRef(() => MdExpansionPanel)}\n  ],\n  animations: [\n    trigger('bodyExpansion', [\n      state('collapsed', style({height: '0px'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('displayMode', [\n      state('collapsed', style({margin: '0'})),\n      state('default', style({margin: '16px 0'})),\n      state('flat', style({margin: '0'})),\n      transition('flat <=> collapsed, default <=> collapsed, flat <=> default',\n                 animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdAccordion, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'hideToggle': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanel.ctorParameters;\n/** @type {?} */\nMdExpansionPanel.propDecorators;\n/**\n * Whether the toggle indicator should be hidden.\n * @type {?}\n */\nMdExpansionPanel.prototype.hideToggle;\n}\n\nexport class MdExpansionPanelActionRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-action-row, md-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelActionRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelActionRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelActionRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Input,\n  ElementRef,\n  ViewContainerRef,\n  NgZone,\n  Optional,\n  OnDestroy,\n  Renderer2,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  style,\n  trigger,\n  state,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  Overlay,\n  OverlayState,\n  OverlayRef,\n  ComponentPortal,\n  OverlayConnectionPosition,\n  OriginConnectionPosition,\n} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Directionality} from '../core/bidi/index';\nimport {Platform} from '../core/platform/index';\nimport {first} from '../core/rxjs/index';\nimport {ScrollDispatcher} from '../core/overlay/scroll/scroll-dispatcher';\nimport {coerceBooleanProperty} from '@angular/cdk';\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/**\n * Time in ms to delay before changing the tooltip visibility to hidden\n */\nexport const TOUCHEND_HIDE_DELAY = 1500;\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\nexport const SCROLL_THROTTLE_MS = 20;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @param {?} position\n * @return {?}\n */\nexport function getMdTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n * \n * https://material.google.com/components/tooltips.html\n */\nexport class MdTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\nprivate _position: TooltipPosition = 'below';\nprivate _disabled: boolean = false;\nprivate _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * Allows the user to define the position of the tooltip relative to the parent element\n * @return {?}\n */\nget position(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n/**\n * Disables the display of the tooltip.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _positionDeprecated(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _positionDeprecated(value: TooltipPosition) { this._position = value; }\n/**\n * The default delay in ms before showing the tooltip after show is called\n */\nshowDelay = 0;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n */\nhideDelay = 0;\nprivate _message: string;\n/**\n * The message to be displayed in the tooltip\n * @return {?}\n */\nget message() { return this._message; }\n/**\n * @param {?} value\n * @return {?}\n */\nset message(value: string) {\n    this._message = value;\n    this._setTooltipMessage(this._message);\n  }\n/**\n * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n * @return {?}\n */\nget tooltipClass() { return this._tooltipClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMessage(): string { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMessage(v: string) { this.message = v; }\n/**\n * @return {?}\n */\nget _matMessage() { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMessage(v) { this.message = v; }\n/**\n * @return {?}\n */\nget _matPosition() { return this.position; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matPosition(v) { this.position = v; }\n/**\n * @return {?}\n */\nget _matDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matHideDelay() { return this.hideDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matHideDelay(v) { this.hideDelay = v; }\n/**\n * @return {?}\n */\nget _matShowDelay() { return this.showDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matShowDelay(v) { this.showDelay = v; }\n/**\n * @return {?}\n */\nget _matClass() { return this.tooltipClass; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matClass(v) { this.tooltipClass = v; }\n/**\n * @param {?} _overlay\n * @param {?} _elementRef\n * @param {?} _scrollDispatcher\n * @param {?} _viewContainerRef\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _elementRef: ElementRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _platform: Platform,\nprivate _dir: Directionality) {\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      _renderer.listen(_elementRef.nativeElement, 'mouseenter', () => this.show());\n      _renderer.listen(_elementRef.nativeElement, 'mouseleave', () => this.hide());\n    }\n  }\n/**\n * Dispose the tooltip when destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n  }\n/**\n * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nshow(delay: number = this.showDelay): void {\n    if (this.disabled || !this._message || !this._message.trim()) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._setTooltipMessage(this._message); /** @type {?} */((\n    this._tooltipInstance)).show(this._position, delay);\n  }\n/**\n * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nhide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n/**\n * Shows/hides the tooltip\n * @return {?}\n */\ntoggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n/**\n * Returns true if the tooltip is currently visible to the user\n * @return {?}\n */\n_isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n/**\n * Create the tooltip to display\n * @return {?}\n */\nprivate _createTooltip(): void {\n    let /** @type {?} */ overlayRef = this._createOverlay();\n    let /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance; /** @type {?} */((\n\n    // Dispose the overlay when finished the shown tooltip.\n    this._tooltipInstance)).afterHidden().subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n/**\n * Create the overlay config and position strategy\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    let /** @type {?} */ origin = this._getOrigin();\n    let /** @type {?} */ position = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    // After position changes occur and the overlay is clipped by a parent scrollable then\n    // close the tooltip.\n    let /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n    strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n    strategy.onPositionChange.subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped &&\n          this._tooltipInstance && this._tooltipInstance.isVisible()) {\n        this.hide(0);\n      }\n    });\n\n    let /** @type {?} */ config = new OverlayState();\n\n    config.direction = this._dir ? this._dir.value : 'ltr';\n    config.positionStrategy = strategy;\n    config.scrollStrategy = this._overlay.scrollStrategies.reposition({\n      scrollThrottle: SCROLL_THROTTLE_MS\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n/**\n * Disposes the current tooltip and the overlay it is attached to\n * @return {?}\n */\nprivate _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n/**\n * Returns the origin position based on the user's position preference\n * @return {?}\n */\n_getOrigin(): OriginConnectionPosition {\n    if (this.position == 'above' || this.position == 'below') {\n      return {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    }\n\n    const /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isDirectionLtr ||\n        this.position == 'after' && !isDirectionLtr) {\n      return {originX: 'start', originY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isDirectionLtr ||\n        this.position == 'before' && !isDirectionLtr) {\n      return {originX: 'end', originY: 'center'};\n    }\n\n    throw getMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Returns the overlay position based on the user's preference\n * @return {?}\n */\n_getOverlayPosition(): OverlayConnectionPosition {\n    if (this.position == 'above') {\n      return {overlayX: 'center', overlayY: 'bottom'};\n    }\n\n    if (this.position == 'below') {\n      return {overlayX: 'center', overlayY: 'top'};\n    }\n\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isLtr ||\n        this.position == 'after' && !isLtr) {\n      return {overlayX: 'end', overlayY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isLtr ||\n        this.position == 'before' && !isLtr) {\n      return {overlayX: 'start', overlayY: 'center'};\n    }\n\n    throw getMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Updates the tooltip message and repositions the overlay according to the new message length\n * @param {?} message\n * @return {?}\n */\nprivate _setTooltipMessage(message: string) {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = message;\n      this._tooltipInstance._markForCheck();\n\n      first.call(this._ngZone.onMicrotaskEmpty).subscribe(() => {\n        if (this._tooltipInstance) { /** @type {?} */((\n          this._overlayRef)).updatePosition();\n        }\n      });\n    }\n  }\n/**\n * Updates the tooltip class\n * @param {?} tooltipClass\n * @return {?}\n */\nprivate _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',\n  host: {\n    '(longpress)': 'show()',\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n  },\n  exportAs: 'mdTooltip',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: Renderer2, },\n{type: Platform, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input, args: ['mdTooltipPosition', ] },],\n'disabled': [{ type: Input, args: ['mdTooltipDisabled', ] },],\n'_positionDeprecated': [{ type: Input, args: ['tooltip-position', ] },],\n'showDelay': [{ type: Input, args: ['mdTooltipShowDelay', ] },],\n'hideDelay': [{ type: Input, args: ['mdTooltipHideDelay', ] },],\n'message': [{ type: Input, args: ['mdTooltip', ] },],\n'tooltipClass': [{ type: Input, args: ['mdTooltipClass', ] },],\n'_deprecatedMessage': [{ type: Input, args: ['md-tooltip', ] },],\n'_matMessage': [{ type: Input, args: ['matTooltip', ] },],\n'_matPosition': [{ type: Input, args: ['matTooltipPosition', ] },],\n'_matDisabled': [{ type: Input, args: ['matTooltipDisabled', ] },],\n'_matHideDelay': [{ type: Input, args: ['matTooltipHideDelay', ] },],\n'_matShowDelay': [{ type: Input, args: ['matTooltipShowDelay', ] },],\n'_matClass': [{ type: Input, args: ['matTooltipClass', ] },],\n};\n}\n\nfunction MdTooltip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltip.ctorParameters;\n/** @type {?} */\nMdTooltip.propDecorators;\n/** @type {?} */\nMdTooltip.prototype._overlayRef;\n/** @type {?} */\nMdTooltip.prototype._tooltipInstance;\n/** @type {?} */\nMdTooltip.prototype._position;\n/** @type {?} */\nMdTooltip.prototype._disabled;\n/** @type {?} */\nMdTooltip.prototype._tooltipClass;\n/**\n * The default delay in ms before showing the tooltip after show is called\n * @type {?}\n */\nMdTooltip.prototype.showDelay;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n * @type {?}\n */\nMdTooltip.prototype.hideDelay;\n/** @type {?} */\nMdTooltip.prototype._message;\n/** @type {?} */\nMdTooltip.prototype._overlay;\n/** @type {?} */\nMdTooltip.prototype._elementRef;\n/** @type {?} */\nMdTooltip.prototype._scrollDispatcher;\n/** @type {?} */\nMdTooltip.prototype._viewContainerRef;\n/** @type {?} */\nMdTooltip.prototype._ngZone;\n/** @type {?} */\nMdTooltip.prototype._renderer;\n/** @type {?} */\nMdTooltip.prototype._platform;\n/** @type {?} */\nMdTooltip.prototype._dir;\n}\n\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nexport class TooltipComponent {\n/**\n * Message to display in the tooltip\n */\nmessage: string;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n */\ntooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * The timeout ID of any current timer set to show the tooltip\n */\n_showTimeoutId: number;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n */\n_hideTimeoutId: number;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n */\n_visibility: TooltipVisibility = 'initial';\n/**\n * Whether interactions on the page should close the tooltip\n */\n_closeOnInteraction: boolean = false;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n */\n_transformOrigin: string = 'bottom';\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n */\nprivate _onHide: Subject<any> = new Subject();\n/**\n * @param {?} _dir\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * Shows the tooltip with an animation originating from the provided origin\n * @param {?} position Position of the tooltip.\n * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n * @return {?}\n */\nshow(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n\n    this._setTransformOrigin(position);\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // If this was set to true immediately, then a body click that triggers show() would\n      // trigger interaction and close the tooltip right after it was displayed.\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n      setTimeout(() => this._closeOnInteraction = true, 0);\n    }, delay);\n  }\n/**\n * Begins the animation to hide the tooltip after the provided delay in ms.\n * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n * @return {?}\n */\nhide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Returns an observable that notifies when the tooltip has been hidden from view\n * @return {?}\n */\nafterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n/**\n * Whether the tooltip is being displayed\n * @return {?}\n */\nisVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n/**\n * Sets the tooltip transform origin according to the tooltip position\n * @param {?} value\n * @return {?}\n */\n_setTransformOrigin(value: TooltipPosition) {\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    switch (value) {\n      case 'before': this._transformOrigin = isLtr ? 'right' : 'left'; break;\n      case 'after':  this._transformOrigin = isLtr ? 'left' : 'right'; break;\n      case 'left':   this._transformOrigin = 'right'; break;\n      case 'right':  this._transformOrigin = 'left'; break;\n      case 'above':  this._transformOrigin = 'bottom'; break;\n      case 'below':  this._transformOrigin = 'top'; break;\n      default: throw getMdTooltipInvalidPositionError(value);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_afterVisibilityAnimation(e: AnimationEvent): void {\n    if (e.toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n  }\n/**\n * Interactions on the HTML body should close the tooltip immediately as defined in the\n * material design spec.\n * https://material.google.com/components/tooltips.html#tooltips-interaction\n * @return {?}\n */\n_handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n/**\n * Marks that the tooltip needs to be checked in the next change detection run.\n * Mainly used for rendering the initial text before positioning a tooltip, which\n * can be problematic in components with OnPush change detection.\n * @return {?}\n */\n_markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tooltip-component, mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('state', [\n      state('void', style({transform: 'scale(0)'})),\n      state('initial', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      state('hidden', style({transform: 'scale(0)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TooltipComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipComponent.ctorParameters;\n/**\n * Message to display in the tooltip\n * @type {?}\n */\nTooltipComponent.prototype.message;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nTooltipComponent.prototype.tooltipClass;\n/**\n * The timeout ID of any current timer set to show the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._showTimeoutId;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._hideTimeoutId;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._visibility;\n/**\n * Whether interactions on the page should close the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._closeOnInteraction;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._transformOrigin;\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n * @type {?}\n */\nTooltipComponent.prototype._onHide;\n/** @type {?} */\nTooltipComponent.prototype._dir;\n/** @type {?} */\nTooltipComponent.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule, MdCommonModule} from '../core';\nimport {PlatformModule} from '../core/platform/index';\nimport {MdTooltip, TooltipComponent} from './tooltip';\nexport class MdTooltipModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdCommonModule,\n    PlatformModule\n  ],\n  exports: [MdTooltip, TooltipComponent, MdCommonModule],\n  declarations: [MdTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTooltipModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltipModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltipModule.ctorParameters;\n}\n\n\n\nexport {TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,getMdTooltipInvalidPositionError,MdTooltip,TooltipVisibility,TooltipComponent} from './tooltip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid md-menu instance\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuMissingError() {\n  throw Error(`md-menu-trigger: must pass in an md-menu instance.\n\n    Example:\n      <md-menu #menu=\"mdMenu\"></md-menu>\n      <button [mdMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <md-menu x-position=\"before\" #menu=\"mdMenu\"></md-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <md-menu y-position=\"above\" #menu=\"mdMenu\"></md-menu>`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ElementRef} from '@angular/core';\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdMenuItemBase {}\nexport const /** @type {?} */ _MdMenuItemMixinBase = mixinDisabled(MdMenuItemBase);\n/**\n * This directive is intended to be used inside an md-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport class MdMenuItem extends _MdMenuItemMixinBase implements Focusable, CanDisable {\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Focuses the menu item.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * Used to set the `tabindex`.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Returns the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n/**\n * Prevents the default element actions if it is disabled.\n * @param {?} event\n * @return {?}\n */\n_checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-menu-item], [mat-menu-item]',\n  inputs: ['disabled'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n  },\n  templateUrl: 'menu-item.html',\n  exportAs: 'mdMenuItem'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdMenuItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuItem.ctorParameters;\n/** @type {?} */\nMdMenuItem.prototype._elementRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Below are all the animations for the md-menu component.\n * Animation duration and timing values are based on AngularJS Material.\n */\n\n\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nexport const /** @type {?} */ transformMenu: AnimationTriggerMetadata = trigger('transformMenu', [\n  state('showing', style({\n    opacity: 1,\n    transform: `scale(1)`\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      transform: `scale(0)`\n    }),\n    animate(`200ms cubic-bezier(0.25, 0.8, 0.25, 1)`)\n  ]),\n  transition('* => void', [\n    animate('50ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nexport const fadeInItems: AnimationTriggerMetadata = trigger('fadeInItems', [\n  state('showing', style({opacity: 1})),\n  transition('void => *', [\n    style({opacity: 0}),\n    animate(`200ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)`)\n  ])\n]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ElementRef,\n} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMdMenuInvalidPositionX, throwMdMenuInvalidPositionY} from './menu-errors';\nimport {MdMenuItem} from './menu-item';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {MdMenuPanel} from './menu-panel';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformMenu, fadeInItems} from './menu-animations';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nexport class MdMenu implements AfterContentInit, MdMenuPanel, OnDestroy {\nprivate _keyManager: FocusKeyManager;\nprivate _xPosition: MenuPositionX = 'after';\nprivate _yPosition: MenuPositionY = 'below';\n/**\n * Subscription to tab events on the menu panel\n */\nprivate _tabSubscription: Subscription;\n/**\n * Config object to be passed into the menu's ngClass\n */\n_classList: any = {};\n/**\n * Position of the menu in the X axis.\n * @return {?}\n */\nget xPosition() { return this._xPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMdMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n/**\n * Position of the menu in the Y axis.\n * @return {?}\n */\nget yPosition() { return this._yPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMdMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n   templateRef: TemplateRef<any>;\n/**\n * List of the items inside of a menu.\n */\nitems: QueryList<MdMenuItem>;\n/**\n * Whether the menu should overlap its trigger.\n */\noverlapTrigger = true;\n/**\n * This method takes classes set on the host md-menu element and applies them on the\n * menu template that displays in the overlay container.  Otherwise, it's difficult\n * to style the containing menu from outside the component.\n * @param {?} classes list of class names\n * @return {?}\n */\nset classList(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n/**\n * Event emitted when the menu is closed.\n */\nclose = new EventEmitter<void>();\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.items).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this._emitCloseEvent());\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Handle a keyboard event from the menu, delegating to the appropriate action.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this._emitCloseEvent();\n        return;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Focus the first item in the menu. This method is used by the menu trigger\n * to focus the first item when the menu is opened by the ENTER key.\n * @return {?}\n */\nfocusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * This emits a close event to which the trigger is subscribed. When emitted, the\n * trigger will close the menu.\n * @return {?}\n */\n_emitCloseEvent(): void {\n    this.close.emit();\n  }\n/**\n * It's necessary to set position-based classes to ensure the menu panel animation\n * folds out from the correct direction.\n * @param {?=} posX\n * @param {?=} posY\n * @return {?}\n */\nsetPositionClasses(posX = this.xPosition, posY = this.yPosition): void {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-menu, mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    transformMenu,\n    fadeInItems\n  ],\n  exportAs: 'mdMenu'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'xPosition': [{ type: Input },],\n'yPosition': [{ type: Input },],\n'templateRef': [{ type: ViewChild, args: [TemplateRef, ] },],\n'items': [{ type: ContentChildren, args: [MdMenuItem, ] },],\n'overlapTrigger': [{ type: Input },],\n'classList': [{ type: Input, args: ['class', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction MdMenu_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenu.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenu.ctorParameters;\n/** @type {?} */\nMdMenu.propDecorators;\n/** @type {?} */\nMdMenu.prototype._keyManager;\n/** @type {?} */\nMdMenu.prototype._xPosition;\n/** @type {?} */\nMdMenu.prototype._yPosition;\n/**\n * Subscription to tab events on the menu panel\n * @type {?}\n */\nMdMenu.prototype._tabSubscription;\n/**\n * Config object to be passed into the menu's ngClass\n * @type {?}\n */\nMdMenu.prototype._classList;\n/** @type {?} */\nMdMenu.prototype.templateRef;\n/**\n * List of the items inside of a menu.\n * @type {?}\n */\nMdMenu.prototype.items;\n/**\n * Whether the menu should overlap its trigger.\n * @type {?}\n */\nMdMenu.prototype.overlapTrigger;\n/**\n * Event emitted when the menu is closed.\n * @type {?}\n */\nMdMenu.prototype.close;\n/** @type {?} */\nMdMenu.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef, GlobalPositionStrategy} from '../core';\nimport {AnimationEvent} from '@angular/animations';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogContainer} from './dialog-container';\nimport {filter} from '../core/rxjs/index';\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Whether the user is allowed to close the dialog.\n */\ndisableClose = this._containerInstance._config.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n */\nconstructor(private _overlayRef: OverlayRef,\nprivate _containerInstance: MdDialogContainer) {\n    filter.call(_containerInstance._onAnimationStateChange,\n      (event: AnimationEvent) => event.toState === 'exit')\n      .subscribe(() => this._overlayRef.dispose(), undefined, () => {\n        this._afterClosed.next(this._result);\n        this._afterClosed.complete();\n        this.componentInstance = null!;\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n    this._containerInstance._state = 'exit';\n    this._overlayRef.detachBackdrop(); // Transition the backdrop in parallel with the dialog.\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Whether the user is allowed to close the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule, MdCommonModule} from '../core';\nimport {MdMenu} from './menu-directive';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuTrigger} from './menu-trigger';\nimport {MdRippleModule} from '../core/ripple/index';\nexport class MdMenuModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n  ],\n  exports: [MdMenu, MdMenuItem, MdMenuTrigger, MdCommonModule],\n  declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuModule.ctorParameters;\n}\n\n\n\nexport {MdMenu,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY} from './menu';\nexport {fadeInItems, transformMenu} from './menu-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\n/**\n * Custom injector type specifically for instantiating components with a dialog.\n */\nexport class DialogInjector implements Injector {\n/**\n * @param {?} _parentInjector\n * @param {?} _customTokens\n */\nconstructor(\nprivate _parentInjector: Injector,\nprivate _customTokens: WeakMap<any, any>) { }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    const /** @type {?} */ value = this._customTokens.get(token);\n\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n\nfunction DialogInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogInjector.prototype._parentInjector;\n/** @type {?} */\nDialogInjector.prototype._customTokens;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '../core';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nexport class MdDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Custom class for the overlay pane.\n */\npanelClass?: string = '';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * Layout direction for the dialog's content.\n */\ndirection?: Direction = 'ltr';\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n\nfunction MdDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n * @type {?}\n */\nMdDialogConfig.prototype.viewContainerRef;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMdDialogConfig.prototype.role;\n/**\n * Custom class for the overlay pane.\n * @type {?}\n */\nMdDialogConfig.prototype.panelClass;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMdDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMdDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMdDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMdDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdDialogConfig.prototype.data;\n/**\n * Layout direction for the dialog's content.\n * @type {?}\n */\nMdDialogConfig.prototype.direction;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  animate,\n  trigger,\n  state,\n  style,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {BasePortalHost, ComponentPortal, PortalHostDirective, TemplatePortal} from '../core';\nimport {MdDialogConfig} from './dialog-config';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalHost without an origin.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n/**\n * Reference to the global document object.\n */\nprivate _document: Document;\n/**\n * The dialog configuration.\n */\n_config: MdDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits the current animation state whenever it changes.\n */\n_onAnimationStateChange = new EventEmitter<AnimationEvent>();\n/**\n * ID of the element that should be considered as the dialog's label.\n */\n_ariaLabelledBy: string | null = null;\n/**\n * @param {?} _ngZone\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _document\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\n      _document: any) {\n\n    super();\n    this._document = _document;\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n/**\n * Restores focus to the element that was focused before the dialog opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    const /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && 'focus' in toFocus) {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\n    }\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    this._onAnimationStateChange.emit(event);\n\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n      this._onAnimationStateChange.complete();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-dialog-container, mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('slideDialog', [\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n      // solves both issues.\n      state('enter', style({ transform: 'none', opacity: 1 })),\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    'class': 'mat-dialog-container',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_ariaLabelledBy',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * Reference to the global document object.\n * @type {?}\n */\nMdDialogContainer.prototype._document;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype._config;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits the current animation state whenever it changes.\n * @type {?}\n */\nMdDialogContainer.prototype._onAnimationStateChange;\n/**\n * ID of the element that should be considered as the dialog's label.\n * @type {?}\n */\nMdDialogContainer.prototype._ariaLabelledBy;\n/** @type {?} */\nMdDialogContainer.prototype._ngZone;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Injector,\n  InjectionToken,\n  ComponentRef,\n  Injectable,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  Overlay,\n  OverlayRef,\n  ComponentType,\n  OverlayState,\n  ComponentPortal,\n} from '../core';\nimport {extendObject} from '../core/util/object-extend';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {DialogInjector} from './dialog-injector';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\nimport {TemplatePortal} from '../core/portal/portal';\n\nexport const /** @type {?} */ MD_DIALOG_DATA = new InjectionToken<any>('MdDialogData');\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget _openDialogs(): MdDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog._openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Subject for notifying the user that a dialog has opened.\n * @return {?}\n */\nget _afterOpen(): Subject<MdDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog._afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * Subject for notifying the user that all open dialogs have finished closing.\n * @return {?}\n */\nget _afterAllClosed(): Subject<void> {\n    return this._parentDialog ?\n      this._parentDialog._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n/**\n * Gets an observable that is notified when a dialog has been opened.\n */\nafterOpen: Observable<MdDialogRef<any>> = this._afterOpen.asObservable();\n/**\n * Gets an observable that is notified when all open dialog have finished closing.\n */\nafterAllClosed: Observable<void> = this._afterAllClosed.asObservable();\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} _location\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\nprivate _location: Location,\nprivate _parentDialog: MdDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && _location) {\n      _location.subscribe(() => this.closeAll());\n    }\n  }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MdDialogConfig): MdDialogRef<T> {\n    config = _applyConfigDefaults(config);\n\n    let /** @type {?} */ overlayRef = this._createOverlay(config);\n    let /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    let /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this._openDialogs.length) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this._openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this._afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this._openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this._openDialogs[i].close();\n    }\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(config: MdDialogConfig): OverlayRef {\n    let /** @type {?} */ overlayState = this._getOverlayState(config);\n    return this._overlay.create(overlayState);\n  }\n/**\n * Creates an overlay state from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayState {\n    let /** @type {?} */ overlayState = new OverlayState();\n    overlayState.panelClass = dialogConfig.panelClass;\n    overlayState.hasBackdrop = dialogConfig.hasBackdrop;\n    overlayState.scrollStrategy = this._overlay.scrollStrategies.block();\n    overlayState.direction = dialogConfig.direction;\n    if (dialogConfig.backdropClass) {\n      overlayState.backdropClass = dialogConfig.backdropClass;\n    }\n    overlayState.positionStrategy = this._overlay.position().global();\n\n    return overlayState;\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MdDialogContainer,\n      overlayRef: OverlayRef,\n      config: MdDialogConfig): MdDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    let /** @type {?} */ dialogRef = new MdDialogRef<T>(overlayRef, dialogContainer);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, /** @type {?} */(( null))));\n    } else {\n      let /** @type {?} */ injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      let /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n/**\n * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n * of a dialog to close itself and, optionally, to return a value.\n * @template T\n * @param {?} config Config object that is used to construct the dialog.\n * @param {?} dialogRef Reference to the dialog.\n * @param {?} dialogContainer\n * @return {?} The custom injector that can be used inside the dialog.\n */\nprivate _createInjector<T>(\n      config: MdDialogConfig,\n      dialogRef: MdDialogRef<T>,\n      dialogContainer: MdDialogContainer): DialogInjector {\n\n    let /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    let /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MdDialogRef, dialogRef);\n    injectionTokens.set(MdDialogContainer, dialogContainer);\n    injectionTokens.set(MD_DIALOG_DATA, config.data);\n\n    return new DialogInjector(userInjector || this._injector, injectionTokens);\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\n    let /** @type {?} */ index = this._openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this._openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this._openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    let /** @type {?} */ topDialog = this._openDialogs[this._openDialogs.length - 1];\n    let /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\n\n    if (event.keyCode === ESCAPE && canClose) {\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Gets an observable that is notified when a dialog has been opened.\n * @type {?}\n */\nMdDialog.prototype.afterOpen;\n/**\n * Gets an observable that is notified when all open dialog have finished closing.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._location;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config?: MdDialogConfig): MdDialogConfig {\n  return extendObject(new MdDialogConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input, Optional, OnInit} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\n/**\n * Dialog close input for compatibility mode.\n * @param {?} value\n * @return {?}\n */\nset _matDialogClose(value: any) { this.dialogResult = value; }\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-dialog-close], button[mat-dialog-close],' +\n            'button[mdDialogClose], button[matDialogClose]',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['md-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['mat-dialog-close', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMdDialogClose.prototype.dialogResult;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle implements OnInit {\n   id = `md-dialog-title-${dialogElementUid++}`;\n/**\n * @param {?} _container\n */\nconstructor(\nprivate _container: MdDialogContainer) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-title], [mat-dialog-title], [mdDialogTitle], [matDialogTitle]',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n/** @type {?} */\nMdDialogTitle.propDecorators;\n/** @type {?} */\nMdDialogTitle.prototype.id;\n/** @type {?} */\nMdDialogTitle.prototype._container;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content,' +\n            '[mdDialogContent], [matDialogContent]',\n  host: {'class': 'mat-dialog-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions,' +\n            '[mdDialogActions], [matDialogActions]',\n  host: {'class': 'mat-dialog-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {\n  OverlayModule,\n  PortalModule,\n  A11yModule,\n  MdCommonModule,\n} from '../core';\nimport {MdDialog} from './dialog';\nimport {MdDialogContainer} from './dialog-container';\nimport {\n  MdDialogClose,\n  MdDialogContent,\n  MdDialogTitle,\n  MdDialogActions\n} from './dialog-content-directives';\nexport class MdDialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MdCommonModule,\n  ],\n  exports: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogContent,\n    MdDialogActions,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogActions,\n    MdDialogContent,\n  ],\n  providers: [\n    MdDialog,\n  ],\n  entryComponents: [MdDialogContainer],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogModule.ctorParameters;\n}\n\n\nexport {MD_DIALOG_DATA,MdDialog} from './dialog';\nexport {throwMdDialogContentAlreadyAttachedError,MdDialogContainer} from './dialog-container';\nexport {MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions} from './dialog-content-directives';\nexport {DialogRole,DialogPosition,MdDialogConfig} from './dialog-config';\nexport {MdDialogRef} from './dialog-ref';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends CanDisable {\n  setActiveStyles(): void;\n  setInactiveStyles(): void;\n}\nexport class ActiveDescendantKeyManager extends ListKeyManager<Highlightable> {\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds active styles to the newly active item and removes active\n * styles from the previously active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    Promise.resolve().then(() => {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n      super.setActiveItem(index);\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {MdOption} from '../core';\nimport {ActiveDescendantKeyManager} from '../core/a11y/activedescendant-key-manager';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\nexport type AutocompletePositionY = 'above' | 'below';\nexport class MdAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n */\npositionY: AutocompletePositionY = 'below';\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n/**\n * \\@docs-private\n */\ntemplate: TemplateRef<any>;\n/**\n * Element for the panel containing the autocomplete options.\n */\npanel: ElementRef;\n/**\n * \\@docs-private\n */\noptions: QueryList<MdOption>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: ((value: any) => string) | null = null;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display options\n * above or below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Returns the panel's scrollTop.\n * @return {?}\n */\n_getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility() {\n    Promise.resolve().then(() => {\n      this.showPanel = !!this.options.length;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Sets a class on the panel based on its position (used to set y-offset).\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-panel-below': this.positionY === 'below',\n      'mat-autocomplete-panel-above': this.positionY === 'above',\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-autocomplete, mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'mdAutocomplete',\n  host: {\n    'class': 'mat-autocomplete'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, ] },],\n'displayWith': [{ type: Input },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.positionY;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.template;\n/**\n * Element for the panel containing the autocomplete options.\n * @type {?}\n */\nMdAutocomplete.prototype.panel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.options;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n/** @type {?} */\nMdAutocomplete.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {TemplatePortalDirective} from '../core';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdTabLabelBaseClass = TemplatePortalDirective;\n/**\n * Used to flag tab labels for use with the portal directive\n */\nexport class MdTabLabel extends _MdTabLabelBaseClass {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label], [mat-tab-label], [mdTabLabel], [matTabLabel]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction MdTabLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabel.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {TemplatePortal} from '../core/portal/portal';\nimport {\n  ViewContainerRef, Input, TemplateRef, ViewChild, OnInit, ContentChild,\n  Component\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {MdTabLabel} from './tab-label';\n/**\n * \\@docs-private\n */\nexport class MdTabBase {}\nexport const /** @type {?} */ _MdTabMixinBase = mixinDisabled(MdTabBase);\nexport class MdTab extends _MdTabMixinBase implements OnInit, CanDisable {\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n */\ntemplateLabel: MdTabLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n */\n_content: TemplateRef<any>;\n/**\n * The plain text label for the tab, used when there is no template label.\n */\ntextLabel: string = '';\n/**\n * The portal that will be the hosted content of the tab\n */\nprivate _contentPortal: TemplatePortal | null = null;\n/**\n * @return {?}\n */\nget content(): TemplatePortal | null { return this._contentPortal; }\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n */\nposition: number | null = null;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n */\norigin: number | null = null;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab, mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'templateLabel': [{ type: ContentChild, args: [MdTabLabel, ] },],\n'_content': [{ type: ViewChild, args: [TemplateRef, ] },],\n'textLabel': [{ type: Input, args: ['label', ] },],\n};\n}\n\nfunction MdTab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTab.ctorParameters;\n/** @type {?} */\nMdTab.propDecorators;\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n * @type {?}\n */\nMdTab.prototype.templateLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n * @type {?}\n */\nMdTab.prototype._content;\n/**\n * The plain text label for the tab, used when there is no template label.\n * @type {?}\n */\nMdTab.prototype.textLabel;\n/**\n * The portal that will be the hosted content of the tab\n * @type {?}\n */\nMdTab.prototype._contentPortal;\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n * @type {?}\n */\nMdTab.prototype.position;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n * @type {?}\n */\nMdTab.prototype.origin;\n/** @type {?} */\nMdTab.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  QueryList,\n  ContentChildren,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {MdTab} from './tab';\nimport {map} from '../core/rxjs/index';\n/**\n * Used to generate unique ID's for each tab component\n */\nlet nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nexport class MdTabChangeEvent {\n  index: number;\n  tab: MdTab;\n}\n\nfunction MdTabChangeEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabChangeEvent.prototype.index;\n/** @type {?} */\nMdTabChangeEvent.prototype.tab;\n}\n\n\n/** Possible positions for the tab header. */\nexport type MdTabHeaderPosition = 'above' | 'below';\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\nexport class MdTabGroup {\n   _tabs: QueryList<MdTab>;\n\n   _tabBodyWrapper: ElementRef;\n/**\n * Whether this component has been initialized.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The tab index that should be selected after the content has been checked.\n */\nprivate _indexToSelect: number | null = 0;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n */\nprivate _tabBodyWrapperHeight: number = 0;\n/**\n * Whether the tab group should grow to the size of the active tab.\n * @return {?}\n */\nget dynamicHeight(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\nprivate _dynamicHeight: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n/**\n * Whether ripples for the tab-group should be disabled or not.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\nprivate _disableRipple: boolean = false;\nprivate _selectedIndex: number | null = null;\n/**\n * The index of the active tab.\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number | null) { this._indexToSelect = value; }\n/**\n * @return {?}\n */\nget selectedIndex(): number | null { return this._selectedIndex; }\n/**\n * Position of the tab header.\n */\nheaderPosition: MdTabHeaderPosition = 'above';\n/**\n * Output to enable support for two-way binding on `[(selectedIndex)]`\n * @return {?}\n */\nget selectedIndexChange(): Observable<number> {\n    return map.call(this.selectChange, event => event.index);\n  }\n/**\n * Event emitted when focus has changed within a tab group.\n */\nfocusChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>();\n/**\n * Event emitted when the tab selection has changed.\n */\nselectChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>(true);\nprivate _groupId: number;\n/**\n * @param {?} _renderer\n */\nconstructor(private _renderer: Renderer2) {\n    this._groupId = nextId++;\n  }\n/**\n * After the content is checked, this component knows what tabs have been defined\n * and what the selected index should be. This is where we can know exactly what position\n * each tab should be in according to the new selected index, and additionally we know how\n * a new selected tab should transition in (from the left or right).\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // Clamp the next selected index to the bounds of 0 and the tabs length. Note the `|| 0`, which\n    // ensures that values like NaN can't get through and which would otherwise throw the\n    // component into an infinite loop (since Math.max(NaN, 0) === NaN).\n    let /** @type {?} */ indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      this.selectChange.emit(this._createChangeEvent(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MdTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    this._selectedIndex = indexToSelect;\n  }\n/**\n * Waits one frame for the view to update, then updates the ink bar\n * Note: This must be run outside of the zone or it will create an infinite change detection loop.\n * @return {?}\n */\nngAfterViewChecked(): void {\n    this._isInitialized = true;\n  }\n/**\n * @param {?} index\n * @return {?}\n */\n_focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _createChangeEvent(index: number): MdTabChangeEvent {\n    const /** @type {?} */ event = new MdTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n/**\n * Returns a unique id for each tab label element\n * @param {?} i\n * @return {?}\n */\n_getTabLabelId(i: number): string {\n    return `md-tab-label-${this._groupId}-${i}`;\n  }\n/**\n * Returns a unique id for each tab content element\n * @param {?} i\n * @return {?}\n */\n_getTabContentId(i: number): string {\n    return `md-tab-content-${this._groupId}-${i}`;\n  }\n/**\n * Sets the height of the body wrapper to the height of the activating tab if dynamic\n * height property is true.\n * @param {?} tabHeight\n * @return {?}\n */\n_setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n        this._tabBodyWrapperHeight + 'px');\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n          tabHeight + 'px');\n    }\n  }\n/**\n * Removes the height of the tab body wrapper.\n * @return {?}\n */\n_removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height', '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-group, mat-tab-group',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tabs': [{ type: ContentChildren, args: [MdTab, ] },],\n'_tabBodyWrapper': [{ type: ViewChild, args: ['tabBodyWrapper', ] },],\n'dynamicHeight': [{ type: Input },],\n'_dynamicHeightDeprecated': [{ type: Input, args: ['md-dynamic-height', ] },],\n'disableRipple': [{ type: Input },],\n'selectedIndex': [{ type: Input },],\n'headerPosition': [{ type: Input },],\n'selectedIndexChange': [{ type: Output },],\n'focusChange': [{ type: Output },],\n'selectChange': [{ type: Output },],\n};\n}\n\nfunction MdTabGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabGroup.ctorParameters;\n/** @type {?} */\nMdTabGroup.propDecorators;\n/** @type {?} */\nMdTabGroup.prototype._tabs;\n/** @type {?} */\nMdTabGroup.prototype._tabBodyWrapper;\n/**\n * Whether this component has been initialized.\n * @type {?}\n */\nMdTabGroup.prototype._isInitialized;\n/**\n * The tab index that should be selected after the content has been checked.\n * @type {?}\n */\nMdTabGroup.prototype._indexToSelect;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n * @type {?}\n */\nMdTabGroup.prototype._tabBodyWrapperHeight;\n/** @type {?} */\nMdTabGroup.prototype._dynamicHeight;\n/** @type {?} */\nMdTabGroup.prototype._disableRipple;\n/** @type {?} */\nMdTabGroup.prototype._selectedIndex;\n/**\n * Position of the tab header.\n * @type {?}\n */\nMdTabGroup.prototype.headerPosition;\n/**\n * Event emitted when focus has changed within a tab group.\n * @type {?}\n */\nMdTabGroup.prototype.focusChange;\n/**\n * Event emitted when the tab selection has changed.\n * @type {?}\n */\nMdTabGroup.prototype.selectChange;\n/** @type {?} */\nMdTabGroup.prototype._groupId;\n/** @type {?} */\nMdTabGroup.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdTabLabelWrapperBase {}\nexport const /** @type {?} */ _MdTabLabelWrapperMixinBase = mixinDisabled(MdTabLabelWrapperBase);\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * \\@docs-private\n */\nexport class MdTabLabelWrapper extends _MdTabLabelWrapperMixinBase implements CanDisable {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {\n    super();\n  }\n/**\n * Sets focus on the wrapper element\n * @return {?}\n */\nfocus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n/**\n * @return {?}\n */\ngetOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n/**\n * @return {?}\n */\ngetOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label-wrapper], [mat-tab-label-wrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdTabLabelWrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabelWrapper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabelWrapper.ctorParameters;\n/** @type {?} */\nMdTabLabelWrapper.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Renderer2, ElementRef, NgZone} from '@angular/core';\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nexport class MdInkBar {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) {}\n/**\n * Calculates the styles from the provided element in order to align the ink-bar to that element.\n * Shows the ink bar if previously set as hidden.\n * @param {?} element\n * @return {?}\n */\nalignToElement(element: HTMLElement) {\n    this.show();\n\n    this._ngZone.runOutsideAngular(() => {\n      requestAnimationFrame(() => {\n        this._renderer.setStyle(this._elementRef.nativeElement, 'left',\n            this._getLeftPosition(element));\n        this._renderer.setStyle(this._elementRef.nativeElement, 'width',\n            this._getElementWidth(element));\n      });\n    });\n  }\n/**\n * Shows the ink bar.\n * @return {?}\n */\nshow(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'visible');\n  }\n/**\n * Hides the ink bar.\n * @return {?}\n */\nhide(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\n  }\n/**\n * Generates the pixel distance from the left based on the provided element in string format.\n * @param {?} element\n * @return {?}\n */\nprivate _getLeftPosition(element: HTMLElement): string {\n    return element ? element.offsetLeft + 'px' : '0';\n  }\n/**\n * Generates the pixel width from the provided element in string format.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementWidth(element: HTMLElement): string {\n    return element ? element.offsetWidth + 'px' : '0';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-ink-bar, mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\n}\n\nfunction MdInkBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInkBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInkBar.ctorParameters;\n/** @type {?} */\nMdInkBar.prototype._renderer;\n/** @type {?} */\nMdInkBar.prototype._elementRef;\n/** @type {?} */\nMdInkBar.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  Directive,\n  ElementRef,\n  HostBinding,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdInkBar} from '../ink-bar';\nimport {CanDisable, mixinDisabled} from '../../core/common-behaviors/disabled';\nimport {MdRipple} from '../../core';\nimport {ViewportRuler} from '../../core/overlay/position/viewport-ruler';\nimport {Directionality, MD_RIPPLE_GLOBAL_OPTIONS, Platform, RippleGlobalOptions} from '../../core';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {takeUntil, auditTime} from '../../core/rxjs/index';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {merge} from 'rxjs/observable/merge';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nexport class MdTabNav implements AfterContentInit, OnDestroy {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n   _inkBar: MdInkBar;\n/**\n * Subscription for window.resize event *\n */\nprivate _resizeSubscription: Subscription;\n/**\n * @param {?} _dir\n * @param {?} _ngZone\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _ngZone: NgZone) { }\n/**\n * Notifies the component that the active link has been changed.\n * @param {?} element\n * @return {?}\n */\nupdateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._resizeSubscription = this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.change : observableOf(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          auditTime.call(fromEvent(window, 'resize'), 10) :\n          observableOf(null);\n\n      return takeUntil.call(merge(dirChange, resize), this._onDestroy)\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n/**\n * Checks if the active link has been changed and, if so, will update the ink bar.\n * @return {?}\n */\nngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._onDestroy.next();\n    this._resizeSubscription.unsubscribe();\n  }\n/**\n * Aligns the ink bar to the active link.\n * @return {?}\n */\n_alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n};\n}\n\nfunction MdTabNav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabNav.ctorParameters;\n/** @type {?} */\nMdTabNav.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nMdTabNav.prototype._onDestroy;\n/** @type {?} */\nMdTabNav.prototype._activeLinkChanged;\n/** @type {?} */\nMdTabNav.prototype._activeLinkElement;\n/** @type {?} */\nMdTabNav.prototype._inkBar;\n/**\n * Subscription for window.resize event *\n * @type {?}\n */\nMdTabNav.prototype._resizeSubscription;\n/** @type {?} */\nMdTabNav.prototype._dir;\n/** @type {?} */\nMdTabNav.prototype._ngZone;\n}\n\nexport class MdTabLinkBase {}\nexport const /** @type {?} */ _MdTabLinkMixinBase = mixinDisabled(MdTabLinkBase);\n/**\n * Link inside of a `md-tab-nav-bar`.\n */\nexport class MdTabLink extends _MdTabLinkMixinBase implements OnDestroy, CanDisable {\n/**\n * Whether the tab link is active or not.\n */\nprivate _isActive: boolean = false;\n/**\n * Reference to the instance of the ripple for the tab link.\n */\nprivate _tabLinkRipple: MdRipple;\n/**\n * Whether the link is active.\n * @return {?}\n */\nget active(): boolean { return this._isActive; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._mdTabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget tabIndex(): number {\n    return this.disabled ? -1 : 0;\n  }\n/**\n * @param {?} _mdTabNavBar\n * @param {?} _elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(private _mdTabNavBar: MdTabNav,\nprivate _elementRef: ElementRef,\n              ngZone: NgZone,\n              ruler: ViewportRuler,\n              platform: Platform,\n                globalOptions: RippleGlobalOptions) {\n    super();\n\n    // Manually create a ripple instance that uses the tab link element as trigger element.\n    // Notice that the lifecycle hooks for the ripple config won't be called anymore.\n    this._tabLinkRipple = new MdRipple(_elementRef, ngZone, ruler, platform, globalOptions);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Manually call the ngOnDestroy lifecycle hook of the ripple instance because it won't be\n    // called automatically since its instance is not created by Angular.\n    this._tabLinkRipple.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-link], [mat-tab-link], [mdTabLink], [matTabLink]',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdTabNav, },\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input },],\n'tabIndex': [{ type: HostBinding, args: ['tabIndex', ] },],\n};\n}\n\nfunction MdTabLink_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLink.ctorParameters;\n/** @type {?} */\nMdTabLink.propDecorators;\n/**\n * Whether the tab link is active or not.\n * @type {?}\n */\nMdTabLink.prototype._isActive;\n/**\n * Reference to the instance of the ripple for the tab link.\n * @type {?}\n */\nMdTabLink.prototype._tabLinkRipple;\n/** @type {?} */\nMdTabLink.prototype._mdTabNavBar;\n/** @type {?} */\nMdTabLink.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  ElementRef,\n  Optional,\n  AfterViewChecked,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {TemplatePortal, PortalHostDirective, Directionality, Direction} from '../core';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MdTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MdTabBodyOriginState = 'left' | 'right';\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nexport class MdTabBody implements OnInit, AfterViewChecked {\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n */\nonCentering: EventEmitter<number> = new EventEmitter<number>();\n/**\n * Event emitted when the tab completes its animation towards the center.\n */\nonCentered: EventEmitter<void> = new EventEmitter<void>(true);\n/**\n * The tab body content to display.\n */\n_content: TemplatePortal;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n */\n_position: MdTabBodyPositionState;\n/**\n * @param {?} position\n * @return {?}\n */\nset position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n/**\n * The origin position from which this tab should appear when it is centered into view.\n */\n_origin: MdTabBodyOriginState;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @param {?} origin\n * @return {?}\n */\nset origin(origin: number) {\n    if (origin == null) { return; }\n\n    const /** @type {?} */ dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _dir\n */\nconstructor(private _elementRef: ElementRef,\nprivate _dir: Directionality) { }\n/**\n * After initialized, check if the content is centered and has an origin. If so, set the\n * special position states that transition the tab from the left or right before centering.\n * @return {?}\n */\nngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n/**\n * After the view has been set, check if the tab content is set to the center and attach the\n * content if it is not already attached.\n * @return {?}\n */\nngAfterViewChecked() {\n    if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {\n      this._portalHost.attach(this._content);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabStarted(e: AnimationEvent) {\n    if (this._isCenterPosition(e.toState)) {\n      this.onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabComplete(e: AnimationEvent) {\n    // If the end state is that the tab is not centered, then detach the content.\n    if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {\n      this._portalHost.detach();\n    }\n\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this.onCentered.emit();\n    }\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the provided position state is considered center, regardless of origin.\n * @param {?} position\n * @return {?}\n */\nprivate _isCenterPosition(position: MdTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-body, mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-tab-body',\n  },\n  animations: [\n    trigger('translateTab', [\n      state('void', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n      state('left-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n      transition('* => left, * => right, left => center, right => center',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n      transition('void => left-origin-center', [\n        style({transform: 'translate3d(-100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ]),\n      transition('void => right-origin-center', [\n        style({transform: 'translate3d(100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ])\n    ])\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n'onCentering': [{ type: Output },],\n'onCentered': [{ type: Output },],\n'_content': [{ type: Input, args: ['content', ] },],\n'position': [{ type: Input, args: ['position', ] },],\n'origin': [{ type: Input, args: ['origin', ] },],\n};\n}\n\nfunction MdTabBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabBody.ctorParameters;\n/** @type {?} */\nMdTabBody.propDecorators;\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n * @type {?}\n */\nMdTabBody.prototype._portalHost;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n * @type {?}\n */\nMdTabBody.prototype.onCentering;\n/**\n * Event emitted when the tab completes its animation towards the center.\n * @type {?}\n */\nMdTabBody.prototype.onCentered;\n/**\n * The tab body content to display.\n * @type {?}\n */\nMdTabBody.prototype._content;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n * @type {?}\n */\nMdTabBody.prototype._position;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @type {?}\n */\nMdTabBody.prototype._origin;\n/** @type {?} */\nMdTabBody.prototype._elementRef;\n/** @type {?} */\nMdTabBody.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  QueryList,\n  ElementRef,\n  ViewEncapsulation,\n  ContentChildren,\n  Output,\n  EventEmitter,\n  Optional,\n  AfterContentChecked,\n  AfterContentInit,\n  OnDestroy,\n  NgZone,\n  Renderer2,\n} from '@angular/core';\nimport {\n  RIGHT_ARROW,\n  LEFT_ARROW,\n  ENTER,\n  Directionality,\n  Direction,\n  coerceBooleanProperty\n} from '../core';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdInkBar} from './ink-bar';\nimport {Subscription} from 'rxjs/Subscription';\nimport {applyCssTransform} from '../core/style/apply-transform';\nimport {auditTime, startWith} from '../core/rxjs/index';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {merge} from 'rxjs/observable/merge';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nexport class MdTabHeader implements AfterContentChecked, AfterContentInit, OnDestroy {\n   _labelWrappers: QueryList<MdTabLabelWrapper>;\n\n   _inkBar: MdInkBar;\n   _tabListContainer: ElementRef;\n   _tabList: ElementRef;\n/**\n * The tab index that is focused.\n */\nprivate _focusIndex: number = 0;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n */\nprivate _scrollDistance = 0;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n */\nprivate _selectedIndexChanged = false;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n */\nprivate _realignInkBar: Subscription | null = null;\n/**\n * Whether the controls for pagination should be displayed\n */\n_showPaginationControls = false;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n */\n_disableScrollAfter = true;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n */\n_disableScrollBefore = true;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n */\nprivate _tabLabelCount: number;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n */\nprivate _scrollDistanceChanged: boolean;\nprivate _selectedIndex: number = 0;\n/**\n * The index of the active tab.\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) {\n    this._selectedIndexChanged = this._selectedIndex != value;\n\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n/**\n * Whether ripples for the tab-header labels should be disabled or not.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\nprivate _disableRipple: boolean = false;\n/**\n * Event emitted when the option is selected.\n */\nselectFocusedIndex = new EventEmitter();\n/**\n * Event emitted when a label is focused.\n */\nindexFocused = new EventEmitter();\n/**\n * @param {?} _elementRef\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _dir\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _dir: Directionality) { }\n/**\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        break;\n    }\n  }\n/**\n * Aligns the ink bar to the selected tab on load.\n * @return {?}\n */\nngAfterContentInit() {\n    this._realignInkBar = this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.change : observableOf(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          auditTime.call(fromEvent(window, 'resize'), 10) :\n          observableOf(null);\n\n      return startWith.call(merge(dirChange, resize), null).subscribe(() => {\n        this._updatePagination();\n        this._alignInkBarToSelectedTab();\n      });\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._realignInkBar) {\n      this._realignInkBar.unsubscribe();\n      this._realignInkBar = null;\n    }\n  }\n/**\n * Callback for when the MutationObserver detects that the content has changed.\n * @return {?}\n */\n_onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n  }\n/**\n * Updating the view whether pagination should be enabled or not\n * @return {?}\n */\n_updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n/**\n * When the focus index is set, we must manually send focus to the correct label\n * @param {?} value\n * @return {?}\n */\nset focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n\n    this._setTabFocus(value);\n  }\n/**\n * Tracks which element has focus; used for keyboard navigation\n * @return {?}\n */\nget focusIndex(): number { return this._focusIndex; }\n/**\n * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n * providing a valid index and return true.\n * @param {?} index\n * @return {?}\n */\n_isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n/**\n * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n * scrolling is enabled.\n * @param {?} tabIndex\n * @return {?}\n */\n_setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const /** @type {?} */ containerEl = this._tabListContainer.nativeElement;\n      const /** @type {?} */ dir = this._getLayoutDirection();\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n/**\n * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n * Valid offsets are 1 and -1.\n * @param {?} offset\n * @return {?}\n */\n_moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const /** @type {?} */ tabs: MdTabLabelWrapper[] = this._labelWrappers.toArray();\n      for (let /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n/**\n * Increment the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n/**\n * Decrement the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n/**\n * The layout direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Performs the CSS transformation on the tab list that will cause the list to scroll.\n * @return {?}\n */\n_updateTabScrollPosition() {\n    const /** @type {?} */ scrollDistance = this.scrollDistance;\n    const /** @type {?} */ translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._renderer.setStyle(this._tabList.nativeElement, 'transform',\n        `translate3d(${translateX}px, 0, 0)`);\n  }\n/**\n * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n * @param {?} v\n * @return {?}\n */\nset scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n\n    this._checkScrollingControls();\n  }\n/**\n * @return {?}\n */\nget scrollDistance(): number { return this._scrollDistance; }\n/**\n * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n * the end of the list, respectively). The distance to scroll is computed to be a third of the\n * length of the tab list view window.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} scrollDir\n * @return {?}\n */\n_scrollHeader(scrollDir: ScrollDirection) {\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n/**\n * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} labelIndex\n * @return {?}\n */\n_scrollToLabel(labelIndex: number) {\n    const /** @type {?} */ selectedLabel = this._labelWrappers\n        ? this._labelWrappers.toArray()[labelIndex]\n        :  null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let /** @type {?} */ labelBeforePos: number, /** @type {?} */ labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const /** @type {?} */ beforeVisiblePos = this.scrollDistance;\n    const /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n/**\n * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n * tab list is wider than the size of the header container, then the pagination controls should\n * be shown.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkPaginationEnabled() {\n    this._showPaginationControls =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!this._showPaginationControls) {\n      this.scrollDistance = 0;\n    }\n  }\n/**\n * Evaluate whether the before and after controls should be enabled or disabled.\n * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n * before button. If the header is at the end of the list (scroll distance is equal to the\n * maximum distance we can scroll), then disable the after button.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n  }\n/**\n * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n * is equal to the difference in width between the tab list container and tab header container.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_getMaxScrollDistance(): number {\n    const /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n/**\n * Tells the ink-bar to align itself to the current label wrapper\n * @return {?}\n */\nprivate _alignInkBarToSelectedTab(): void {\n    const /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length\n        ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement\n        : null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-header, mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_labelWrappers': [{ type: ContentChildren, args: [MdTabLabelWrapper, ] },],\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabListContainer': [{ type: ViewChild, args: ['tabListContainer', ] },],\n'_tabList': [{ type: ViewChild, args: ['tabList', ] },],\n'selectedIndex': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'selectFocusedIndex': [{ type: Output },],\n'indexFocused': [{ type: Output },],\n};\n}\n\nfunction MdTabHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabHeader.ctorParameters;\n/** @type {?} */\nMdTabHeader.propDecorators;\n/** @type {?} */\nMdTabHeader.prototype._labelWrappers;\n/** @type {?} */\nMdTabHeader.prototype._inkBar;\n/** @type {?} */\nMdTabHeader.prototype._tabListContainer;\n/** @type {?} */\nMdTabHeader.prototype._tabList;\n/**\n * The tab index that is focused.\n * @type {?}\n */\nMdTabHeader.prototype._focusIndex;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistance;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n * @type {?}\n */\nMdTabHeader.prototype._selectedIndexChanged;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n * @type {?}\n */\nMdTabHeader.prototype._realignInkBar;\n/**\n * Whether the controls for pagination should be displayed\n * @type {?}\n */\nMdTabHeader.prototype._showPaginationControls;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollAfter;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollBefore;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n * @type {?}\n */\nMdTabHeader.prototype._tabLabelCount;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistanceChanged;\n/** @type {?} */\nMdTabHeader.prototype._selectedIndex;\n/** @type {?} */\nMdTabHeader.prototype._disableRipple;\n/**\n * Event emitted when the option is selected.\n * @type {?}\n */\nMdTabHeader.prototype.selectFocusedIndex;\n/**\n * Event emitted when a label is focused.\n * @type {?}\n */\nMdTabHeader.prototype.indexFocused;\n/** @type {?} */\nMdTabHeader.prototype._elementRef;\n/** @type {?} */\nMdTabHeader.prototype._ngZone;\n/** @type {?} */\nMdTabHeader.prototype._renderer;\n/** @type {?} */\nMdTabHeader.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserveContentModule} from '@angular/cdk';\nimport {PortalModule} from '../core';\nimport {MdRippleModule} from '../core/ripple/index';\nimport {MdTab} from './tab';\nimport {MdTabGroup} from './tab-group';\nimport {MdTabLabel} from './tab-label';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdTabNav, MdTabLink} from './tab-nav-bar/tab-nav-bar';\nimport {MdInkBar} from './ink-bar';\nimport {MdTabBody} from './tab-body';\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\nimport {MdTabHeader} from './tab-header';\nimport {ScrollDispatchModule} from '../core/overlay/scroll/index';\nexport class MdTabsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    PortalModule,\n    MdRippleModule,\n    ObserveContentModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdTabNav,\n    MdTabLink,\n  ],\n  declarations: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdInkBar,\n    MdTabLabelWrapper,\n    MdTabNav,\n    MdTabLink,\n    MdTabBody,\n    MdTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTabsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabsModule.ctorParameters;\n}\n\n\n\nexport {MdTabChangeEvent,MdTabHeaderPosition,MdTabGroup} from './tab-group';\nexport {MdInkBar} from './ink-bar';\nexport {MdTabBody, MdTabBodyOriginState, MdTabBodyPositionState} from './tab-body';\nexport {MdTabHeader, ScrollDirection} from './tab-header';\nexport {MdTabLabelWrapper} from './tab-label-wrapper';\nexport {MdTab} from './tab';\nexport {MdTabLabel} from './tab-label';\nexport {MdTabNav, MdTabLink} from './tab-nav-bar/index';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Directive,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nexport class MdToolbarRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-toolbar-row, mat-toolbar-row',\n  host: {'class': 'mat-toolbar-row'},\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarRow.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdToolbarBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdToolbarBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarBase.prototype._renderer;\n/** @type {?} */\nMdToolbarBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdToolbarMixinBase = mixinColor(MdToolbarBase);\nexport class MdToolbar extends _MdToolbarMixinBase implements CanColor {\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-toolbar, mat-toolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    'role': 'toolbar'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction MdToolbar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbar.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {MdToolbar, MdToolbarRow} from './toolbar';\nexport class MdToolbarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdToolbar, MdToolbarRow, MdCommonModule],\n  declarations: [MdToolbar, MdToolbarRow],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarModule.ctorParameters;\n}\n\n\n\nexport {MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar} from './toolbar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, SecurityContext, Optional, SkipSelf} from '@angular/core';\nimport {SafeResourceUrl, DomSanitizer} from '@angular/platform-browser';\nimport {Http} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {RxChain, map, doOperator, catchOperator, finallyOperator, share} from '../core/rxjs/index';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nexport function getMdIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<md-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdIconNoHttpProviderError(): Error {\n  return Error('Could not find Http provider for use with Angular Material icons. ' +\n               'Please include the HttpModule from @angular/http in your app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nexport function getMdIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MdIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Service to register and display icons used by the <md-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MdIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(\nprivate _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n/**\n * Registers an icon by URL in the specified namespace.\n * @param {?} namespace Namespace in which the icon should be registered.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n/**\n * Registers an icon set by URL in the default namespace.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\n * @param {?} namespace Namespace in which to register the icon set.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ config = new SvgIconConfig(url);\n    const /** @type {?} */ configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\n * component with the alias as the fontSet input will cause the class name to be applied\n * to the <md-icon> element.\n * \n * @param {?} alias Alias for the font.\n * @param {?=} className Class name override to be used instead of the alias.\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\n * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * \n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n * The response from the URL may be cached so this will not always cause an HTTP request, but\n * the produced element will always be a new copy of the originally fetched icon. (That is,\n * it will not contain any modifications made to elements previously returned).\n * \n * @param {?} safeUrl URL from which to fetch the SVG icon.\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMdIconFailedToSanitizeError(safeUrl);\n    }\n\n    let /** @type {?} */ cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return RxChain.from(this._loadSvgIconFromConfig(new SvgIconConfig(url)))\n      .call(doOperator, svg => this._cachedIconsByUrl.set( /** @type {?} */((url)), svg))\n      .call(map, svg => cloneSvg(svg))\n      .result();\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n * if not, the Observable will throw an error.\n * \n * @param {?} name Name of the icon to be retrieved.\n * @param {?=} namespace Namespace in which to look for the icon.\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const /** @type {?} */ key = iconKey(namespace, name);\n    const /** @type {?} */ config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMdIconNameNotFoundError(key));\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return RxChain.from(this._loadSvgIconFromConfig(config))\n          .call(doOperator, svg => config.svgElement = svg)\n          .call(map, svg => cloneSvg(svg))\n          .result();\n    }\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\n * First searches the available cached icons for a nested element with a matching name, and\n * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n * that have not been cached, and searches again after all fetches are completed.\n * The returned Observable produces the SVG element if possible, and throws\n * an error if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return RxChain.from(this._loadSvgIconSetFromConfig(iconSetConfig))\n          .call(catchOperator, (err: any): Observable<SVGElement | null> => {\n            let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n          .call(doOperator, svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n          .result();\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return map.call(forkJoin.call(Observable, iconSetFetchRequests), () => {\n      const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMdIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    });\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const /** @type {?} */ config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._createSvgElementForSingleIcon(svgText));\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n      // TODO: Document that icons should only be loaded from trusted sources.\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._svgElementFromString(svgText));\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n\n    if (!iconNode) {\n      return null;\n    }\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconNode.tagName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconNode.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconNode));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconNode.cloneNode(true));\n\n    return this._setSvgAttributes(svg);\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n    // creating an element from an HTML string.\n    const /** @type {?} */ div = document.createElement('DIV');\n    div.innerHTML = str;\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n/**\n * Converts an element into an SVG node by cloning all of its children.\n * @param {?} element\n * @return {?}\n */\nprivate _toSvgElement(element: Element): SVGElement {\n    let /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n\n    for (let /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\n * cached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._http) {\n      throw getMdIconNoHttpProviderError();\n    }\n\n    const /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMdIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const /** @type {?} */ inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const /** @type {?} */ req = RxChain.from(this._http.get(url))\n      .call(map, response => response.text())\n      .call(finallyOperator, () => this._inProgressUrlFetches.delete(url))\n      .call(share)\n      .result();\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Optional }, ]},\n{type: DomSanitizer, },\n];\n}\n\nfunction MdIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMdIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMdIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMdIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMdIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMdIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMdIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMdIconRegistry.prototype._http;\n/** @type {?} */\nMdIconRegistry.prototype._sanitizer;\n}\n\n/**\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MdIconRegistry, http: Http, sanitizer: DomSanitizer) {\n  return parentRegistry || new MdIconRegistry(http, sanitizer);\n}\n\nexport const /** @type {?} */ ICON_REGISTRY_PROVIDER = {\n  // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MdIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MdIconRegistry], [new Optional(), Http], DomSanitizer],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChange,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {MdIconRegistry} from './icon-registry';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {first} from '../core/rxjs/index';\n/**\n * \\@docs-private\n */\nexport class MdIconBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdIconBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconBase.prototype._renderer;\n/** @type {?} */\nMdIconBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdIconMixinBase = mixinColor(MdIconBase);\n/**\n * Component to display an icon. It can be used in the following ways:\n * - Specify the svgSrc input to load an SVG icon from a URL. The SVG content is directly inlined\n *   as a child of the <md-icon> component, so that CSS styles can easily be applied to it.\n *   The URL is loaded via an XMLHttpRequest, so it must be on the same domain as the page or its\n *   server must be configured to allow cross-domain requests.\n *   Example:\n *     <md-icon svgSrc=\"assets/arrow.svg\"></md-icon>\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <md-icon>home</md-icon>\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nexport class MdIcon extends _MdIconMixinBase implements OnChanges, OnInit, CanColor {\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _mdIconRegistry\n * @param {?} ariaHidden\n */\nconstructor(\n      renderer: Renderer2,\n      elementRef: ElementRef,\nprivate _mdIconRegistry: MdIconRegistry,\n       ariaHidden: string) {\n    super(renderer, elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws an error if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws Error)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1:\n        // Use default namespace.\n        return ['', parts[0]];\n      case 2:\n        return /** @type {?} */(( <[string, string]>parts));\n      default:\n        throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: {[propertyName: string]: SimpleChange}) {\n    const /** @type {?} */ changedInputs = Object.keys(changes);\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changedInputs.indexOf('svgIcon') != -1 || changedInputs.indexOf('svgSrc') != -1) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n        first.call(this._mdIconRegistry.getNamedSvgIcon(iconName, namespace)).subscribe(\n            svg => this._setSvgElement(svg),\n            (err: Error) => console.log(`Error retrieving icon: ${err.message}`));\n      }\n    }\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    // Remove existing child nodes and add the new SVG element.\n    // We would use renderer.detachView(Array.from(layoutElement.childNodes)) here,\n    // but it fails in IE11: https://github.com/angular/angular/issues/6327\n    layoutElement.innerHTML = '';\n    this._renderer.appendChild(layoutElement, svg);\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\n        this._mdIconRegistry.getDefaultFontSetClass();\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.removeClass(elem, this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        this._renderer.addClass(elem, fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.removeClass(elem, this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        this._renderer.addClass(elem, this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'md-icon, mat-icon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdIconRegistry, },\n{type: undefined, decorators: [{ type: Attribute, args: ['aria-hidden', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n};\n}\n\nfunction MdIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIcon.ctorParameters;\n/** @type {?} */\nMdIcon.propDecorators;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMdIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMdIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMdIcon.prototype.fontIcon;\n/** @type {?} */\nMdIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMdIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMdIcon.prototype._mdIconRegistry;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  HostBinding,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone,\n  Renderer2,\n  Directive,\n  ViewChild,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * A single degree in radians.\n */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nconst startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nconst endIndeterminate = 80;\n/**\n * Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden.\n */\nconst MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nconst HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n/**\n * Default stroke width as a percentage of the viewBox.\n */\nexport const PROGRESS_SPINNER_STROKE_WIDTH = 10;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {'class': 'mat-progress-spinner'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdProgressSpinnerBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdProgressSpinnerBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerBase.prototype._renderer;\n/** @type {?} */\nMdProgressSpinnerBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdProgressSpinnerMixinBase = mixinColor(MdProgressSpinnerBase, 'primary');\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner extends _MdProgressSpinnerMixinBase\n    implements OnDestroy, CanColor {\n/**\n * The id of the last requested animation.\n */\nprivate _lastAnimationId: number = 0;\n/**\n * The id of the indeterminate interval.\n */\nprivate _interdeterminateInterval: number | null;\n/**\n * The SVG <path> node that is used to draw the circle.\n */\nprivate _path: ElementRef;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n */\nstrokeWidth: number = PROGRESS_SPINNER_STROKE_WIDTH;\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n * because voiceover does not report the progress indicator as indeterminate if the aria min\n * and/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number | null) {\n    if (this._interdeterminateInterval) {\n      clearInterval(this._interdeterminateInterval);\n    }\n\n    this._interdeterminateInterval = interval;\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n\n    return 0;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let /** @type {?} */ newValue = clamp(v);\n      this._animateCircle(this.value || 0, newValue);\n      this._value = newValue;\n    }\n  }\n/**\n * Mode of the progress circle\n * \n * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n * mode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() {\n    return this._mode;\n  }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\n    if (mode !== this._mode) {\n      if (mode === 'indeterminate') {\n        this._startIndeterminateAnimation();\n      } else {\n        this._cleanupIndeterminateAnimation();\n        this._animateCircle(0, this._value);\n      }\n      this._mode = mode;\n    }\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _ngZone\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _ngZone: NgZone) {\n    super(renderer, elementRef);\n  }\n/**\n * Animates the circle from one percentage value to another.\n * \n * @param {?} animateFrom The percentage of the circle filled starting the animation.\n * @param {?} animateTo The percentage of the circle filled ending the animation.\n * @param {?=} ease The easing function to manage the pace of change in the animation.\n * @param {?=} duration The length of time to show the animation, in milliseconds.\n * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n *    of the circle.\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\n                        duration = DURATION_DETERMINATE, rotation = 0) {\n\n    let /** @type {?} */ id = ++this._lastAnimationId;\n    let /** @type {?} */ startTime = Date.now();\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let /** @type {?} */ animation = () => {\n        // If there is no requestAnimationFrame, skip ahead to the end of the animation.\n        let /** @type {?} */ elapsedTime = HAS_RAF ?\n            Math.max(0, Math.min(Date.now() - startTime, duration)) :\n            duration;\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\n    let /** @type {?} */ rotationStartPoint = 0;\n    let /** @type {?} */ start = startIndeterminate;\n    let /** @type {?} */ end = endIndeterminate;\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\n    let /** @type {?} */ animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let /** @type {?} */ temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n * DOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\n    if (this._path) {\n      const /** @type {?} */ svgArc = getSvgArc(currentValue, rotation, this.strokeWidth);\n      this._renderer.setAttribute(this._path.nativeElement, 'd', svgArc);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    'role': 'progressbar',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax'\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_path': [{ type: ViewChild, args: ['path', ] },],\n'strokeWidth': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'mode': [{ type: HostBinding, args: ['attr.mode', ] },{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n * @type {?}\n */\nMdProgressSpinner.prototype.strokeWidth;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n}\n\n/**\n * <md-spinner> component.\n * \n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner implements OnDestroy {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n    super(renderer, elementRef, ngZone);\n    this.mode = 'indeterminate';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\n    // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\n    super.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-spinner, mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let /** @type {?} */ time = currentTime / duration;\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n * \n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @param {?} strokeWidth Stroke width of the progress spinner arc.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number, strokeWidth: number): string {\n  let /** @type {?} */ startPoint = rotation || 0;\n  let /** @type {?} */ radius = 50;\n  let /** @type {?} */ pathRadius = radius - strokeWidth;\n\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n  let /** @type {?} */ largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {\n  MdProgressSpinner,\n  MdSpinner,\n  MdProgressSpinnerCssMatStyler,\n} from './progress-spinner';\nclass MdProgressSpinnerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdCommonModule,\n    MdProgressSpinnerCssMatStyler\n  ],\n  declarations: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdProgressSpinnerCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerModule.ctorParameters;\n}\n\n\nexport {MdProgressSpinnerModule};\nexport {PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner} from './progress-spinner';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  HostBinding,\n  Input,\n} from '@angular/core';\n/**\n * <md-progress-bar> component.\n */\nexport class MdProgressBar {\n/**\n * Color of the progress bar.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\nprivate _value: number = 0;\n/**\n * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) { this._value = clamp(v || 0); }\nprivate _bufferValue: number = 0;\n/**\n * Buffer value of the progress bar. Defaults to zero.\n * @return {?}\n */\nget bufferValue() { return this._bufferValue; }\n/**\n * @param {?} v\n * @return {?}\n */\nset bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n */\nmode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n/**\n * Gets the current transform value for the progress bar's primary indicator.\n * @return {?}\n */\n_primaryTransform() {\n    let /** @type {?} */ scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n/**\n * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n * @return {?}\n */\n_bufferTransform() {\n    if (this.mode == 'buffer') {\n      let /** @type {?} */ scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-bar, mat-progress-bar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'bufferValue': [{ type: Input },],\n'mode': [{ type: Input },{ type: HostBinding, args: ['attr.mode', ] },],\n};\n}\n\nfunction MdProgressBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBar.ctorParameters;\n/** @type {?} */\nMdProgressBar.propDecorators;\n/**\n * Color of the progress bar.\n * @type {?}\n */\nMdProgressBar.prototype.color;\n/** @type {?} */\nMdProgressBar.prototype._value;\n/** @type {?} */\nMdProgressBar.prototype._bufferValue;\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n * @type {?}\n */\nMdProgressBar.prototype.mode;\n}\n\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\nimport {MdProgressBar} from './progress-bar';\nexport class MdProgressBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule],\n  exports: [MdProgressBar, MdCommonModule],\n  declarations: [MdProgressBar],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBarModule.ctorParameters;\n}\n\n\n\nexport {MdProgressBar} from './progress-bar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdInputContainerPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nexport function getMdInputContainerUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by md-input-container.`);\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMdInputContainerDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdInputContainerMissingMdInputError(): Error {\n  return Error('md-input-container must contain an mdInput directive. ' +\n                   'Did you forget to add mdInput to the native input or textarea element?');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewChild,\n  ViewEncapsulation,\n  Inject\n} from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty, Platform} from '../core';\nimport {FormGroupDirective, NgControl, NgForm, FormControl} from '@angular/forms';\nimport {getSupportedInputTypes} from '../core/platform/features';\nimport {\n  getMdInputContainerDuplicatedHintError,\n  getMdInputContainerMissingMdInputError,\n  getMdInputContainerPlaceholderConflictError,\n  getMdInputContainerUnsupportedTypeError\n} from './input-container-errors';\nimport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS\n} from '../core/placeholder/placeholder-options';\nimport {\n  defaultErrorStateMatcher,\n  ErrorStateMatcher,\n  ErrorOptions,\n  MD_ERROR_GLOBAL_OPTIONS\n} from '../core/error/error-options';\n\n// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.\nconst /** @type {?} */ MD_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * The placeholder directive. The content can declare this to implement more\n * complex placeholders.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-placeholder, mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\n/**\n * Hint text to be shown underneath the input.\n */\nexport class MdHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the input.\n */\nid: string = `md-input-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-hint, mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMdHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the input.\n * @type {?}\n */\nMdHint.prototype.id;\n}\n\n/**\n * Single error message to be shown underneath the input.\n */\nexport class MdErrorDirective { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-error, mat-error',\n  host: {\n    'class': 'mat-input-error'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdErrorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdErrorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdErrorDirective.ctorParameters;\n}\n\n/**\n * Prefix to be placed the the front of the input.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdPrefix], [matPrefix], [md-prefix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\n/**\n * Suffix to be placed at the end of the input.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSuffix], [matSuffix], [md-suffix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\n/**\n * Marker for the input element that `MdInputContainer` is wrapping.\n */\nexport class MdInputDirective {\n/**\n * Variables used as cache for getters and setters.\n */\nprivate _type = 'text';\nprivate _placeholder: string = '';\nprivate _disabled = false;\nprivate _required = false;\nprivate _id: string;\nprivate _cachedUid: string;\nprivate _errorOptions: ErrorOptions;\n/**\n * Whether the element is focused or not.\n */\nfocused = false;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n */\nariaDescribedby: string;\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() {\n    return this._ngControl ? this._ngControl.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    if (this._placeholder !== value) {\n      this._placeholder = value;\n      this._placeholderChange.emit(this._placeholder);\n    }\n  }\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'type', this._type);\n    }\n  }\n/**\n * A function used to control when error messages are shown.\n */\nerrorStateMatcher: ErrorStateMatcher;\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) { this._elementRef.nativeElement.value = value; }\n/**\n * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n */\n_placeholderChange = new EventEmitter<string>();\n/**\n * Whether the input is empty.\n * @return {?}\n */\nget empty() {\n    return !this._isNeverEmpty() &&\n        (this.value == null || this.value === '') &&\n        // Check if the input contains bad input. If so, we know that it only appears empty because\n        // the value failed to parse. From the user's perspective it is not empty.\n        // TODO(mmalerba): Add e2e test for bad input case.\n        !this._isBadInput();\n  }\n/**\n * @return {?}\n */\nprivate get _uid() { return this._cachedUid = this._cachedUid || `md-input-${nextUniqueId++}`; }\nprivate _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _ngControl\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} errorOptions\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _platform: Platform,\npublic _ngControl: NgControl,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\n                errorOptions: ErrorOptions) {\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    this._errorOptions = errorOptions ? errorOptions : {};\n    this.errorStateMatcher = this._errorOptions.errorStateMatcher || defaultErrorStateMatcher;\n  }\n/**\n * Focuses the input element.\n * @return {?}\n */\nfocus() { this._elementRef.nativeElement.focus(); }\n/**\n * @return {?}\n */\n_onFocus() { this.focused = true; }\n/**\n * @return {?}\n */\n_onBlur() { this.focused = false; }\n/**\n * @return {?}\n */\n_onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n/**\n * Whether the input is in an error state.\n * @return {?}\n */\n_isErrorState(): boolean {\n    const /** @type {?} */ control = this._ngControl;\n    const /** @type {?} */ form = this._parentFormGroup || this._parentForm;\n    return control && this.errorStateMatcher( /** @type {?} */((control.control as FormControl)), form);\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprivate _validateType() {\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) !== -1) {\n      throw getMdInputContainerUnsupportedTypeError(this._type);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _isNeverEmpty() { return this._neverEmptyInputTypes.indexOf(this._type) !== -1; }\n/**\n * @return {?}\n */\nprivate _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let /** @type {?} */ validity = ( /** @type {?} */((this._elementRef.nativeElement as HTMLInputElement))).validity;\n    return validity && validity.badInput;\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprivate _isTextarea() {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let /** @type {?} */ nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\n  host: {\n    'class': 'mat-input-element',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.aria-describedby]': 'ariaDescribedby || null',\n    '[attr.aria-invalid]': '_isErrorState()',\n    '(blur)': '_onBlur()',\n    '(focus)': '_onFocus()',\n    '(input)': '_onInput()',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_ERROR_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'errorStateMatcher': [{ type: Input },],\n'_placeholderChange': [{ type: Output },],\n};\n}\n\nfunction MdInputDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputDirective.ctorParameters;\n/** @type {?} */\nMdInputDirective.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMdInputDirective.prototype._type;\n/** @type {?} */\nMdInputDirective.prototype._placeholder;\n/** @type {?} */\nMdInputDirective.prototype._disabled;\n/** @type {?} */\nMdInputDirective.prototype._required;\n/** @type {?} */\nMdInputDirective.prototype._id;\n/** @type {?} */\nMdInputDirective.prototype._cachedUid;\n/** @type {?} */\nMdInputDirective.prototype._errorOptions;\n/**\n * Whether the element is focused or not.\n * @type {?}\n */\nMdInputDirective.prototype.focused;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMdInputDirective.prototype.ariaDescribedby;\n/**\n * A function used to control when error messages are shown.\n * @type {?}\n */\nMdInputDirective.prototype.errorStateMatcher;\n/**\n * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n * @type {?}\n */\nMdInputDirective.prototype._placeholderChange;\n/** @type {?} */\nMdInputDirective.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMdInputDirective.prototype._elementRef;\n/** @type {?} */\nMdInputDirective.prototype._renderer;\n/** @type {?} */\nMdInputDirective.prototype._platform;\n/** @type {?} */\nMdInputDirective.prototype._ngControl;\n/** @type {?} */\nMdInputDirective.prototype._parentForm;\n/** @type {?} */\nMdInputDirective.prototype._parentFormGroup;\n}\n\n/**\n * Container for text inputs that applies Material Design styling and behavior.\n */\nexport class MdInputContainer implements AfterViewInit, AfterContentInit, AfterContentChecked {\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * Color of the input divider, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use color instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() { return this._floatPlaceholder === 'always'; }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the input hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `md-input-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Reference to the input's underline element.\n */\nunderlineRef: ElementRef;\n\n   _mdInputChild: MdInputDirective;\n\n   _placeholderChild: MdPlaceholder;\n\n   _errorChildren: QueryList<MdErrorDirective>;\n\n   _hintChildren: QueryList<MdHint>;\n\n   _prefixChildren: QueryList<MdPrefix>;\n\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} placeholderOptions\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\n      placeholderOptions: PlaceholderOptions) {\n      this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n      this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n    }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._validateInputChild();\n    this._processHints();\n    this._validatePlaceholders();\n\n    // Re-validate when things change.\n    this._hintChildren.changes.subscribe(() => this._processHints());\n    this._mdInputChild._placeholderChange.subscribe(() => this._validatePlaceholders());\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._validateInputChild();\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ control = this._mdInputChild ? this._mdInputChild._ngControl : null;\n    return control && ( /** @type {?} */((control as any)))[prop];\n  }\n/**\n * Whether the input has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() { return !!(this._mdInputChild.placeholder || this._placeholderChild); }\n/**\n * Focuses the underlying input.\n * @return {?}\n */\n_focusInput() { this._mdInputChild.focus(); }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    let /** @type {?} */ input = this._mdInputChild;\n    return (this._errorChildren.length > 0 && input._isErrorState()) ? 'error' : 'hint';\n  }\n/**\n * Ensure that there is only one placeholder (either `input` attribute or child element with the\n * `md-placeholder` attribute.\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._mdInputChild.placeholder && this._placeholderChild) {\n      throw getMdInputContainerPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncAriaDescribedby();\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MdHint;\n      let /** @type {?} */ endHint: MdHint;\n      this._hintChildren.forEach((hint: MdHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMdInputContainerDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMdInputContainerDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the child input's `aria-describedby` to a space-separated list of the ids\n * of the currently-specified hints, as well as a generated id for the hint label.\n * @return {?}\n */\nprivate _syncAriaDescribedby() {\n    if (this._mdInputChild) {\n      let /** @type {?} */ ids: string[] = [];\n      let /** @type {?} */ startHint = this._hintChildren ?\n          this._hintChildren.find(hint => hint.align === 'start') : null;\n      let /** @type {?} */ endHint = this._hintChildren ?\n          this._hintChildren.find(hint => hint.align === 'end') : null;\n\n      if (startHint) {\n        ids.push(startHint.id);\n      } else if (this._hintLabel) {\n        ids.push(this._hintLabelId);\n      }\n\n      if (endHint) {\n        ids.push(endHint.id);\n      }\n\n      this._mdInputChild.ariaDescribedby = ids.join(' ');\n    }\n  }\n/**\n * Throws an error if the container's input child was removed.\n * @return {?}\n */\nprivate _validateInputChild() {\n    if (!this._mdInputChild) {\n      throw getMdInputContainerMissingMdInputError();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-input-container, mat-input-container',\n  templateUrl: 'input-container.html',\n  styleUrls: ['input-container.css'],\n  animations: [\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n      ])\n    ])\n  ],\n  host: {\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n    'class': 'mat-input-container',\n    '[class.mat-input-invalid]': '_mdInputChild._isErrorState()',\n    '[class.mat-focused]': '_mdInputChild.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '(click)': '_focusInput()',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_mdInputChild': [{ type: ContentChild, args: [MdInputDirective, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdErrorDirective, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdInputContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputContainer.ctorParameters;\n/** @type {?} */\nMdInputContainer.propDecorators;\n/** @type {?} */\nMdInputContainer.prototype._placeholderOptions;\n/**\n * Color of the input divider, based on the theme.\n * @type {?}\n */\nMdInputContainer.prototype.color;\n/** @type {?} */\nMdInputContainer.prototype._hideRequiredMarker;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdInputContainer.prototype._subscriptAnimationState;\n/** @type {?} */\nMdInputContainer.prototype._hintLabel;\n/** @type {?} */\nMdInputContainer.prototype._hintLabelId;\n/** @type {?} */\nMdInputContainer.prototype._floatPlaceholder;\n/**\n * Reference to the input's underline element.\n * @type {?}\n */\nMdInputContainer.prototype.underlineRef;\n/** @type {?} */\nMdInputContainer.prototype._mdInputChild;\n/** @type {?} */\nMdInputContainer.prototype._placeholderChild;\n/** @type {?} */\nMdInputContainer.prototype._errorChildren;\n/** @type {?} */\nMdInputContainer.prototype._hintChildren;\n/** @type {?} */\nMdInputContainer.prototype._prefixChildren;\n/** @type {?} */\nMdInputContainer.prototype._suffixChildren;\n/** @type {?} */\nMdInputContainer.prototype._elementRef;\n/** @type {?} */\nMdInputContainer.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, AfterViewInit, Optional, Self} from '@angular/core';\nimport {NgControl} from '@angular/forms';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements AfterViewInit {\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n */\nprivate _previousValue: string;\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n/**\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n/**\n * @return {?}\n */\nget _matAutosizeMinRows() { return this.minRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMinRows(v) { this.minRows = v; }\n/**\n * @return {?}\n */\nget _matAutosizeMaxRows() { return this.maxRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMaxRows(v) { this.maxRows = v; }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n * @param {?} formControl\n */\nconstructor(private _elementRef: ElementRef,   formControl: NgControl) {\n    if (formControl && formControl.valueChanges) {\n      formControl.valueChanges.subscribe(() => this.resizeToFitContent());\n    }\n  }\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._cacheTextareaLineHeight();\n    this.resizeToFitContent();\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    textarea.style[property] = value;\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = ''; /** @type {?} */((\n\n    textarea.parentNode)).appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight; /** @type {?} */((\n    textarea.parentNode)).removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    if (textarea.value === this._previousValue) {\n      return;\n    }\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    textarea.style.height = 'auto';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n\n    this._previousValue = textarea.value;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'textarea[md-autosize], textarea[mdTextareaAutosize],' +\n            'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'mdTextareaAutosize',\n  host: {\n    '(input)': 'resizeToFitContent()',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input, args: ['mdAutosizeMinRows', ] },],\n'maxRows': [{ type: Input, args: ['mdAutosizeMaxRows', ] },],\n'_matAutosizeMinRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n'_matAutosizeMaxRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n * @type {?}\n */\nMdTextareaAutosize.prototype._previousValue;\n/** @type {?} */\nMdTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMdTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {\n  MdErrorDirective,\n  MdHint,\n  MdInputContainer,\n  MdInputDirective,\n  MdPlaceholder,\n  MdPrefix,\n  MdSuffix\n} from './input-container';\nimport {MdTextareaAutosize} from './autosize';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {PlatformModule} from '../core/platform/index';\nexport class MdInputModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    PlatformModule,\n  ],\n  exports: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputModule.ctorParameters;\n}\n\n\n\nexport {MdTextareaAutosize} from './autosize';\nexport {MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer} from './input-container';\nexport {getMdInputContainerPlaceholderConflictError,getMdInputContainerUnsupportedTypeError,getMdInputContainerDuplicatedHintError,getMdInputContainerMissingMdInputError} from './input-container-errors';\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef} from '@angular/core';\nimport {AriaLivePoliteness, Direction} from '../core';\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MdSnackBarConfig {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n */\npoliteness?: AriaLivePoliteness = 'assertive';\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n */\nannouncementMessage?: string = '';\n/**\n * The view container to place the overlay for the snack bar into.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n */\nduration?: number = 0;\n/**\n * Extra CSS classes to be added to the snack bar container.\n */\nextraClasses?: string[];\n/**\n * Text layout direction for the snack bar.\n */\ndirection?: Direction = 'ltr';\n}\n\nfunction MdSnackBarConfig_tsickle_Closure_declarations() {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n * @type {?}\n */\nMdSnackBarConfig.prototype.politeness;\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n * @type {?}\n */\nMdSnackBarConfig.prototype.announcementMessage;\n/**\n * The view container to place the overlay for the snack bar into.\n * @type {?}\n */\nMdSnackBarConfig.prototype.viewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.duration;\n/**\n * Extra CSS classes to be added to the snack bar container.\n * @type {?}\n */\nMdSnackBarConfig.prototype.extraClasses;\n/**\n * Text layout direction for the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.direction;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\nprivate _instance: T;\n/**\n * The instance of the component making up the content of the snack bar.\n * @return {?}\n */\nget instance(): T {\n    return this._instance;\n  }\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n */\ncontainerInstance: MdSnackBarContainer;\n/**\n * Subject for notifying the user that the snack bar has closed.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n */\nprivate _afterOpened: Subject<any>;\n/**\n * Subject for notifying the user that the snack bar action was called.\n */\nprivate _onAction: Subject<any> = new Subject();\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n */\nprivate _durationTimeoutId: number;\n/**\n * @param {?} instance\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(instance: T,\n              containerInstance: MdSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\n    // Sets the readonly instance of the snack bar content component.\n    this._instance = instance;\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit().subscribe(() => this._finishDismiss());\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n/**\n * Dismisses the snack bar after some duration\n * @param {?} duration\n * @return {?}\n */\n_dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\n_action(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\n    this._overlayRef.dispose();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\n    return this.containerInstance._onEnter();\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\nfunction MdSnackBarRef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarRef.prototype._instance;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n * @type {?}\n */\nMdSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMdSnackBarRef.prototype._onAction;\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n * @type {?}\n */\nMdSnackBarRef.prototype._durationTimeoutId;\n/** @type {?} */\nMdSnackBarRef.prototype._overlayRef;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal,\n  PortalHostDirective,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {first} from '../core/rxjs/index';\n\n\n\nexport type SnackBarState = 'initial' | 'visible' | 'complete' | 'void';\n\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Subject for notifying that the snack bar has exited from view.\n */\nprivate onExit: Subject<any> = new Subject();\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n */\nprivate onEnter: Subject<any> = new Subject();\n/**\n * The state of the snack bar animations.\n */\nanimationState: SnackBarState = 'initial';\n/**\n * The snack bar configuration.\n */\nsnackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    if (this.snackBarConfig.extraClasses) {\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\n      // to pass in an array or a space-separated list.\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\n        this._renderer.addClass(this._elementRef.nativeElement, cssClass);\n      }\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @return {?}\n */\nattachTemplatePortal(): Map<string, any> {\n    throw Error('Not yet implemented');\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\n    if (event.toState === 'void' || event.toState === 'complete') {\n      this._completeExit();\n    }\n\n    if (event.toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const /** @type {?} */ onEnter = this.onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\n    this.animationState = 'visible';\n  }\n/**\n * Returns an observable resolving when the enter animation completes.\n * @return {?}\n */\n_onEnter(): Observable<void> {\n    this.animationState = 'visible';\n    return this.onEnter.asObservable();\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\n    this.animationState = 'complete';\n    return this._onExit();\n  }\n/**\n * Returns an observable that completes after the closing animation is done.\n * @return {?}\n */\n_onExit(): Observable<void> {\n    return this.onExit.asObservable();\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this._completeExit();\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\n * errors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\n    // Note: we shouldn't use `this` inside the zone callback,\n    // because it can cause a memory leak.\n    const /** @type {?} */ onExit = this.onExit;\n\n    first.call(this._ngZone.onMicrotaskEmpty).subscribe(() => {\n      onExit.next();\n      onExit.complete();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  host: {\n    'role': 'alert',\n    '[@state]': 'animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      state('initial', style({transform: 'translateY(100%)'})),\n      state('visible', style({transform: 'translateY(0%)'})),\n      state('complete', style({transform: 'translateY(100%)'})),\n      transition('visible => complete', animate(HIDE_ANIMATION)),\n      transition('initial => visible, void => visible', animate(SHOW_ANIMATION)),\n    ])\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype.animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation} from '@angular/core';\nimport {MdSnackBarRef} from './snack-bar-ref';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport class SimpleSnackBar {\n/**\n * The message to be shown in the snack bar.\n */\nmessage: string;\n/**\n * The label for the button in the snack bar.\n */\naction: string;\n/**\n * The instance of the component making up the content of the snack bar.\n */\nsnackBarRef: MdSnackBarRef<SimpleSnackBar>;\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    this.snackBarRef._action();\n  }\n/**\n * If the action button should be shown.\n * @return {?}\n */\nget hasAction(): boolean {\n    return !!this.action;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SimpleSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSimpleSnackBar.ctorParameters;\n/**\n * The message to be shown in the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.message;\n/**\n * The label for the button in the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.action;\n/**\n * The instance of the component making up the content of the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.snackBarRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, ComponentRef, Optional, SkipSelf} from '@angular/core';\nimport {\n  ComponentType,\n  ComponentPortal,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  LiveAnnouncer,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {extendObject} from '../core/util/object-extend';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n */\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any> | null = null;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> | null {\n    let /** @type {?} */ parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\n * currently opened snack bars.\n * \n * @template T\n * @param {?} component Component to be instantiated.\n * @param {?=} config Extra configuration for the snack bar.\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\n    config = _applyConfigDefaults(config);\n    let /** @type {?} */ overlayRef = this._createOverlay(config);\n    let /** @type {?} */ snackBarContainer = this._attachSnackBarContainer(overlayRef, config);\n    let /** @type {?} */ snackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    // If a snack bar is already in view, dismiss it and enter the new snack bar after exit\n    // animation is complete.\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    // If no snack bar is in view, enter the new snack bar.\n    } else {\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => {\n        snackBarRef._dismissAfter( /** @type {?} */(( /** @type {?} */((config)).duration)));\n      });\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n/**\n * Opens a snackbar with a message and an optional action.\n * @param {?} message The message to show in the snackbar.\n * @param {?=} action The label for the snackbar action.\n * @param {?=} config Additional configuration options for the snackbar.\n * @return {?}\n */\nopen(message: string, action = '', config?: MdSnackBarConfig): MdSnackBarRef<SimpleSnackBar> {\n    let /** @type {?} */ _config = _applyConfigDefaults(config);\n    _config.announcementMessage = message;\n\n    let /** @type {?} */ simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, _config);\n    simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;\n    simpleSnackBarRef.instance.message = message;\n    simpleSnackBarRef.instance.action = action;\n    return simpleSnackBarRef;\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n\n    // The snackbar animation needs the content to be resolved in order to transform the bar\n    // out of the view initially (so it can slide in). To make the content resolve, we manually\n    // detect changes.\n    containerRef.changeDetectorRef.detectChanges();\n\n    return containerRef.instance;\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} container\n * @param {?} overlayRef\n * @return {?}\n */\nprivate _attachSnackbarContent<T>(component: ComponentType<T>,\n                                    container: MdSnackBarContainer,\n                                    overlayRef: OverlayRef): MdSnackBarRef<T> {\n    let /** @type {?} */ portal = new ComponentPortal(component);\n    let /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n    return new MdSnackBarRef(contentRef.instance, container, overlayRef);\n  }\n/**\n * Creates a new overlay and places it in the correct location.\n * @param {?} config The user-specified snack bar config.\n * @return {?}\n */\nprivate _createOverlay(config: MdSnackBarConfig): OverlayRef {\n    let /** @type {?} */ state = new OverlayState();\n    state.direction = config.direction;\n    state.positionStrategy = this._overlay.position().global().centerHorizontally().bottom('0');\n    return this._overlay.create(state);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param {?=} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MdSnackBarConfig): MdSnackBarConfig {\n  return extendObject(new MdSnackBarConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {OverlayModule, PortalModule, MdCommonModule, LIVE_ANNOUNCER_PROVIDER} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdSnackBar} from './snack-bar';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nexport class MdSnackBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MdCommonModule,\n  ],\n  exports: [MdSnackBarContainer, MdCommonModule],\n  declarations: [MdSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MdSnackBarContainer, SimpleSnackBar],\n  providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSnackBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarModule.ctorParameters;\n}\n\n\n\nexport {MdSnackBar} from './snack-bar';\nexport {SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer} from './snack-bar-container';\nexport {MdSnackBarConfig} from './snack-bar-config';\nexport {MdSnackBarRef} from './snack-bar-ref';\nexport {SimpleSnackBar} from './simple-snack-bar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Renderer2,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit, Directive\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '../core';\nimport {coerceToNumber} from './grid-list-measure';\nexport class MdGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * Amount of rows that the grid tile takes up.\n * @return {?}\n */\nget rowspan() { return this._rowspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset rowspan(value) { this._rowspan = coerceToNumber(value); }\n/**\n * Amount of columns that the grid tile takes up.\n * @return {?}\n */\nget colspan() { return this._colspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset colspan(value) { this._colspan = coerceToNumber(value); }\n/**\n * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n * \"Changed after checked\" errors that would occur with HostBinding.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\n_setStyle(property: string, value: string): void {\n    this._renderer.setStyle(this._element.nativeElement, property, value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile, mat-grid-tile',\n  host: {\n    'role': 'listitem',\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'rowspan': [{ type: Input },],\n'colspan': [{ type: Input },],\n};\n}\n\nfunction MdGridTile_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTile.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTile.ctorParameters;\n/** @type {?} */\nMdGridTile.propDecorators;\n/** @type {?} */\nMdGridTile.prototype._rowspan;\n/** @type {?} */\nMdGridTile.prototype._colspan;\n/** @type {?} */\nMdGridTile.prototype._renderer;\n/** @type {?} */\nMdGridTile.prototype._element;\n}\n\nexport class MdGridTileText implements AfterContentInit {\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n */\n_lineSetter: MdLineSetter;\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n};\n}\n\nfunction MdGridTileText_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileText.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileText.ctorParameters;\n/** @type {?} */\nMdGridTileText.propDecorators;\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n * @type {?}\n */\nMdGridTileText.prototype._lineSetter;\n/** @type {?} */\nMdGridTileText.prototype._lines;\n/** @type {?} */\nMdGridTileText.prototype._renderer;\n/** @type {?} */\nMdGridTileText.prototype._element;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-grid-avatar], [mat-grid-avatar], [mdGridAvatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileHeaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-header, mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileHeaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileHeaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileHeaderCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileFooterCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-footer, mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileFooterCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileFooterCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileFooterCssMatStyler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n * \n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n * \n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n * \n * \\@docs-private\n */\nexport class TileCoordinator {\n/**\n * Tracking array (see class description).\n */\ntracker: number[];\n/**\n * Index at which the search for the next gap will start.\n */\ncolumnIndex: number = 0;\n/**\n * The current row index.\n */\nrowIndex: number = 0;\n/**\n * Gets the total number of rows occupied by tiles\n * @return {?}\n */\nget rowCount(): number { return this.rowIndex + 1; }\n/**\n * Gets the total span of rows occupied by tiles.\n * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n * @return {?}\n */\nget rowspan() {\n    let /** @type {?} */ lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n/**\n * The computed (row, col) position of each tile (the output).\n */\npositions: TilePosition[];\n/**\n * @param {?} numColumns\n * @param {?} tiles\n */\nconstructor(numColumns: number, tiles: QueryList<MdGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n/**\n * Calculates the row and col position of a tile.\n * @param {?} tile\n * @return {?}\n */\nprivate _trackTile(tile: MdGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n/**\n * Finds the next available space large enough to fit the tile.\n * @param {?} tileCols\n * @return {?}\n */\nprivate _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`md-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let /** @type {?} */ gapStartIndex = -1;\n    let /** @type {?} */ gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n/**\n * Move \"down\" to the next row.\n * @return {?}\n */\nprivate _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n/**\n * Finds the end index (exclusive) of a gap given the index from which to start looking.\n * The gap ends when a non-zero value is found.\n * @param {?} gapStartIndex\n * @return {?}\n */\nprivate _findGapEndIndex(gapStartIndex: number): number {\n    for (let /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n/**\n * Update the tile tracker to account for the given tile in the given space.\n * @param {?} start\n * @param {?} tile\n * @return {?}\n */\nprivate _markTilePosition(start: number, tile: MdGridTile): void {\n    for (let /** @type {?} */ i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\nfunction TileCoordinator_tsickle_Closure_declarations() {\n/**\n * Tracking array (see class description).\n * @type {?}\n */\nTileCoordinator.prototype.tracker;\n/**\n * Index at which the search for the next gap will start.\n * @type {?}\n */\nTileCoordinator.prototype.columnIndex;\n/**\n * The current row index.\n * @type {?}\n */\nTileCoordinator.prototype.rowIndex;\n/**\n * The computed (row, col) position of each tile (the output).\n * @type {?}\n */\nTileCoordinator.prototype.positions;\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nexport class TilePosition {\n/**\n * @param {?} row\n * @param {?} col\n */\nconstructor(public row: number,\npublic col: number) {}\n}\n\nfunction TilePosition_tsickle_Closure_declarations() {\n/** @type {?} */\nTilePosition.prototype.row;\n/** @type {?} */\nTilePosition.prototype.col;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n/**\n * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n * because these properties haven't been calculated by that point.\n * \n * @param {?} gutterSize Size of the grid's gutter.\n * @param {?} tracker Instance of the TileCoordinator.\n * @param {?} cols Amount of columns in the grid.\n * @param {?} direction Layout direction of the grid.\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n/**\n * Computes the amount of space a single 1x1 tile would take up (width or height).\n * Used as a basis for other calculations.\n * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n */\ngetBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - ( ${this._gutterSize} * ${gutterFraction} ))`;\n  }\n/**\n * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} offset Number of tiles that have already been rendered in the row/column.\n * @return {?} Position of the tile as a CSS calc() expression.\n */\ngetTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n/**\n * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} span The tile's rowspan or colspan.\n * @return {?} Size of the tile as a CSS calc() expression.\n */\ngetTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n/**\n * Sets the style properties to be applied to a tile for the given row and column index.\n * @param {?} tile Tile to which to apply the styling.\n * @param {?} rowIndex Index of the tile's row.\n * @param {?} colIndex Index of the tile's column.\n * @return {?}\n */\nsetStyle(tile: MdGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n/**\n * Sets the horizontal placement of the tile in the list.\n * @param {?} tile\n * @param {?} colIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetColStyles(tile: MdGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n/**\n * Calculates the total size taken up by gutters across one axis of a list.\n * @return {?}\n */\ngetGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n/**\n * Calculates the total size taken up by tiles across one axis of a list.\n * @param {?} tileHeight Height of the tile.\n * @return {?}\n */\ngetTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n/**\n * Sets the vertical placement of the tile in the list.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @abstract\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number) {}\n/**\n * Calculates the computed height and returns the correct style property to set.\n * This method can be implemented by each type of TileStyler.\n * \\@docs-private\n * @return {?}\n */\ngetComputedHeight(): [string, string] | null { return null; }\n}\n\nfunction TileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nTileStyler.prototype._gutterSize;\n/** @type {?} */\nTileStyler.prototype._rows;\n/** @type {?} */\nTileStyler.prototype._rowspan;\n/** @type {?} */\nTileStyler.prototype._cols;\n/** @type {?} */\nTileStyler.prototype._direction;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n/**\n * @param {?} fixedRowHeight\n */\nconstructor(public fixedRowHeight: string) { super(); }\n/**\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n}\n\nfunction FixedTileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nFixedTileStyler.prototype.fixedRowHeight;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n/**\n * Ratio width:height given by user to determine row height.\n */\nrowHeightRatio: number;\n  baseTileHeight: string;\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use paddingTop and marginTop to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _parseRatio(value: string): void {\n    let /** @type {?} */ ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`md-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\nfunction RatioTileStyler_tsickle_Closure_declarations() {\n/**\n * Ratio width:height given by user to determine row height.\n * @type {?}\n */\nRatioTileStyler.prototype.rowHeightRatio;\n/** @type {?} */\nRatioTileStyler.prototype.baseTileHeight;\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n * \n * \\@docs-private\n */\nexport class FitTileStyler extends TileStyler {\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer2,\n  ElementRef,\n  Optional,\n} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '../core';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst /** @type {?} */ MD_FIT_MODE = 'fit';\nexport class MdGridList implements OnInit, AfterContentChecked {\n/**\n * Number of columns being rendered.\n */\nprivate _cols: number;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n */\nprivate _rowHeight: string;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n */\nprivate _gutter: string = '1px';\n/**\n * Sets position and size styles for a tile\n */\nprivate _tileStyler: TileStyler;\n/**\n * Query list of tiles that are being rendered.\n */\n_tiles: QueryList<MdGridTile>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _dir\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _dir: Directionality) {}\n/**\n * Amount of columns in the grid list.\n * @return {?}\n */\nget cols() { return this._cols; }\n/**\n * @param {?} value\n * @return {?}\n */\nset cols(value: any) { this._cols = coerceToNumber(value); }\n/**\n * Size of the grid list's gutter in pixels.\n * @return {?}\n */\nget gutterSize() { return this._gutter; }\n/**\n * @param {?} value\n * @return {?}\n */\nset gutterSize(value: any) { this._gutter = coerceToString(value); }\n/**\n * Set internal representation of row height from the user-provided value.\n * @param {?} value\n * @return {?}\n */\nset rowHeight(value: string | number) {\n    this._rowHeight = coerceToString(value);\n    this._setTileStyler();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n/**\n * The layout calculation is fairly cheap if nothing changes, so there's little cost\n * to run it frequently.\n * @return {?}\n */\nngAfterContentChecked() {\n    this._layoutTiles();\n  }\n/**\n * Throw a friendly error if cols property is missing\n * @return {?}\n */\nprivate _checkCols() {\n    if (!this.cols) {\n      throw Error(`md-grid-list: must pass in number of columns. ` +\n                      `Example: <md-grid-list cols=\"3\">`);\n    }\n  }\n/**\n * Default to equal width:height if rowHeight property is missing\n * @return {?}\n */\nprivate _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._tileStyler = new RatioTileStyler('1:1');\n    }\n  }\n/**\n * Creates correct Tile Styler subtype based on rowHeight passed in by user\n * @return {?}\n */\nprivate _setTileStyler(): void {\n    if (this._rowHeight === MD_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(this._rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(this._rowHeight);\n    }\n  }\n/**\n * Computes and applies the size and position for all children grid tiles.\n * @return {?}\n */\nprivate _layoutTiles(): void {\n    let /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n    let /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      let /** @type {?} */ pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n/**\n * Sets style on the main grid-list element, given the style name and value.\n * @param {?} style\n * @return {?}\n */\n_setListStyle(style: [string, string] | null): void {\n    if (style) {\n      this._renderer.setStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-list, mat-grid-list',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'role': 'list',\n    'class': 'mat-grid-list',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tiles': [{ type: ContentChildren, args: [MdGridTile, ] },],\n'cols': [{ type: Input },],\n'gutterSize': [{ type: Input },],\n'rowHeight': [{ type: Input },],\n};\n}\n\nfunction MdGridList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridList.ctorParameters;\n/** @type {?} */\nMdGridList.propDecorators;\n/**\n * Number of columns being rendered.\n * @type {?}\n */\nMdGridList.prototype._cols;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n * @type {?}\n */\nMdGridList.prototype._rowHeight;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n * @type {?}\n */\nMdGridList.prototype._gutter;\n/**\n * Sets position and size styles for a tile\n * @type {?}\n */\nMdGridList.prototype._tileStyler;\n/**\n * Query list of tiles that are being rendered.\n * @type {?}\n */\nMdGridList.prototype._tiles;\n/** @type {?} */\nMdGridList.prototype._renderer;\n/** @type {?} */\nMdGridList.prototype._element;\n/** @type {?} */\nMdGridList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdLineModule, MdCommonModule} from '../core';\nimport {\n  MdGridTile, MdGridTileText, MdGridTileFooterCssMatStyler,\n  MdGridTileHeaderCssMatStyler, MdGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MdGridList} from './grid-list';\nexport class MdGridListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdCommonModule],\n  exports: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdLineModule,\n    MdCommonModule,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridListModule.ctorParameters;\n}\n\n\n\nexport {MdGridList} from './grid-list';\nexport {MdGridTile} from './grid-tile';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive\n} from '@angular/core';\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardContent {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-content, mat-card-content',\n  host: {'class': 'mat-card-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardContent.ctorParameters;\n}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-title, mat-card-title, [md-card-title], [mat-card-title],' +\n  '[mdCardTitle], [matCardTitle]',\n  host: {\n    'class': 'mat-card-title '\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitle.ctorParameters;\n}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardSubtitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-subtitle, mat-card-subtitle, [md-card-subtitle], [mat-card-subtitle],' +\n  '[mdCardSubtitle], [matCardSubtitle]',\n  host: {\n    'class': 'mat-card-subtitle '\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSubtitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSubtitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSubtitle.ctorParameters;\n}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardActions {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-actions, mat-card-actions',\n  host: {'class': 'mat-card-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardActions.ctorParameters;\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardFooter {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-footer, mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardFooter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardFooter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardFooter.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-image], [mat-card-image], [mdCardImage], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardSmImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-sm-image], [mat-card-sm-image], [mdCardImageSmall], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSmImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSmImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSmImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardMdImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-md-image], [mat-card-md-image], [mdCardImageMedium], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardMdImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardMdImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardMdImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardLgImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-lg-image], [mat-card-lg-image], [mdCardImageLarge], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardLgImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardLgImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardLgImage.ctorParameters;\n}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardXlImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-xl-image], [mat-card-xl-image], [mdCardImageXLarge], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardXlImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardXlImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardXlImage.ctorParameters;\n}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardAvatar {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-avatar], [mat-card-avatar], [mdCardAvatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardAvatar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardAvatar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardAvatar.ctorParameters;\n}\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n * \n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - md-card-title\n * - md-card-subtitle\n * - md-card-content\n * - md-card-actions\n * - md-card-footer\n */\nexport class MdCard {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card, mat-card',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCard_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCard.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCard.ctorParameters;\n}\n\n/**\n * Component intended to be used within the `<md-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nexport class MdCardHeader {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-header, mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardHeader.ctorParameters;\n}\n\n/**\n * Component intended to be used within the <md-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nexport class MdCardTitleGroup {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-title-group, mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitleGroup.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {\n  MdCard,\n  MdCardHeader,\n  MdCardTitleGroup,\n  MdCardContent,\n  MdCardTitle,\n  MdCardSubtitle,\n  MdCardActions,\n  MdCardFooter,\n  MdCardSmImage,\n  MdCardMdImage,\n  MdCardLgImage,\n  MdCardImage,\n  MdCardXlImage,\n  MdCardAvatar,\n} from './card';\nexport class MdCardModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdCard,\n    MdCardHeader,\n    MdCardTitleGroup,\n    MdCardContent,\n    MdCardTitle,\n    MdCardSubtitle,\n    MdCardActions,\n    MdCardFooter,\n    MdCardSmImage,\n    MdCardMdImage,\n    MdCardLgImage,\n    MdCardImage,\n    MdCardXlImage,\n    MdCardAvatar,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n    MdCardActions, MdCardFooter, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardImage,\n    MdCardXlImage, MdCardAvatar,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardModule.ctorParameters;\n}\n\n\n\nexport {MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardImage,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup} from './card';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n} from '@angular/core';\n\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '@angular/cdk';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\n/**\n * \\@docs-private\n */\nexport class MdChipBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdChipBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipBase.prototype._renderer;\n/** @type {?} */\nMdChipBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdChipMixinBase = mixinColor(mixinDisabled(MdChipBase), 'primary');\n/**\n * Dummy directive to add CSS class to basic chips.\n * \\@docs-private\n */\nexport class MdBasicChip { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdBasicChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdBasicChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdBasicChip.ctorParameters;\n}\n\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip extends _MdChipMixinBase implements Focusable, OnDestroy, CanColor, CanDisable {\n/**\n * Whether the chip is selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    (this.selected ? this.select : this.deselect).emit({chip: this});\n  }\n  protected _selected: boolean = false;\n/**\n * Whether the chip has focus.\n */\n_hasFocus: boolean = false;\n/**\n * Emitted when the chip is focused.\n */\nonFocus = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is selected.\n */\nselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is deselected.\n */\ndeselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroy = new EventEmitter<MdChipEvent>();\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroy.emit({chip: this});\n  }\n/**\n * Toggles the current selected state of this chip.\n * @return {?} Whether the chip is selected.\n */\ntoggleSelected(): boolean {\n    this.selected = !this.selected;\n    return this.selected;\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n    this.onFocus.emit({chip: this});\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      this.focus();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  host: {\n    'class': 'mat-chip',\n    'tabindex': '-1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_handleClick($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_hasFocus = false',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selected': [{ type: Input },],\n'select': [{ type: Output },],\n'deselect': [{ type: Output },],\n'destroy': [{ type: Output },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/** @type {?} */\nMdChip.prototype._selected;\n/**\n * Whether the chip has focus.\n * @type {?}\n */\nMdChip.prototype._hasFocus;\n/**\n * Emitted when the chip is focused.\n * @type {?}\n */\nMdChip.prototype.onFocus;\n/**\n * Emitted when the chip is selected.\n * @type {?}\n */\nMdChip.prototype.select;\n/**\n * Emitted when the chip is deselected.\n * @type {?}\n */\nMdChip.prototype.deselect;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Input,\n  QueryList,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\n\nimport {MdChip} from './chip';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {SPACE, LEFT_ARROW, RIGHT_ARROW, TAB} from '../core/keyboard/keycodes';\nimport {coerceBooleanProperty} from '@angular/cdk';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n * \n * Example:\n * \n *     <md-chip-list>\n *       <md-chip>Chip 1<md-chip>\n *       <md-chip>Chip 2<md-chip>\n *     </md-chip-list>\n */\nexport class MdChipList implements AfterContentInit, OnDestroy {\n/**\n * Track which chips we're listening to for focus/destruction.\n */\nprivate _subscribed: WeakMap<MdChip, boolean> = new WeakMap();\n/**\n * Subscription to tabbing out from the chip list.\n */\nprivate _tabOutSubscription: Subscription;\n/**\n * Whether or not the chip is selectable.\n */\nprotected _selectable: boolean = true;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager;\n/**\n * The chip components contained within this chip list.\n */\nchips: QueryList<MdChip>;\n/**\n * Tab index for the chip list.\n */\n_tabIndex = 0;\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = 0);\n    });\n\n    // Go ahead and subscribe all of the initial chips\n    this._subscribeChips(this.chips);\n\n    // When the list changes, re-subscribe\n    this.chips.changes.subscribe((chips: QueryList<MdChip>) => {\n      this._subscribeChips(chips);\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._tabOutSubscription) {\n      this._tabOutSubscription.unsubscribe();\n    }\n  }\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\n * it's selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean { return this._selectable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n/**\n * Programmatically focus the chip list. This in turn focuses the first\n * non-disabled chip in this chip list.\n * @return {?}\n */\nfocus() {\n    // TODO: ARIA says this should focus the first `selected` chip.\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * Passes relevant key presses to our key manager.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager\n    if (target && target.classList.contains('mat-chip')) {\n      switch (event.keyCode) {\n        case SPACE:\n          // If we are selectable, toggle the focused chip\n          if (this.selectable) {\n            this._toggleSelectOnFocusedChip();\n          }\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n          break;\n        case LEFT_ARROW:\n          this._keyManager.setPreviousItemActive();\n          event.preventDefault();\n          break;\n        case RIGHT_ARROW:\n          this._keyManager.setNextItemActive();\n          event.preventDefault();\n          break;\n        default:\n          this._keyManager.onKeydown(event);\n      }\n    }\n  }\n/**\n * Toggles the selected state of the currently focused chip.\n * @return {?}\n */\nprotected _toggleSelectOnFocusedChip(): void {\n    // Allow disabling of chip selection\n    if (!this.selectable) {\n      return;\n    }\n\n    let /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n\n    if (typeof focusedIndex === 'number' && this._isValidIndex(focusedIndex)) {\n      let /** @type {?} */ focusedChip: MdChip = this.chips.toArray()[focusedIndex];\n\n      if (focusedChip) {\n        focusedChip.toggleSelected();\n      }\n    }\n  }\n/**\n * Iterate through the list of chips and add them to our list of\n * subscribed chips.\n * \n * @param {?} chips The list of chips to be subscribed.\n * @return {?}\n */\nprotected _subscribeChips(chips: QueryList<MdChip>): void {\n    chips.forEach(chip => this._addChip(chip));\n  }\n/**\n * Add a specific chip to our subscribed list. If the chip has\n * already been subscribed, this ensures it is only subscribed\n * once.\n * \n * @param {?} chip The chip to be subscribed (or checked for existing\n * subscription).\n * @return {?}\n */\nprotected _addChip(chip: MdChip) {\n    // If we've already been subscribed to a parent, do nothing\n    if (this._subscribed.has(chip)) {\n      return;\n    }\n\n    // Watch for focus events outside of the keyboard navigation\n    chip.onFocus.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n    });\n\n    // On destroy, remove the item from our list, and check focus\n    chip.destroy.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        // Check whether the chip is the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n\n      this._subscribed.delete(chip);\n      chip.destroy.unsubscribe();\n    });\n\n    this._subscribed.set(chip, true);\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of chips.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-chip-list, mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  host: {\n    // Properties\n    '[attr.tabindex]': '_tabIndex',\n    'role': 'listbox',\n    'class': 'mat-chip-list',\n\n    // Events\n    '(focus)': 'focus()',\n    '(keydown)': '_keydown($event)'\n  },\n  queries: {\n    chips: new ContentChildren(MdChip)\n  },\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selectable': [{ type: Input },],\n};\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/** @type {?} */\nMdChipList.propDecorators;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._subscribed;\n/**\n * Subscription to tabbing out from the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabOutSubscription;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChipList.prototype._selectable;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/**\n * Tab index for the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabIndex;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdChipList} from './chip-list';\nimport {MdChip, MdBasicChip} from './chip';\nexport class MdChipsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [],\n  exports: [MdChipList, MdChip, MdBasicChip],\n  declarations: [MdChipList, MdChip, MdBasicChip]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipsModule.ctorParameters;\n}\n\n\n\nexport {MdChipList} from './chip-list';\nexport {MdChipEvent,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip} from './chip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty, coerceNumberProperty, HammerInput} from '../core';\nimport {Directionality} from '../core/bidi/index';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {FocusOrigin, FocusOriginMonitor} from '../core/style/focus-origin-monitor';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n/**\n * The MdSlider that changed.\n */\nsource: MdSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number | null;\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSliderBase { }\nexport const /** @type {?} */ _MdSliderMixinBase = mixinDisabled(MdSliderBase);\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider extends _MdSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable {\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) { this._invert = coerceBooleanProperty(value); }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() {\n    return this._max;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() {\n    return this._min;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = /** @type {?} */(( this._step.toString().split('.').pop())).length;\n    }\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number | null) {\n    this._value = coerceNumberProperty(v, this._value || 0);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _value: number | null = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) { this._vertical = coerceBooleanProperty(value); }\nprivate _vertical = false;\n\n   color: 'primary' | 'accent' | 'warn' = 'accent';\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MdSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n */\nprivate _renderer: SliderRenderer;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect | null = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * The last value for which a change event was emitted.\n */\nprivate _lastChangeValue: number | null;\n/**\n * The last value for which an input event was emitted.\n */\nprivate _lastInputValue: number | null;\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} _dir\n */\nconstructor(renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _dir: Directionality) {\n    super();\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, renderer, true)\n        .subscribe((origin: FocusOrigin) => this._isActive = !!origin && origin !== 'keyboard');\n    this._renderer = new SliderRenderer(this._elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    this._isSliding = false;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emits a change and input event if the value changed. */\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    this._emitInputEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    event.preventDefault();\n    this._isSliding = true;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n    this._emitValueIfChanged();\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitValueIfChanged() {\n    if (this.value != this._lastChangeValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastChangeValue = this.value;\n      this._controlValueAccessorChangeFn(this.value);\n      this.change.emit(event);\n    }\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    if (this.value != this._lastInputValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastInputValue = this.value;\n      this.input.emit(event);\n    }\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\n    let /** @type {?} */ event = new MdSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slider, mat-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color != \"primary\" && color != \"warn\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'color': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/** @type {?} */\nMdSlider.prototype.color;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._renderer;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * The last value for which a change event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastChangeValue;\n/**\n * The last value for which an input event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastInputValue;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/** @type {?} */\nMdSlider.prototype._elementRef;\n/** @type {?} */\nMdSlider.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\n/**\n * Renderer class in order to keep all dom manipulation in one place and outside of the main class.\n * \\@docs-private\n */\nexport class SliderRenderer {\nprivate _sliderElement: HTMLElement;\n/**\n * @param {?} elementRef\n */\nconstructor(elementRef: ElementRef) {\n    this._sliderElement = elementRef.nativeElement;\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\ngetSliderDimensions() {\n    let /** @type {?} */ wrapperElement = this._sliderElement.querySelector('.mat-slider-wrapper');\n    return wrapperElement ? wrapperElement.getBoundingClientRect() : null;\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\naddFocus() {\n    this._sliderElement.focus();\n  }\n}\n\nfunction SliderRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderRenderer.prototype._sliderElement;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Renderer2,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy,\n  Inject,\n} from '@angular/core';\nimport {Directionality, coerceBooleanProperty} from '../core';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {first} from '../core/rxjs/index';\nimport {DOCUMENT} from '@angular/platform-browser';\n/**\n * Throws an exception when two MdSidenav are matching the same side.\n * @param {?} align\n * @return {?}\n */\nexport function throwMdDuplicatedSidenavError(align: string) {\n  throw Error(`A sidenav was already declared for 'align=\"${align}\"'`);\n}\n/**\n * Sidenav toggle promise result.\n */\nexport class MdSidenavToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\n}\n\nfunction MdSidenavToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavToggleResult.prototype.type;\n/** @type {?} */\nMdSidenavToggleResult.prototype.animationFinished;\n}\n\n/**\n * <md-sidenav> component.\n * \n * This component corresponds to the drawer of the sidenav.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdSidenav implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\n/**\n * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n */\nprivate _align: 'start' | 'end' = 'start';\n/**\n * Direction which the sidenav is aligned in.\n * @return {?}\n */\nget align() { return this._align; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) {\n    // Make sure we have a valid value.\n    value = (value == 'end') ? 'end' : 'start';\n    if (value != this._align) {\n      this._align = value;\n      this.onAlignChanged.emit();\n    }\n  }\n/**\n * Mode of the sidenav; one of 'over', 'push' or 'side'.\n */\nmode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the sidenav can be closed with the escape key or not.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n/**\n * Whether the sidenav is opened.\n */\n_opened: boolean = false;\n/**\n * Event emitted when the sidenav is being opened. Use this to synchronize animations.\n */\nonOpenStart = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is fully opened.\n */\nonOpen = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is being closed. Use this to synchronize animations.\n */\nonCloseStart = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is fully closed.\n */\nonClose = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav alignment changes.\n */\nonAlignChanged = new EventEmitter<void>();\n/**\n * The current toggle animation promise. `null` if no animation is in progress.\n */\nprivate _toggleAnimationPromise: Promise<MdSidenavToggleResult> | null = null;\n/**\n * The current toggle animation promise resolution function.\n * `null` if no animation is in progress.\n */\nprivate _resolveToggleAnimationPromise: ((animationFinished: boolean) => void) | null = null;\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\n    // The focus trap is only enabled when the sidenav is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n/**\n * @param {?} _elementRef The DOM element reference. Used for transition and width calculation.\n *     If not available we do not hook on transitions.\n * @param {?} _focusTrapFactory\n * @param {?} _doc\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _doc: any) {\n    this.onOpen.subscribe(() => {\n      if (this._doc) {\n        this._elementFocusedBeforeSidenavWasOpened = this._doc.activeElement as HTMLElement;\n      }\n\n      if (this.isFocusTrapEnabled && this._focusTrap) {\n        this._focusTrap.focusInitialElementWhenReady();\n      }\n    });\n\n    this.onClose.subscribe(() => this._restoreFocus());\n  }\n/**\n * If focus is currently inside the sidenav, restores it to where it was before the sidenav\n * opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    let /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeSidenavWasOpened instanceof HTMLElement) {\n        this._elementFocusedBeforeSidenavWasOpened.focus();\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeSidenavWasOpened = null;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\n\n    // This can happen when the sidenav is set to opened in\n    // the template and the transition hasn't ended.\n    if (this._toggleAnimationPromise && this._resolveToggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(true);\n      this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Whether the sidenav is opened. We overload this because we trigger an event when it\n * starts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n/**\n * Open this sidenav, and return a Promise that will resolve when it's fully opened (or get\n * rejected if it didn't).\n * @return {?}\n */\nopen(): Promise<MdSidenavToggleResult> {\n    return this.toggle(true);\n  }\n/**\n * Close this sidenav, and return a Promise that will resolve when it's fully closed (or get\n * rejected if it didn't).\n * @return {?}\n */\nclose(): Promise<MdSidenavToggleResult> {\n    return this.toggle(false);\n  }\n/**\n * Toggle this sidenav. This is equivalent to calling open() when it's already opened, or\n * close() when it's closed.\n * @param {?=} isOpen Whether the sidenav should be open.\n * @return {?} Resolves with the result of whether the sidenav was opened or closed.\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MdSidenavToggleResult> {\n    // Shortcut it if we're already opened.\n    if (isOpen === this.opened) {\n      return this._toggleAnimationPromise ||\n          Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));\n    }\n\n    this._opened = isOpen;\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this.isFocusTrapEnabled;\n    }\n\n    if (isOpen) {\n      this.onOpenStart.emit();\n    } else {\n      this.onCloseStart.emit();\n    }\n\n    if (this._toggleAnimationPromise && this._resolveToggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(false);\n    }\n    this._toggleAnimationPromise = new Promise<MdSidenavToggleResult>(resolve => {\n      this._resolveToggleAnimationPromise = animationFinished =>\n          resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', animationFinished));\n    });\n    return this._toggleAnimationPromise;\n  }\n/**\n * Handles the keyboard events.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n/**\n * When transition has finished, set the internal state for classes and emit the proper event.\n * The event passed is actually of type TransitionEvent, but that type is not available in\n * Android so we use any.\n * @param {?} transitionEvent\n * @return {?}\n */\n_onTransitionEnd(transitionEvent: TransitionEvent) {\n    if (transitionEvent.target == this._elementRef.nativeElement\n        // Simpler version to check for prefixes.\n        && transitionEvent.propertyName.endsWith('transform')) {\n      if (this._opened) {\n        this.onOpen.emit();\n      } else {\n        this.onClose.emit();\n      }\n\n      if (this._toggleAnimationPromise && this._resolveToggleAnimationPromise) {\n        this._resolveToggleAnimationPromise(true);\n        this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n      }\n    }\n  }\n/**\n * @return {?}\n */\nget _isClosing() {\n    return !this._opened && !!this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isOpening() {\n    return this._opened && !!this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isClosed() {\n    return !this._opened && !this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isOpened() {\n    return this._opened && !this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isEnd() {\n    return this.align == 'end';\n  }\n/**\n * @return {?}\n */\nget _modeSide() {\n    return this.mode == 'side';\n  }\n/**\n * @return {?}\n */\nget _modeOver() {\n    return this.mode == 'over';\n  }\n/**\n * @return {?}\n */\nget _modePush() {\n    return this.mode == 'push';\n  }\n/**\n * @return {?}\n */\nget _width() {\n    if (this._elementRef.nativeElement) {\n      return this._elementRef.nativeElement.offsetWidth;\n    }\n    return 0;\n  }\nprivate _elementFocusedBeforeSidenavWasOpened: HTMLElement | null = null;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav, mat-sidenav',\n  // TODO(mmalerba): move template to separate file.\n  templateUrl: 'sidenav.html',\n  host: {\n    'class': 'mat-sidenav',\n    '(transitionend)': '_onTransitionEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-sidenav-closed]': '_isClosed',\n    '[class.mat-sidenav-closing]': '_isClosing',\n    '[class.mat-sidenav-end]': '_isEnd',\n    '[class.mat-sidenav-opened]': '_isOpened',\n    '[class.mat-sidenav-opening]': '_isOpening',\n    '[class.mat-sidenav-over]': '_modeOver',\n    '[class.mat-sidenav-push]': '_modePush',\n    '[class.mat-sidenav-side]': '_modeSide',\n    'tabIndex': '-1'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpenStart': [{ type: Output, args: ['open-start', ] },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onCloseStart': [{ type: Output, args: ['close-start', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MdSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenav.ctorParameters;\n/** @type {?} */\nMdSidenav.propDecorators;\n/** @type {?} */\nMdSidenav.prototype._focusTrap;\n/**\n * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n * @type {?}\n */\nMdSidenav.prototype._align;\n/**\n * Mode of the sidenav; one of 'over', 'push' or 'side'.\n * @type {?}\n */\nMdSidenav.prototype.mode;\n/** @type {?} */\nMdSidenav.prototype._disableClose;\n/**\n * Whether the sidenav is opened.\n * @type {?}\n */\nMdSidenav.prototype._opened;\n/**\n * Event emitted when the sidenav is being opened. Use this to synchronize animations.\n * @type {?}\n */\nMdSidenav.prototype.onOpenStart;\n/**\n * Event emitted when the sidenav is fully opened.\n * @type {?}\n */\nMdSidenav.prototype.onOpen;\n/**\n * Event emitted when the sidenav is being closed. Use this to synchronize animations.\n * @type {?}\n */\nMdSidenav.prototype.onCloseStart;\n/**\n * Event emitted when the sidenav is fully closed.\n * @type {?}\n */\nMdSidenav.prototype.onClose;\n/**\n * Event emitted when the sidenav alignment changes.\n * @type {?}\n */\nMdSidenav.prototype.onAlignChanged;\n/**\n * The current toggle animation promise. `null` if no animation is in progress.\n * @type {?}\n */\nMdSidenav.prototype._toggleAnimationPromise;\n/**\n * The current toggle animation promise resolution function.\n * `null` if no animation is in progress.\n * @type {?}\n */\nMdSidenav.prototype._resolveToggleAnimationPromise;\n/** @type {?} */\nMdSidenav.prototype._elementFocusedBeforeSidenavWasOpened;\n/** @type {?} */\nMdSidenav.prototype._elementRef;\n/** @type {?} */\nMdSidenav.prototype._focusTrapFactory;\n/** @type {?} */\nMdSidenav.prototype._doc;\n}\n\n/**\n * <md-sidenav-container> component.\n * \n * This is the parent component to one or two <md-sidenav>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport class MdSidenavContainer implements AfterContentInit {\n   _sidenavs: QueryList<MdSidenav>;\n/**\n * The sidenav child with the `start` alignment.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The sidenav child with the `end` alignment.\n * @return {?}\n */\nget end() { return this._end; }\n/**\n * Event emitted when the sidenav backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * The sidenav at the start/end alignment, independent of direction.\n */\nprivate _start: MdSidenav | null;\nprivate _end: MdSidenav | null;\n/**\n * The sidenav at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n */\nprivate _left: MdSidenav | null;\nprivate _right: MdSidenav | null;\n/**\n * Whether to enable open/close trantions.\n */\n_enableTransitions = false;\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _ngZone: NgZone) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      _dir.change.subscribe(() => this._validateDrawers());\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    // On changes, assert on consistency.\n    this._sidenavs.changes.subscribe(() => this._validateDrawers());\n    this._sidenavs.forEach((sidenav: MdSidenav) => {\n      this._watchSidenavToggle(sidenav);\n      this._watchSidenavAlign(sidenav);\n    });\n    this._validateDrawers();\n\n    // Give the view a chance to render the initial state, then enable transitions.\n    first.call(this._ngZone.onMicrotaskEmpty).subscribe(() => this._enableTransitions = true);\n  }\n/**\n * Calls `open` of both start and end sidenavs\n * @return {?}\n */\npublic open() {\n    return Promise.all([this._start, this._end]\n      .filter(sidenav => sidenav)\n      .map(sidenav => /** @type {?} */(( sidenav)).open()));\n  }\n/**\n * Calls `close` of both start and end sidenavs\n * @return {?}\n */\npublic close() {\n    return Promise.all([this._start, this._end]\n      .filter(sidenav => sidenav)\n      .map(sidenav => /** @type {?} */(( sidenav)).close()));\n  }\n/**\n * Subscribes to sidenav events in order to set a class on the main container element when the\n * sidenav is open and the backdrop is visible. This ensures any overflow on the container element\n * is properly hidden.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavToggle(sidenav: MdSidenav): void {\n    if (!sidenav || sidenav.mode === 'side') { return; }\n    sidenav.onOpen.subscribe(() => this._setContainerClass(true));\n    sidenav.onClose.subscribe(() => this._setContainerClass(false));\n  }\n/**\n * Subscribes to sidenav onAlignChanged event in order to re-validate drawers when the align\n * changes.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavAlign(sidenav: MdSidenav): void {\n    if (!sidenav) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping sides at the same time.\n    sidenav.onAlignChanged.subscribe(() =>\n        first.call(this._ngZone.onMicrotaskEmpty).subscribe(() => this._validateDrawers()));\n  }\n/**\n * Toggles the 'mat-sidenav-opened' class on the main 'md-sidenav-container' element.\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-sidenav-opened');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-sidenav-opened');\n    }\n  }\n/**\n * Validate the state of the sidenav children components.\n * @return {?}\n */\nprivate _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end sidenav.\n    // NOTE: We must call toArray on _sidenavs even though it's iterable\n    // (see https://github.com/Microsoft/TypeScript/issues/3164).\n    for (let /** @type {?} */ sidenav of this._sidenavs.toArray()) {\n      if (sidenav.align == 'end') {\n        if (this._end != null) {\n          throwMdDuplicatedSidenavError('end');\n        }\n        this._end = sidenav;\n      } else {\n        if (this._start != null) {\n          throwMdDuplicatedSidenavError('start');\n        }\n        this._start = sidenav;\n      }\n    }\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalSidenav();\n  }\n/**\n * @return {?}\n */\n_closeModalSidenav() {\n    // Close all open sidenav's where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(sidenav => sidenav && !sidenav.disableClose && sidenav.mode !== 'side')\n      .forEach(sidenav => /** @type {?} */(( sidenav)).close());\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\n    return (this._isSidenavOpen(this._start) && /** @type {?} */(( this._start)).mode != 'side')\n        || (this._isSidenavOpen(this._end) && /** @type {?} */(( this._end)).mode != 'side');\n  }\n/**\n * @param {?} side\n * @return {?}\n */\nprivate _isSidenavOpen(side: MdSidenav | null): boolean {\n    return side != null && side.opened;\n  }\n/**\n * Return the width of the sidenav, if it's in the proper mode and opened.\n * This may relayout the view, so do not call this often.\n * @param {?} sidenav\n * @param {?} mode\n * @return {?}\n */\nprivate _getSidenavEffectiveWidth(sidenav: MdSidenav, mode: string): number {\n    return (this._isSidenavOpen(sidenav) && sidenav.mode == mode) ? sidenav._width : 0;\n  }\n/**\n * @return {?}\n */\n_getMarginLeft() {\n    return this._left ? this._getSidenavEffectiveWidth(this._left, 'side') : 0;\n  }\n/**\n * @return {?}\n */\n_getMarginRight() {\n    return this._right ? this._getSidenavEffectiveWidth(this._right, 'side') : 0;\n  }\n/**\n * @return {?}\n */\n_getPositionLeft() {\n    return this._left ? this._getSidenavEffectiveWidth(this._left, 'push') : 0;\n  }\n/**\n * @return {?}\n */\n_getPositionRight() {\n    return this._right ? this._getSidenavEffectiveWidth(this._right, 'push') : 0;\n  }\n/**\n * Returns the horizontal offset for the content area.  There should never be a value for both\n * left and right, so by subtracting the right value from the left value, we should always get\n * the appropriate offset.\n * @return {?}\n */\n_getPositionOffset() {\n    return this._getPositionLeft() - this._getPositionRight();\n  }\n/**\n * This is using [ngStyle] rather than separate [style...] properties because [style.transform]\n * doesn't seem to work right now.\n * @return {?}\n */\n_getStyles() {\n    return {\n      marginLeft: `${this._getMarginLeft()}px`,\n      marginRight: `${this._getMarginRight()}px`,\n      transform: `translate3d(${this._getPositionOffset()}px, 0, 0)`\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav-container, mat-sidenav-container',\n  // Do not use ChangeDetectionStrategy.OnPush. It does not work for this component because\n  // technically it is a sibling of MdSidenav (on the content tree) and isn't updated when MdSidenav\n  // changes its state.\n  templateUrl: 'sidenav-container.html',\n  styleUrls: [\n    'sidenav.css',\n    'sidenav-transitions.css',\n  ],\n  host: {\n    'class': 'mat-sidenav-container',\n    '[class.mat-sidenav-transition]': '_enableTransitions',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_sidenavs': [{ type: ContentChildren, args: [MdSidenav, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MdSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContainer.ctorParameters;\n/** @type {?} */\nMdSidenavContainer.propDecorators;\n/** @type {?} */\nMdSidenavContainer.prototype._sidenavs;\n/**\n * Event emitted when the sidenav backdrop is clicked.\n * @type {?}\n */\nMdSidenavContainer.prototype.backdropClick;\n/**\n * The sidenav at the start/end alignment, independent of direction.\n * @type {?}\n */\nMdSidenavContainer.prototype._start;\n/** @type {?} */\nMdSidenavContainer.prototype._end;\n/**\n * The sidenav at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMdSidenavContainer.prototype._left;\n/** @type {?} */\nMdSidenavContainer.prototype._right;\n/**\n * Whether to enable open/close trantions.\n * @type {?}\n */\nMdSidenavContainer.prototype._enableTransitions;\n/** @type {?} */\nMdSidenavContainer.prototype._dir;\n/** @type {?} */\nMdSidenavContainer.prototype._element;\n/** @type {?} */\nMdSidenavContainer.prototype._renderer;\n/** @type {?} */\nMdSidenavContainer.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {MdCommonModule, GestureConfig, StyleModule} from '../core';\nimport {MdSlider} from './slider';\nimport {BidiModule} from '../core/bidi/index';\nexport class MdSliderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, FormsModule, MdCommonModule, StyleModule, BidiModule],\n  exports: [MdSlider, MdCommonModule],\n  declarations: [MdSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSliderModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,SliderRenderer} from './slider';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\nimport {A11yModule} from '../core/a11y/index';\nimport {OverlayModule} from '../core/overlay/index';\nimport {MdSidenav, MdSidenavContainer} from './sidenav';\nexport class MdSidenavModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule, A11yModule, OverlayModule],\n  exports: [MdSidenavContainer, MdSidenav, MdCommonModule],\n  declarations: [MdSidenavContainer, MdSidenav],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavModule.ctorParameters;\n}\n\n\n\nexport {throwMdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer} from './sidenav';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  Optional,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty, MdLine, MdLineSetter} from '../core';\nexport class MdListDivider {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {\n    'role': 'separator',\n    'aria-orientation': 'horizontal'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListDivider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListDivider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListDivider.ctorParameters;\n}\n\nexport class MdList {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect should be disabled on the list-items or not.\n * This flag only has an effect for `md-nav-list` components.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) { this._disableRipple = coerceBooleanProperty(value); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\n  host: {'role': 'list'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n};\n}\n\nfunction MdList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdList.ctorParameters;\n/** @type {?} */\nMdList.propDecorators;\n/** @type {?} */\nMdList.prototype._disableRipple;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-list, mat-list',\n  host: {'class': 'mat-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdNavListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-nav-list, mat-nav-list',\n  host: {'class': 'mat-nav-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNavListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNavListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNavListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdDividerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {'class': 'mat-divider'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDividerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDividerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDividerCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-avatar], [mat-list-avatar], [mdListAvatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListIconCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-icon], [mat-list-icon], [mdListIcon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListIconCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListIconCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListIconCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListSubheaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-subheader], [mat-subheader]',\n  host: {'class': 'mat-subheader'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListSubheaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListSubheaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListSubheaderCssMatStyler.ctorParameters;\n}\n\nexport class MdListItem implements AfterContentInit {\nprivate _lineSetter: MdLineSetter;\nprivate _disableRipple: boolean = false;\nprivate _isNavList: boolean = false;\n/**\n * Whether the ripple effect on click should be disabled. This applies only to list items that are\n * part of a nav list. The value of `disableRipple` on the `md-nav-list` overrides this flag.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) { this._disableRipple = coerceBooleanProperty(value); }\n\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} avatar\n * @return {?}\n */\nset _hasAvatar(avatar: MdListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-list-item-avatar');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-avatar');\n    }\n  }\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _list\n * @param {?} navList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _list: MdList,\n               navList: MdNavListCssMatStyler) {\n    this._isNavList = !!navList;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\nisRippleEnabled() {\n    return !this.disableRipple && this._isNavList && !this._list.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._renderer.addClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\n  host: {\n    'role': 'listitem',\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdList, decorators: [{ type: Optional }, ]},\n{type: MdNavListCssMatStyler, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'_hasAvatar': [{ type: ContentChild, args: [MdListAvatarCssMatStyler, ] },],\n};\n}\n\nfunction MdListItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListItem.ctorParameters;\n/** @type {?} */\nMdListItem.propDecorators;\n/** @type {?} */\nMdListItem.prototype._lineSetter;\n/** @type {?} */\nMdListItem.prototype._disableRipple;\n/** @type {?} */\nMdListItem.prototype._isNavList;\n/** @type {?} */\nMdListItem.prototype._lines;\n/** @type {?} */\nMdListItem.prototype._renderer;\n/** @type {?} */\nMdListItem.prototype._element;\n/** @type {?} */\nMdListItem.prototype._list;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdLineModule, MdRippleModule, MdCommonModule} from '../core';\nimport {\n  MdList,\n  MdListItem,\n  MdListDivider,\n  MdListAvatarCssMatStyler,\n  MdListIconCssMatStyler,\n  MdListCssMatStyler,\n  MdNavListCssMatStyler,\n  MdDividerCssMatStyler,\n  MdListSubheaderCssMatStyler,\n} from './list';\nexport class MdListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdRippleModule, MdCommonModule],\n  exports: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdLineModule,\n    MdCommonModule,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n  ],\n  declarations: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListModule.ctorParameters;\n}\n\n\n\nexport {MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem} from './list';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  OnDestroy,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {\n  RippleRef,\n  UniqueSelectionDispatcher,\n  MdRipple,\n  FocusOriginMonitor,\n  FocusOrigin,\n} from '../core';\nimport {coerceBooleanProperty} from '@angular/cdk';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdRadioGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nexport class MdRadioChange {\n/**\n * The MdRadioButton that emits the change event.\n */\nsource: MdRadioButton | null;\n/**\n * The value of the MdRadioButton.\n */\nvalue: any;\n}\n\nfunction MdRadioChange_tsickle_Closure_declarations() {\n/**\n * The MdRadioButton that emits the change event.\n * @type {?}\n */\nMdRadioChange.prototype.source;\n/**\n * The value of the MdRadioButton.\n * @type {?}\n */\nMdRadioChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioGroupBase { }\nexport const /** @type {?} */ _MdRadioGroupMixinBase = mixinDisabled(MdRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nexport class MdRadioGroup extends _MdRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n */\nprivate _name: string = `md-radio-group-${_uniqueIdCounter++}`;\n/**\n * The currently selected radio button. Should match value.\n */\nprivate _selected: MdRadioButton | null = null;\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n */\nprivate _labelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio group is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * The method to be called in order to update ngModel\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n */\nonTouched: () => any = () => {};\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * Child radio buttons.\n */\n_radios: QueryList<MdRadioButton>;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @return {?}\n */\nget labelPosition() {\n    return this._labelPosition;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n/**\n * Whether the radio group is diabled\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = value;\n    this._markRadiosForCheck();\n  }\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * Initialize properties once content children are available.\n * This allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\n    this._isInitialized = true;\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n * radio buttons upon their blur.\n * @return {?}\n */\n_touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    if (this._isInitialized) {\n      let /** @type {?} */ event = new MdRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n/**\n * @return {?}\n */\n_markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the control should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-radio-group, mat-radio-group',\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MdRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioGroup.ctorParameters;\n/** @type {?} */\nMdRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n * @type {?}\n */\nMdRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMdRadioGroup.prototype._name;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMdRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMdRadioGroup.prototype._isInitialized;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMdRadioGroup.prototype._labelPosition;\n/**\n * Whether the radio group is disabled.\n * @type {?}\n */\nMdRadioGroup.prototype._disabled;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMdRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n * @type {?}\n */\nMdRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMdRadioGroup.prototype._radios;\n/** @type {?} */\nMdRadioGroup.prototype._changeDetector;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdRadioButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButtonBase.prototype._renderer;\n/** @type {?} */\nMdRadioButtonBase.prototype._elementRef;\n}\n\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const /** @type {?} */ _MdRadioButtonMixinBase = mixinColor(MdRadioButtonBase, 'accent');\n/**\n * A radio-button. May be inside of\n */\nexport class MdRadioButton extends _MdRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor {\n/**\n * The unique ID for the radio button.\n */\nid: string = `md-radio-${_uniqueIdCounter++}`;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n */\nariaLabel: string;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n */\nariaLabelledby: string;\n/**\n * Whether the ripple effect for this radio button is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\n    this._labelPosition = value;\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * The parent radio group. May or may not be present.\n */\nradioGroup: MdRadioGroup;\n/**\n * ID of the native input element inside `<md-radio-button>`\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * Whether this radio is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Whether this radio is disabled.\n */\nprivate _disabled: boolean;\n/**\n * Value assigned to this radio.\n */\nprivate _value: any = null;\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean;\n/**\n * The child ripple instance.\n */\n_ripple: MdRipple;\n/**\n * Reference to the current focus ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Unregister function for _radioDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * The native `<input type=radio>` element\n */\n_inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _changeDetector\n * @param {?} _focusOriginMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MdRadioGroup,\n              elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _changeDetector: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\n    super(renderer, elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Marks the radio button as needing checking for change detection.\n * This method is exposed because the parent radio group will directly\n * update bound properties of the radio button.\n * @return {?}\n */\n_markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\n * Clicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    let /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-radio-button, mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'disableRipple': [{ type: Input },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MdRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioButton.ctorParameters;\n/** @type {?} */\nMdRadioButton.propDecorators;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMdRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMdRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMdRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMdRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disabled;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMdRadioButton.prototype._value;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disableRipple;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMdRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMdRadioButton.prototype._focusRipple;\n/**\n * Unregister function for _radioDispatcher *\n * @type {?}\n */\nMdRadioButton.prototype._removeUniqueSelectionListener;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMdRadioButton.prototype._inputElement;\n/** @type {?} */\nMdRadioButton.prototype._changeDetector;\n/** @type {?} */\nMdRadioButton.prototype._focusOriginMonitor;\n/** @type {?} */\nMdRadioButton.prototype._radioDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\nimport {\n  MdRippleModule,\n  MdCommonModule,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  FocusOriginMonitor,\n} from '../core';\nimport {MdRadioGroup, MdRadioButton} from './radio';\nexport class MdRadioModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule],\n  exports: [MdRadioGroup, MdRadioButton, MdCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER, FocusOriginMonitor],\n  declarations: [MdRadioGroup, MdRadioButton],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRadioModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioModule.ctorParameters;\n}\n\n\n\nexport {MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton} from './radio';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself and whether or not it is currently disabled.\n */\nexport interface Focusable extends CanDisable {\n  focus(): void;\n}\nexport class FocusKeyManager extends ListKeyManager<Focusable> {\n/**\n * @param {?} items\n */\nconstructor(items: QueryList<Focusable>) {\n    super(items);\n  }\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds focuses the newly active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.focus();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n/**\n * This animation shrinks the placeholder text to 75% of its normal size and translates\n * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,\n * depending on the text direction of the application.\n */\nexport const transformPlaceholder: AnimationTriggerMetadata = trigger('transformPlaceholder', [\n  state('floating-ltr', style({\n    top: '-22px',\n    left: '-2px',\n    transform: 'scale(0.75)'\n  })),\n  state('floating-rtl', style({\n    top: '-22px',\n    left: '2px',\n    transform: 'scale(0.75)'\n  })),\n  transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n]);\n/**\n * This animation transforms the select's overlay panel on and off the page.\n * \n * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n * \n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })),\n  state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: 'scaleY(0)'\n    }),\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","\n/**\n * Returns an exception to be thrown when attempting to change a s\n * elect's `multiple` option after initialization.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectNonArrayValueError(): Error {\n  return Error('Cannot assign truthy non-array value to select in `multiple` mode.');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdSelect} from './select';\nimport {MdCommonModule, OverlayModule, MdOptionModule} from '../core';\nexport class MdSelectModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdOptionModule,\n    MdCommonModule,\n  ],\n  exports: [MdSelect, MdOptionModule, MdCommonModule],\n  declarations: [MdSelect],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectModule.ctorParameters;\n}\n\n\n\nexport {SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelect} from './select';\nexport {fadeInContent, transformPanel, transformPlaceholder} from './select-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  applyCssTransform,\n  coerceBooleanProperty,\n  FocusOrigin,\n  FocusOriginMonitor,\n  HammerInput,\n  MdRipple,\n  RippleRef,\n  Platform,\n} from '../core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n\n\nexport const /** @type {?} */ MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlideToggle),\n  multi: true\n};\nexport class MdSlideToggleChange {\n  source: MdSlideToggle;\n  checked: boolean;\n}\n\nfunction MdSlideToggleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleChange.prototype.source;\n/** @type {?} */\nMdSlideToggleChange.prototype.checked;\n}\n\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet /** @type {?} */ nextId = 0;\n/**\n * \\@docs-private\n */\nexport class MdSlideToggleBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSlideToggleBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleBase.prototype._renderer;\n/** @type {?} */\nMdSlideToggleBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSlideToggleMixinBase = mixinColor(mixinDisabled(MdSlideToggleBase), 'accent');\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nexport class MdSlideToggle extends _MdSlideToggleMixinBase\n    implements OnDestroy, AfterContentInit, ControlValueAccessor, CanDisable, CanColor {\nprivate onChange = (_: any) => {};\nprivate onTouched = () => {};\nprivate _uniqueId = `md-slide-toggle-${++nextId}`;\nprivate _checked: boolean = false;\nprivate _slideRenderer: SlideToggleRenderer;\nprivate _required: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Reference to the focus state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Used to set the aria-label attribute on the underlying input element.\n */\nariaLabel: string | null = null;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n */\nariaLabelledby: string | null = null;\n/**\n * Whether the slide-toggle is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the ripple effect for this slide-toggle is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n */\nchange: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Reference to the underlying input element.\n */\n_inputElement: ElementRef;\n/**\n * Reference to the ripple directive on the thumb container.\n */\n_ripple: MdRipple;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _platform\n * @param {?} _focusOriginMonitor\n * @param {?} _changeDetectorRef\n */\nconstructor(elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _platform: Platform,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * The onChangeEvent method will be also called on click.\n * This is because everything for the slide-toggle is wrapped inside of a label,\n * which triggers a onChange event on click.\n * @param {?} event\n * @return {?}\n */\n_onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Once a drag is currently in progress, we do not want to toggle the slide-toggle on a click.\n    if (!this.disabled && !this._slideRenderer.dragging) {\n      this.toggle();\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    this.onTouched();\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.checked = value;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n/**\n * Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the slide-toggle.\n * @return {?}\n */\nfocus() {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Whether the slide-toggle is checked.\n * @return {?}\n */\nget checked() { return !!this._checked; }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value) {\n    if (this.checked !== !!value) {\n      this._checked = value;\n      this.onChange(this._checked);\n    }\n  }\n/**\n * Toggles the checked state of the slide-toggle.\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n/**\n * Emits the change event to the `change` output EventEmitter\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n/**\n * @return {?}\n */\n_onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      let /** @type {?} */ _previousChecked = this.checked;\n      this.checked = this._slideRenderer.dragPercentage > 50;\n\n      if (_previousChecked !== this.checked) {\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slide-toggle, mat-slide-toggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: FocusOriginMonitor, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'id': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'required': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'change': [{ type: Output },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n};\n}\n\nfunction MdSlideToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggle.ctorParameters;\n/** @type {?} */\nMdSlideToggle.propDecorators;\n/** @type {?} */\nMdSlideToggle.prototype.onChange;\n/** @type {?} */\nMdSlideToggle.prototype.onTouched;\n/** @type {?} */\nMdSlideToggle.prototype._uniqueId;\n/** @type {?} */\nMdSlideToggle.prototype._checked;\n/** @type {?} */\nMdSlideToggle.prototype._slideRenderer;\n/** @type {?} */\nMdSlideToggle.prototype._required;\n/** @type {?} */\nMdSlideToggle.prototype._disableRipple;\n/**\n * Reference to the focus state ripple.\n * @type {?}\n */\nMdSlideToggle.prototype._focusRipple;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdSlideToggle.prototype.name;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdSlideToggle.prototype.id;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.tabIndex;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n * @type {?}\n */\nMdSlideToggle.prototype.labelPosition;\n/**\n * Used to set the aria-label attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabel;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabelledby;\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n * @type {?}\n */\nMdSlideToggle.prototype.change;\n/**\n * Reference to the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype._inputElement;\n/**\n * Reference to the ripple directive on the thumb container.\n * @type {?}\n */\nMdSlideToggle.prototype._ripple;\n/** @type {?} */\nMdSlideToggle.prototype._platform;\n/** @type {?} */\nMdSlideToggle.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlideToggle.prototype._changeDetectorRef;\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n/**\n * Reference to the thumb HTMLElement.\n */\nprivate _thumbEl: HTMLElement;\n/**\n * Reference to the thumb bar HTMLElement.\n */\nprivate _thumbBarEl: HTMLElement;\n/**\n * Width of the thumb bar of the slide-toggle.\n */\nprivate _thumbBarWidth: number;\n/**\n * Previous checked state before drag started.\n */\nprivate _previousChecked: boolean;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n */\ndragPercentage: number;\n/**\n * Whether the thumb is currently being dragged.\n */\ndragging: boolean = false;\n/**\n * @param {?} _elementRef\n * @param {?} platform\n */\nconstructor(private _elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n/**\n * Initializes the drag of the slide-toggle.\n * @param {?} checked\n * @return {?}\n */\nstartThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n/**\n * Resets the current drag and returns the new checked value.\n * @return {?}\n */\nstopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n/**\n * Updates the thumb containers position from the specified distance.\n * @param {?} distance\n * @return {?}\n */\nupdateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n/**\n * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n * @param {?} distance\n * @return {?}\n */\nprivate _getDragPercentage(distance: number) {\n    let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n\nfunction SlideToggleRenderer_tsickle_Closure_declarations() {\n/**\n * Reference to the thumb HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbEl;\n/**\n * Reference to the thumb bar HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarEl;\n/**\n * Width of the thumb bar of the slide-toggle.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarWidth;\n/**\n * Previous checked state before drag started.\n * @type {?}\n */\nSlideToggleRenderer.prototype._previousChecked;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragPercentage;\n/**\n * Whether the thumb is currently being dragged.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragging;\n/** @type {?} */\nSlideToggleRenderer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MdSlideToggle} from './slide-toggle';\nimport {\n  FOCUS_ORIGIN_MONITOR_PROVIDER,\n  GestureConfig,\n  MdCommonModule,\n  MdRippleModule,\n  PlatformModule,\n} from '../core';\nexport class MdSlideToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [FormsModule, MdRippleModule, MdCommonModule, PlatformModule],\n  exports: [MdSlideToggle, MdCommonModule],\n  declarations: [MdSlideToggle],\n  providers: [\n    FOCUS_ORIGIN_MONITOR_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSlideToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggleModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle} from './slide-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {UniqueSelectionDispatcher, coerceBooleanProperty, FocusOriginMonitor} from '../core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * \\@docs-private\n */\nexport class MdButtonToggleGroupBase {}\nexport const /** @type {?} */ _MdButtonToggleGroupMixinBase = mixinDisabled(MdButtonToggleGroupBase);\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdButtonToggleGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nexport class MdButtonToggleChange {\n/**\n * The MdButtonToggle that emits the event.\n */\nsource: MdButtonToggle | null;\n/**\n * The value assigned to the MdButtonToggle.\n */\nvalue: any;\n}\n\nfunction MdButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MdButtonToggle that emits the event.\n * @type {?}\n */\nMdButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MdButtonToggle.\n * @type {?}\n */\nMdButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MdButtonToggleGroup extends _MdButtonToggleGroupMixinBase implements AfterViewInit,\n    ControlValueAccessor, CanDisable {\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to toggles in this group.\n */\nprivate _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * The currently selected button toggle, should match the value.\n */\nprivate _selected: MdButtonToggle | null = null;\n/**\n * Whether the button toggle group is initialized or not.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n */\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * Child button toggle buttons.\n */\n_buttonToggles: QueryList<MdButtonToggle>;\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._isInitialized = true;\n  }\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\n    return this._name;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n\n      // Only emit a change event if the view is completely initialized.\n      // We don't want to emit a change event for the initial values.\n      if (this._isInitialized) {\n        this._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\n    return this._selected;\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n/**\n * Event emitted when the group's value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On change callback function.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On touch callback function.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled Whether the component should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'mdButtonToggleGroup',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MdButtonToggle), ] },],\n'name': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._name;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._selected;\n/**\n * Whether the button toggle group is initialized or not.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._isInitialized;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._buttonToggles;\n/**\n * Event emitted when the group's value changes.\n * @type {?}\n */\nMdButtonToggleGroup.prototype.change;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MdButtonToggleGroupMultiple extends _MdButtonToggleGroupMixinBase\n    implements CanDisable {\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\n  exportAs: 'mdButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MdButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroupMultiple.propDecorators;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MdButtonToggle implements OnInit, OnDestroy {\n/**\n * Whether or not this button toggle is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n */\n_type: ToggleType;\n/**\n * Whether or not this button toggle is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Value assigned to this button toggle.\n */\nprivate _value: any = null;\n/**\n * Whether or not the button toggle is a single selection.\n */\nprivate _isSingleSelector: boolean = false;\n/**\n * Unregister function for _buttonToggleDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n\n   _inputElement: ElementRef;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n */\nbuttonToggleGroup: MdButtonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n */\nbuttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * The unique ID for this button toggle.\n */\nid: string;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._isSingleSelector) {\n      if (newCheckedState) {\n        // Notify all button toggles with the same name (in the same group) to un-check.\n        this._buttonToggleDispatcher.notify(this.id, this.name);\n      }\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n/**\n * MdButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the group value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n */\nconstructor( toggleGroup: MdButtonToggleGroup,\n               toggleGroupMultiple: MdButtonToggleGroupMultiple,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    this.buttonToggleGroup = toggleGroup;\n\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.id == null) {\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\n    this._inputElement.nativeElement.focus();\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-button-toggle, mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    'class': 'mat-button-toggle'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: UniqueSelectionDispatcher, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: HostBinding },{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: HostBinding, args: ['class.mat-button-toggle-checked', ] },{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: HostBinding, args: ['class.mat-button-toggle-disabled', ] },{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggle.ctorParameters;\n/** @type {?} */\nMdButtonToggle.propDecorators;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMdButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMdButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMdButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMdButtonToggle.prototype._isSingleSelector;\n/**\n * Unregister function for _buttonToggleDispatcher *\n * @type {?}\n */\nMdButtonToggle.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nMdButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMdButtonToggle.prototype.change;\n/** @type {?} */\nMdButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMdButtonToggle.prototype._renderer;\n/** @type {?} */\nMdButtonToggle.prototype._elementRef;\n/** @type {?} */\nMdButtonToggle.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle} from './button-toggle';\nimport {\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  MdCommonModule,\n  StyleModule,\n} from '../core';\nexport class MdButtonToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [FormsModule, MdCommonModule, StyleModule],\n  exports: [\n    MdButtonToggleGroup,\n    MdButtonToggleGroupMultiple,\n    MdButtonToggle,\n    MdCommonModule,\n  ],\n  declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleModule.ctorParameters;\n}\n\n\n\nexport {ToggleType,MdButtonToggleGroupBase,_MdButtonToggleGroupMixinBase,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle} from './button-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n  Inject\n} from '@angular/core';\nimport {coerceBooleanProperty, FocusOriginMonitor, Platform} from '../core';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * Default color palette for round buttons (md-fab and md-mini-fab)\n */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-button], button[mat-button], a[md-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdRaisedButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-raised-button], button[mat-raised-button], ' +\n      'a[md-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRaisedButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRaisedButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdIconButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-icon-button], button[mat-icon-button], a[md-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\n                 anchor: MdAnchor) {\n    // Set the default color palette for the md-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-fab], button[mat-fab], a[md-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFab.ctorParameters;\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * \\@docs-private\n */\nexport class MdMiniFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\n                 anchor: MdAnchor) {\n    // Set the default color palette for the md-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-mini-fab], button[mat-mini-fab], a[md-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdMiniFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMiniFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMiniFab.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonBase.prototype._renderer;\n/** @type {?} */\nMdButtonBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdButtonMixinBase = mixinColor(mixinDisabled(MdButtonBase));\n/**\n * Material design button.\n */\nexport class MdButton extends _MdButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n/**\n * Whether the button is round.\n */\n_isRoundButton: boolean = this._hasAttributeWithPrefix('fab', 'mini-fab');\n/**\n * Whether the button is icon button.\n */\n_isIconButton: boolean = this._hasAttributeWithPrefix('icon-button');\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect for this button is disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableRipple(v) { this._disableRipple = coerceBooleanProperty(v); }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _platform\n * @param {?} _focusOriginMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _platform: Platform,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super(renderer, elementRef);\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\n_getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Gets whether the button has one of the given attributes\n * with either an 'md-' or 'mat-' prefix.\n * @param {...?} unprefixedAttributeNames\n * @return {?}\n */\n_hasAttributeWithPrefix(...unprefixedAttributeNames: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return unprefixedAttributeNames.some(suffix => {\n      const /** @type {?} */ el = this._getHostElement();\n\n      return el.hasAttribute('md-' + suffix) || el.hasAttribute('mat-' + suffix);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'button[md-button], button[md-raised-button], button[md-icon-button],' +\n            'button[md-fab], button[md-mini-fab],' +\n            'button[mat-button], button[mat-raised-button], button[mat-icon-button],' +\n            'button[mat-fab], button[mat-mini-fab]',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Platform, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n};\n}\n\nfunction MdButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButton.ctorParameters;\n/** @type {?} */\nMdButton.propDecorators;\n/**\n * Whether the button is round.\n * @type {?}\n */\nMdButton.prototype._isRoundButton;\n/**\n * Whether the button is icon button.\n * @type {?}\n */\nMdButton.prototype._isIconButton;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdButton.prototype._disableRipple;\n/** @type {?} */\nMdButton.prototype._platform;\n/** @type {?} */\nMdButton.prototype._focusOriginMonitor;\n}\n\n/**\n * Raised Material design button.\n */\nexport class MdAnchor extends MdButton {\n/**\n * @param {?} platform\n * @param {?} focusOriginMonitor\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(\n      platform: Platform,\n      focusOriginMonitor: FocusOriginMonitor,\n      elementRef: ElementRef,\n      renderer: Renderer2) {\n    super(renderer, elementRef, platform, focusOriginMonitor);\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget tabIndex(): number {\n    return this.disabled ? -1 : 0;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: FocusOriginMonitor, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tabIndex': [{ type: HostBinding, args: ['tabIndex', ] },],\n};\n}\n\nfunction MdAnchor_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAnchor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAnchor.ctorParameters;\n/** @type {?} */\nMdAnchor.propDecorators;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule, MdRippleModule, StyleModule} from '../core';\nimport {\n  MdAnchor,\n  MdButton,\n  MdMiniFab,\n  MdButtonCssMatStyler,\n  MdFab,\n  MdIconButtonCssMatStyler,\n  MdRaisedButtonCssMatStyler\n} from './button';\n\n\nexport {MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor} from './button';\nexport class MdButtonModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n    StyleModule,\n  ],\n  exports: [\n    MdButton,\n    MdAnchor,\n    MdMiniFab,\n    MdFab,\n    MdCommonModule,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MdButton,\n    MdAnchor,\n    MdMiniFab,\n    MdFab,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty} from '@angular/cdk';\nimport {FocusOrigin, FocusOriginMonitor, MdRipple, RippleRef} from '../core';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * Monotonically increasing integer used to auto-generate unique ids for checkbox components.\n */\nlet nextId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdCheckbox),\n  multi: true\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MdCheckbox.\n */\nexport class MdCheckboxChange {\n/**\n * The source MdCheckbox of the event.\n */\nsource: MdCheckbox;\n/**\n * The new `checked` value of the checkbox.\n */\nchecked: boolean;\n}\n\nfunction MdCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MdCheckbox of the event.\n * @type {?}\n */\nMdCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMdCheckboxChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxBase.prototype._renderer;\n/** @type {?} */\nMdCheckboxBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdCheckboxMixinBase = mixinColor(mixinDisabled(MdCheckboxBase), 'accent');\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MdCheckbox extends _MdCheckboxMixinBase\n    implements ControlValueAccessor, AfterViewInit, OnDestroy, CanColor, CanDisable {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\n/**\n * A unique id for the checkbox. If one is not supplied, it is auto-generated.\n */\nid: string = `md-checkbox-${++nextId}`;\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean;\n/**\n * Whether the ripple effect for this checkbox is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * ID of the native input element inside `<md-checkbox>`\n * @return {?}\n */\nget inputId(): string {\n    return `input-${this.id}`;\n  }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Tabindex value that is passed to the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n */\nchange: EventEmitter<MdCheckboxChange> = new EventEmitter<MdCheckboxChange>();\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n */\nindeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n/**\n * The value attribute of the native input element\n */\nvalue: string ;\n/**\n * The native `<input type=\"checkbox\"> element\n */\n_inputElement: ElementRef;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n */\n_ripple: MdRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Reference to the focused state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusOriginMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Whether the checkbox is checked.\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n * set to false.\n * @return {?}\n */\nget indeterminate() {\n    return this._indeterminate;\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.checked = !!value;\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Function to be called on change.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be triggered when the checkbox is touched.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the checkbox should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\n    let /** @type {?} */ oldState = this._currentCheckState;\n    let /** @type {?} */ renderer = this._renderer;\n    let /** @type {?} */ elementRef = this._elementRef;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      renderer.removeClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      renderer.addClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Event handler for checkbox input element.\n * Toggles checked state if element is not disabled.\n * Do not toggle on (change) event since IE doesn't fire change event when\n *   indeterminate checkbox is clicked.\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    this._removeFocusRipple();\n\n    if (!this.disabled) {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this._indeterminate) {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let /** @type {?} */ animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n/**\n * Fades out the focus state ripple.\n * @return {?}\n */\nprivate _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-checkbox, mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-checkbox',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n};\n}\n\nfunction MdCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckbox.ctorParameters;\n/** @type {?} */\nMdCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabelledby;\n/**\n * A unique id for the checkbox. If one is not supplied, it is auto-generated.\n * @type {?}\n */\nMdCheckbox.prototype.id;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdCheckbox.prototype._disableRipple;\n/** @type {?} */\nMdCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdCheckbox.prototype.labelPosition;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMdCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMdCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMdCheckbox.prototype._inputElement;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * @type {?}\n */\nMdCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nMdCheckbox.prototype.onTouched;\n/** @type {?} */\nMdCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMdCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMdCheckbox.prototype._checked;\n/** @type {?} */\nMdCheckbox.prototype._indeterminate;\n/** @type {?} */\nMdCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMdCheckbox.prototype._focusRipple;\n/** @type {?} */\nMdCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMdCheckbox.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserveContentModule} from '@angular/cdk';\nimport {MdRippleModule, MdCommonModule, FocusOriginMonitor} from '../core';\nimport {MdCheckbox} from './checkbox';\nexport class MdCheckboxModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule, ObserveContentModule],\n  exports: [MdCheckbox, MdCommonModule],\n  declarations: [MdCheckbox],\n  providers: [FocusOriginMonitor]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox} from './checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgZone} from '@angular/core';\nimport {PortalHost, Portal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalHost {\nprivate _backdropElement: HTMLElement | null = null;\nprivate _backdropClick: Subject<any> = new Subject();\nprivate _attachments = new Subject<void>();\nprivate _detachments = new Subject<void>();\n/**\n * @param {?} _portalHost\n * @param {?} _pane\n * @param {?} _state\n * @param {?} _scrollStrategy\n * @param {?} _ngZone\n */\nconstructor(\nprivate _portalHost: PortalHost,\nprivate _pane: HTMLElement,\nprivate _state: OverlayState,\nprivate _scrollStrategy: ScrollStrategy,\nprivate _ngZone: NgZone) {\n\n    _scrollStrategy.attach(this);\n  }\n/**\n * The overlay's HTML element\n * @return {?}\n */\nget overlayElement(): HTMLElement {\n    return this._pane;\n  }\n/**\n * Attaches the overlay to a portal instance and adds the backdrop.\n * @param {?} portal Portal instance to which to attach the overlay.\n * @return {?} The portal attachment result.\n */\nattach(portal: Portal<any>): any {\n    let /** @type {?} */ attachResult = this._portalHost.attach(portal);\n\n    // Update the pane element with the given state configuration.\n    this._updateStackingOrder();\n    this.updateSize();\n    this.updateDirection();\n    this.updatePosition();\n    this._scrollStrategy.enable();\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._state.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._state.panelClass) {\n      this._pane.classList.add(this._state.panelClass);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    return attachResult;\n  }\n/**\n * Detaches an overlay from a portal.\n * @return {?} Resolves when the overlay has been detached.\n */\ndetach(): Promise<any> {\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n    this._scrollStrategy.disable();\n\n    let /** @type {?} */ detachmentResult = this._portalHost.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    return detachmentResult;\n  }\n/**\n * Cleans up the overlay from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.dispose();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n\n    this.detachBackdrop();\n    this._portalHost.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._detachments.next();\n    this._detachments.complete();\n  }\n/**\n * Checks whether the overlay has been attached.\n * @return {?}\n */\nhasAttached(): boolean {\n    return this._portalHost.hasAttached();\n  }\n/**\n * Returns an observable that emits when the backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._backdropClick.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been attached.\n * @return {?}\n */\nattachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been detached.\n * @return {?}\n */\ndetachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n/**\n * Gets the current state config of the overlay.\n * @return {?}\n */\ngetState(): OverlayState {\n    return this._state;\n  }\n/**\n * Updates the position of the overlay based on the position strategy.\n * @return {?}\n */\nupdatePosition() {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.apply(this._pane);\n    }\n  }\n/**\n * Updates the text direction of the overlay panel.\n * @return {?}\n */\nprivate updateDirection() {\n    this._pane.setAttribute('dir', /** @type {?} */(( this._state.direction)));\n  }\n/**\n * Updates the size of the overlay based on the overlay config.\n * @return {?}\n */\nupdateSize() {\n    if (this._state.width || this._state.width === 0) {\n      this._pane.style.width = formatCssUnit(this._state.width);\n    }\n\n    if (this._state.height || this._state.height === 0) {\n      this._pane.style.height = formatCssUnit(this._state.height);\n    }\n\n    if (this._state.minWidth || this._state.minWidth === 0) {\n      this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\n    }\n\n    if (this._state.minHeight || this._state.minHeight === 0) {\n      this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\n    }\n  }\n/**\n * Toggles the pointer events for the overlay pane element.\n * @param {?} enablePointer\n * @return {?}\n */\nprivate _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n/**\n * Attaches a backdrop for this overlay.\n * @return {?}\n */\nprivate _attachBackdrop() {\n    this._backdropElement = document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._state.backdropClass) {\n      this._backdropElement.classList.add(this._state.backdropClass);\n    } /** @type {?} */((\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._pane.parentElement)).insertBefore(this._backdropElement, this._pane);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', () => this._backdropClick.next(null));\n\n    // Add class to fade-in the backdrop after one frame.\n    requestAnimationFrame(() => {\n      if (this._backdropElement) {\n        this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\n      }\n    });\n  }\n/**\n * Updates the stacking order of the element, moving it to the top if necessary.\n * This is required in cases where one overlay was detached, while another one,\n * that should be behind it, was destroyed. The next time both of them are opened,\n * the stacking will be wrong, because the detached element's pane will still be\n * in its original DOM position.\n * @return {?}\n */\nprivate _updateStackingOrder() {\n    if (this._pane.nextSibling) { /** @type {?} */((\n      this._pane.parentNode)).appendChild(this._pane);\n    }\n  }\n/**\n * Detaches the backdrop (if any) associated with the overlay.\n * @return {?}\n */\ndetachBackdrop(): void {\n    let /** @type {?} */ backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let /** @type {?} */ finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n      if (this._state.backdropClass) {\n        backdropToDetach.classList.remove(this._state.backdropClass);\n      }\n\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(finishDetach, 500);\n      });\n    }\n  }\n}\n\nfunction OverlayRef_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayRef.prototype._backdropElement;\n/** @type {?} */\nOverlayRef.prototype._backdropClick;\n/** @type {?} */\nOverlayRef.prototype._attachments;\n/** @type {?} */\nOverlayRef.prototype._detachments;\n/** @type {?} */\nOverlayRef.prototype._portalHost;\n/** @type {?} */\nOverlayRef.prototype._pane;\n/** @type {?} */\nOverlayRef.prototype._state;\n/** @type {?} */\nOverlayRef.prototype._scrollStrategy;\n/** @type {?} */\nOverlayRef.prototype._ngZone;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction formatCssUnit(value: number | string) {\n  return typeof value === 'string' ? /** @type {?} */(( value as string)) : `${value}px`;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\n\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n/**\n * The points of the origin element and the overlay element to connect.\n */\nexport class ConnectionPositionPair {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n/**\n * @param {?} origin\n * @param {?} overlay\n */\nconstructor(origin: OriginConnectionPosition, overlay: OverlayConnectionPosition) {\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\nfunction ConnectionPositionPair_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectionPositionPair.prototype.originX;\n/** @type {?} */\nConnectionPositionPair.prototype.originY;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayX;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayY;\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n * \n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n * \n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n * \n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n */\nexport class ScrollableViewProperties {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\nfunction ScrollableViewProperties_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginOutsideView;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayOutsideView;\n}\n\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nexport class ConnectedOverlayPositionChange {\n/**\n * @param {?} connectionPair\n * @param {?} scrollableViewProperties\n */\nconstructor(public connectionPair: ConnectionPositionPair,\npublic scrollableViewProperties: ScrollableViewProperties) {}\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionPositionPair, },\n{type: ScrollableViewProperties, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction ConnectedOverlayPositionChange_tsickle_Closure_declarations() {\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayPositionChange.ctorParameters;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.connectionPair;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.scrollableViewProperties;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler} from './viewport-ruler';\nimport {\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n  ConnectedOverlayPositionChange, ScrollableViewProperties\n} from './connected-position';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Scrollable} from '../scroll/scrollable';\n\n/**\n * Container to hold the bounding positions of a particular element with respect to the viewport,\n * where top and bottom are the y-axis coordinates of the bounding rectangle and left and right are\n * the x-axis coordinates.\n */\ntype ElementBoundingPositions = {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n};\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\nprivate _dir = 'ltr';\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n */\nprivate _offsetX: number = 0;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n */\nprivate _offsetY: number = 0;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n */\nprivate scrollables: Scrollable[] = [];\n/**\n * Whether the we're dealing with an RTL context\n * @return {?}\n */\nget _isRtl() {\n    return this._dir === 'rtl';\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n */\n_preferredPositions: ConnectionPositionPair[] = [];\n/**\n * The origin element against which the overlay will be positioned.\n */\nprivate _origin: HTMLElement;\n/**\n * The overlay pane element.\n */\nprivate _pane: HTMLElement;\n/**\n * The last position to have been calculated as the best fit position.\n */\nprivate _lastConnectedPosition: ConnectionPositionPair;\n\n  _onPositionChange:\n      Subject<ConnectedOverlayPositionChange> = new Subject<ConnectedOverlayPositionChange>();\n/**\n * Emits an event when the connection point changes.\n * @return {?}\n */\nget onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._onPositionChange.asObservable();\n  }\n/**\n * @param {?} _connectedTo\n * @param {?} _originPos\n * @param {?} _overlayPos\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _connectedTo: ElementRef,\nprivate _originPos: OriginConnectionPosition,\nprivate _overlayPos: OverlayConnectionPosition,\nprivate _viewportRuler: ViewportRuler) {\n    this._origin = this._connectedTo.nativeElement;\n    this.withFallbackPosition(_originPos, _overlayPos);\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @return {?}\n */\nget positions() {\n    return this._preferredPositions;\n  }\n/**\n * To be used to for any cleanup after the element gets destroyed.\n * @return {?}\n */\ndispose() { }\n/**\n * Updates the position of the overlay element, using whichever preferred position relative\n * to the origin fits on-screen.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS styles.\n * @return {?} Resolves when the styles have been applied.\n */\napply(element: HTMLElement): void {\n    // Cache the overlay pane element in case re-calculating position is necessary\n    this._pane = element;\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = element.getBoundingClientRect();\n\n    // We use the viewport rect to determine whether a position would go off-screen.\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n\n    // Fallback point if none of the fallbacks fit into the viewport.\n    let /** @type {?} */ fallbackPoint: OverlayPoint | undefined;\n    let /** @type {?} */ fallbackPosition: ConnectionPositionPair | undefined;\n\n    // We want to place the overlay in the first of the preferred positions such that the\n    // overlay fits on-screen.\n    for (let /** @type {?} */ pos of this._preferredPositions) {\n      // Get the (x, y) point of connection on the origin, and then use that to get the\n      // (top, left) coordinate for the overlay at `pos`.\n      let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, pos);\n      let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay in the calculated position fits on-screen, put it there and we're done.\n      if (overlayPoint.fitsInViewport) {\n        this._setElementPosition(element, overlayRect, overlayPoint, pos);\n\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastConnectedPosition = pos;\n\n        // Notify that the position has been changed along with its change properties.\n        const /** @type {?} */ scrollableViewProperties = this.getScrollableViewProperties(element);\n        const /** @type {?} */ positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);\n        this._onPositionChange.next(positionChange);\n\n        return;\n      } else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {\n        fallbackPoint = overlayPoint;\n        fallbackPosition = pos;\n      }\n    }\n\n    // If none of the preferred positions were in the viewport, take the one\n    // with the largest visible area.\n    this._setElementPosition(element, overlayRect, /** @type {?} */(( fallbackPoint)), /** @type {?} */(( fallbackPosition)));\n  }\n/**\n * This re-aligns the overlay element with the trigger in its last calculated position,\n * even if a position higher in the \"preferred positions\" list would now fit. This\n * allows one to re-align the panel without changing the orientation of the panel.\n * @return {?}\n */\nrecalculateLastPosition(): void {\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = this._pane.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ lastPosition = this._lastConnectedPosition || this._preferredPositions[0];\n\n    let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, lastPosition);\n    let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, lastPosition);\n    this._setElementPosition(this._pane, overlayRect, overlayPoint, lastPosition);\n  }\n/**\n * Sets the list of Scrollable containers that host the origin element so that\n * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n * Scrollable must be an ancestor element of the strategy's origin element.\n * @param {?} scrollables\n * @return {?}\n */\nwithScrollableContainers(scrollables: Scrollable[]) {\n    this.scrollables = scrollables;\n  }\n/**\n * Adds a new preferred fallback position.\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nwithFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): this {\n    this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));\n    return this;\n  }\n/**\n * Sets the layout direction so the overlay's position can be adjusted to match.\n * @param {?} dir New layout direction.\n * @return {?}\n */\nwithDirection(dir: 'ltr' | 'rtl'): this {\n    this._dir = dir;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the x-axis\n * @param {?} offset New offset in the X axis.\n * @return {?}\n */\nwithOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the y-axis\n * @param {?} offset New offset in the Y axis.\n * @return {?}\n */\nwithOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n/**\n * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getStartX(rect: ClientRect): number {\n    return this._isRtl ? rect.right : rect.left;\n  }\n/**\n * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getEndX(rect: ClientRect): number {\n    return this._isRtl ? rect.left : rect.right;\n  }\n/**\n * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n * @param {?} originRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOriginConnectionPoint(originRect: ClientRect, pos: ConnectionPositionPair): Point {\n    const /** @type {?} */ originStartX = this._getStartX(originRect);\n    const /** @type {?} */ originEndX = this._getEndX(originRect);\n\n    let /** @type {?} */ x: number;\n    if (pos.originX == 'center') {\n      x = originStartX + (originRect.width / 2);\n    } else {\n      x = pos.originX == 'start' ? originStartX : originEndX;\n    }\n\n    let /** @type {?} */ y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n/**\n * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n * origin point to which the overlay should be connected, as well as how much of the element\n * would be inside the viewport at that position.\n * @param {?} originPoint\n * @param {?} overlayRect\n * @param {?} viewportRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      viewportRect: ClientRect,\n      pos: ConnectionPositionPair): OverlayPoint {\n    // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\n    // relative to the origin point.\n    let /** @type {?} */ overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl ? 0 : -overlayRect.width;\n    }\n\n    let /** @type {?} */ overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    let /** @type {?} */ x = originPoint.x + overlayStartX + this._offsetX;\n    let /** @type {?} */ y = originPoint.y + overlayStartY + this._offsetY;\n\n    // How much the overlay would overflow at this position, on each side.\n    let /** @type {?} */ leftOverflow = 0 - x;\n    let /** @type {?} */ rightOverflow = (x + overlayRect.width) - viewportRect.width;\n    let /** @type {?} */ topOverflow = 0 - y;\n    let /** @type {?} */ bottomOverflow = (y + overlayRect.height) - viewportRect.height;\n\n    // Visible parts of the element on each axis.\n    let /** @type {?} */ visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);\n    let /** @type {?} */ visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);\n\n    // The area of the element that's within the viewport.\n    let /** @type {?} */ visibleArea = visibleWidth * visibleHeight;\n    let /** @type {?} */ fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;\n\n    return {x, y, fitsInViewport, visibleArea};\n  }\n/**\n * Gets the view properties of the trigger and overlay, including whether they are clipped\n * or completely outside the view of any of the strategy's scrollables.\n * @param {?} overlay\n * @return {?}\n */\nprivate getScrollableViewProperties(overlay: HTMLElement): ScrollableViewProperties {\n    const /** @type {?} */ originBounds = this._getElementBounds(this._origin);\n    const /** @type {?} */ overlayBounds = this._getElementBounds(overlay);\n    const /** @type {?} */ scrollContainerBounds = this.scrollables.map((scrollable: Scrollable) => {\n      return this._getElementBounds(scrollable.getElementRef().nativeElement);\n    });\n\n    return {\n      isOriginClipped: this.isElementClipped(originBounds, scrollContainerBounds),\n      isOriginOutsideView: this.isElementOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: this.isElementClipped(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: this.isElementOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n/**\n * Whether the element is completely out of the view of any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementOutsideView(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ outsideAbove = elementBounds.bottom < containerBounds.top;\n      const /** @type {?} */ outsideBelow = elementBounds.top > containerBounds.bottom;\n      const /** @type {?} */ outsideLeft = elementBounds.right < containerBounds.left;\n      const /** @type {?} */ outsideRight = elementBounds.left > containerBounds.right;\n\n      return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n  }\n/**\n * Whether the element is clipped by any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementClipped(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ clippedAbove = elementBounds.top < containerBounds.top;\n      const /** @type {?} */ clippedBelow = elementBounds.bottom > containerBounds.bottom;\n      const /** @type {?} */ clippedLeft = elementBounds.left < containerBounds.left;\n      const /** @type {?} */ clippedRight = elementBounds.right > containerBounds.right;\n\n      return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n  }\n/**\n * Physically positions the overlay element to the given coordinate.\n * @param {?} element\n * @param {?} overlayRect\n * @param {?} overlayPoint\n * @param {?} pos\n * @return {?}\n */\nprivate _setElementPosition(\n      element: HTMLElement,\n      overlayRect: ClientRect,\n      overlayPoint: Point,\n      pos: ConnectionPositionPair) {\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear above\n    // or below the origin and the direction in which the element will expand.\n    let /** @type {?} */ verticalStyleProperty = pos.overlayY === 'bottom' ? 'bottom' : 'top';\n\n    // When using `bottom`, we adjust the y position such that it is the distance\n    // from the bottom of the viewport rather than the top.\n    let /** @type {?} */ y = verticalStyleProperty === 'top' ?\n        overlayPoint.y :\n        document.documentElement.clientHeight - (overlayPoint.y + overlayRect.height);\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let /** @type {?} */ horizontalStyleProperty: string;\n    if (this._dir === 'rtl') {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    let /** @type {?} */ x = horizontalStyleProperty === 'left' ?\n      overlayPoint.x :\n      document.documentElement.clientWidth - (overlayPoint.x + overlayRect.width);\n\n\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    ['top', 'bottom', 'left', 'right'].forEach(p => element.style[p] = null);\n\n    element.style[verticalStyleProperty] = `${y}px`;\n    element.style[horizontalStyleProperty] = `${x}px`;\n  }\n/**\n * Returns the bounding positions of the provided element with respect to the viewport.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementBounds(element: HTMLElement): ElementBoundingPositions {\n    const /** @type {?} */ boundingClientRect = element.getBoundingClientRect();\n    return {\n      top: boundingClientRect.top,\n      right: boundingClientRect.left + boundingClientRect.width,\n      bottom: boundingClientRect.top + boundingClientRect.height,\n      left: boundingClientRect.left\n    };\n  }\n/**\n * Subtracts the amount that an element is overflowing on an axis from it's length.\n * @param {?} length\n * @param {...?} overflows\n * @return {?}\n */\nprivate _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n}\n\nfunction ConnectedPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedPositionStrategy.prototype._dir;\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetX;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetY;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n * @type {?}\n */\nConnectedPositionStrategy.prototype.scrollables;\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._preferredPositions;\n/**\n * The origin element against which the overlay will be positioned.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._origin;\n/**\n * The overlay pane element.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._pane;\n/**\n * The last position to have been calculated as the best fit position.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._lastConnectedPosition;\n/** @type {?} */\nConnectedPositionStrategy.prototype._onPositionChange;\n/** @type {?} */\nConnectedPositionStrategy.prototype._connectedTo;\n/** @type {?} */\nConnectedPositionStrategy.prototype._originPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._overlayPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._viewportRuler;\n}\n\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Expands the simple (x, y) coordinate by adding info about whether the\n * element would fit inside the viewport at that position, as well as\n * how much of the element would be visible.\n */\ninterface OverlayPoint extends Point {\n  visibleArea: number;\n  fitsInViewport: boolean;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position-strategy';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\nprivate _cssPosition: string = 'static';\nprivate _topOffset: string = '';\nprivate _bottomOffset: string = '';\nprivate _leftOffset: string = '';\nprivate _rightOffset: string = '';\nprivate _alignItems: string = '';\nprivate _justifyContent: string = '';\nprivate _width: string = '';\nprivate _height: string = '';\nprivate _wrapper: HTMLElement | null = null;\n/**\n * Sets the top position of the overlay. Clears any previously set vertical position.\n * @param {?=} value New top offset.\n * @return {?}\n */\ntop(value = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n/**\n * Sets the left position of the overlay. Clears any previously set horizontal position.\n * @param {?=} value New left offset.\n * @return {?}\n */\nleft(value = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n/**\n * Sets the bottom position of the overlay. Clears any previously set vertical position.\n * @param {?=} value New bottom offset.\n * @return {?}\n */\nbottom(value = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n/**\n * Sets the right position of the overlay. Clears any previously set horizontal position.\n * @param {?=} value New right offset.\n * @return {?}\n */\nright(value = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n/**\n * Sets the overlay width and clears any previously set width.\n * @param {?=} value New width for the overlay\n * @return {?}\n */\nwidth(value = ''): this {\n    this._width = value;\n\n    // When the width is 100%, we should reset the `left` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.left('0px');\n    }\n\n    return this;\n  }\n/**\n * Sets the overlay height and clears any previously set height.\n * @param {?=} value New height for the overlay\n * @return {?}\n */\nheight(value = ''): this {\n    this._height = value;\n\n    // When the height is 100%, we should reset the `top` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.top('0px');\n    }\n\n    return this;\n  }\n/**\n * Centers the overlay horizontally with an optional offset.\n * Clears any previously set horizontal position.\n * \n * @param {?=} offset Overlay offset from the horizontal center.\n * @return {?}\n */\ncenterHorizontally(offset = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n/**\n * Centers the overlay vertically with an optional offset.\n * Clears any previously set vertical position.\n * \n * @param {?=} offset Overlay offset from the vertical center.\n * @return {?}\n */\ncenterVertically(offset = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n/**\n * Apply the position to the element.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS.\n * @return {?} Resolved when the styles have been applied.\n */\napply(element: HTMLElement): void {\n    if (!this._wrapper && element.parentNode) {\n      this._wrapper = document.createElement('div');\n      this._wrapper.classList.add('cdk-global-overlay-wrapper');\n      element.parentNode.insertBefore(this._wrapper, element);\n      this._wrapper.appendChild(element);\n    }\n\n    let /** @type {?} */ styles = element.style;\n    let /** @type {?} */ parentStyles = ( /** @type {?} */((element.parentNode as HTMLElement))).style;\n\n    styles.position = this._cssPosition;\n    styles.marginTop = this._topOffset;\n    styles.marginLeft = this._leftOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n    styles.width = this._width;\n    styles.height = this._height;\n\n    parentStyles.justifyContent = this._justifyContent;\n    parentStyles.alignItems = this._alignItems;\n  }\n/**\n * Removes the wrapper element from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._wrapper && this._wrapper.parentNode) {\n      this._wrapper.parentNode.removeChild(this._wrapper);\n      this._wrapper = null;\n    }\n  }\n}\n\nfunction GlobalPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nGlobalPositionStrategy.prototype._cssPosition;\n/** @type {?} */\nGlobalPositionStrategy.prototype._topOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._bottomOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._leftOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._rightOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._alignItems;\n/** @type {?} */\nGlobalPositionStrategy.prototype._justifyContent;\n/** @type {?} */\nGlobalPositionStrategy.prototype._width;\n/** @type {?} */\nGlobalPositionStrategy.prototype._height;\n/** @type {?} */\nGlobalPositionStrategy.prototype._wrapper;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewportRuler} from './viewport-ruler';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {ElementRef, Injectable} from '@angular/core';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {OverlayConnectionPosition, OriginConnectionPosition} from './connected-position';\n/**\n * Builder for overlay position strategy.\n */\nexport class OverlayPositionBuilder {\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * Creates a global position strategy.\n * @return {?}\n */\nglobal(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n/**\n * Creates a relative position strategy.\n * @param {?} elementRef\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nconnectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n];\n}\n\nfunction OverlayPositionBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayPositionBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayPositionBuilder.ctorParameters;\n/** @type {?} */\nOverlayPositionBuilder.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\n  protected _containerElement: HTMLElement;\nprivate _themeClass: string;\n/**\n * Base theme to be applied to all overlay-based components.\n * @return {?}\n */\nget themeClass(): string { return this._themeClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset themeClass(value: string) {\n    if (this._containerElement) {\n      this._containerElement.classList.remove(this._themeClass);\n\n      if (value) {\n        this._containerElement.classList.add(value);\n      }\n    }\n\n    this._themeClass = value;\n  }\n/**\n * This method returns the overlay container element.  It will lazily\n * create the element the first time  it is called to facilitate using\n * the container in non-browser environments.\n * @return {?} the container element\n */\ngetContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n/**\n * Create the overlay container element, which is simply a div\n * with the 'cdk-overlay-container' class on the document body.\n * @return {?}\n */\nprotected _createContainer(): void {\n    let /** @type {?} */ container = document.createElement('div');\n    container.classList.add('cdk-overlay-container');\n\n    if (this._themeClass) {\n      container.classList.add(this._themeClass);\n    }\n\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayContainer.ctorParameters;\n/** @type {?} */\nOverlayContainer.prototype._containerElement;\n/** @type {?} */\nOverlayContainer.prototype._themeClass;\n}\n\n/**\n * @param {?} parentContainer\n * @return {?}\n */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer) {\n  return parentContainer || new OverlayContainer();\n}\n\nexport const /** @type {?} */ OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ComponentFactoryResolver,\n  Injectable,\n  ApplicationRef,\n  Injector,\n  NgZone,\n} from '@angular/core';\nimport {OverlayState} from './overlay-state';\nimport {DomPortalHost} from '../portal/dom-portal-host';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {OverlayContainer} from './overlay-container';\nimport {ScrollStrategy, ScrollStrategyOptions} from './scroll/index';\n/**\n * Next overlay unique ID.\n */\nlet nextUniqueId = 0;\n/**\n * The default state for newly created overlays.\n */\nlet defaultState = new OverlayState();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n * \n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nexport class Overlay {\n/**\n * @param {?} scrollStrategies\n * @param {?} _overlayContainer\n * @param {?} _componentFactoryResolver\n * @param {?} _positionBuilder\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n */\nconstructor(public scrollStrategies: ScrollStrategyOptions,\nprivate _overlayContainer: OverlayContainer,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _positionBuilder: OverlayPositionBuilder,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone) { }\n/**\n * Creates an overlay.\n * @param {?=} state State to apply to the overlay.\n * @return {?} Reference to the created overlay.\n */\ncreate(state: OverlayState = defaultState): OverlayRef {\n    return this._createOverlayRef(this._createPaneElement(), state);\n  }\n/**\n * Returns a position builder that can be used, via fluent API,\n * to construct and configure a position strategy.\n * @return {?}\n */\nposition(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n/**\n * Creates the DOM element for an overlay and appends it to the overlay container.\n * @return {?} Newly-created pane element\n */\nprivate _createPaneElement(): HTMLElement {\n    let /** @type {?} */ pane = document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    this._overlayContainer.getContainerElement().appendChild(pane);\n\n    return pane;\n  }\n/**\n * Create a DomPortalHost into which the overlay content can be loaded.\n * @param {?} pane The DOM element to turn into a portal host.\n * @return {?} A portal host for the given DOM element.\n */\nprivate _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n/**\n * Creates an OverlayRef for an overlay in the given DOM element.\n * @param {?} pane DOM element for the overlay\n * @param {?} state\n * @return {?}\n */\nprivate _createOverlayRef(pane: HTMLElement, state: OverlayState): OverlayRef {\n    let /** @type {?} */ scrollStrategy = state.scrollStrategy || this.scrollStrategies.noop();\n    let /** @type {?} */ portalHost = this._createPortalHost(pane);\n    return new OverlayRef(portalHost, pane, state, scrollStrategy, this._ngZone);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollStrategyOptions, },\n{type: OverlayContainer, },\n{type: ComponentFactoryResolver, },\n{type: OverlayPositionBuilder, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nfunction Overlay_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlay.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlay.ctorParameters;\n/** @type {?} */\nOverlay.prototype.scrollStrategies;\n/** @type {?} */\nOverlay.prototype._overlayContainer;\n/** @type {?} */\nOverlay.prototype._componentFactoryResolver;\n/** @type {?} */\nOverlay.prototype._positionBuilder;\n/** @type {?} */\nOverlay.prototype._appRef;\n/** @type {?} */\nOverlay.prototype._injector;\n/** @type {?} */\nOverlay.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    Directive,\n    EventEmitter,\n    TemplateRef,\n    ViewContainerRef,\n    Optional,\n    Input,\n    OnDestroy,\n    Output,\n    ElementRef,\n    Renderer2,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport {Overlay} from './overlay';\nimport {OverlayRef} from './overlay-ref';\nimport {TemplatePortal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {\n    ConnectionPositionPair,\n    ConnectedOverlayPositionChange\n} from './position/connected-position';\nimport {ConnectedPositionStrategy} from './position/connected-position-strategy';\nimport {Directionality, Direction} from '../bidi/index';\nimport {Scrollable} from './scroll/scrollable';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {coerceBooleanProperty} from '@angular/cdk';\nimport {ESCAPE} from '../keyboard/keycodes';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n */\nlet defaultPositionList = [\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'bottom'},\n      {overlayX: 'start', overlayY: 'top'}),\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'top'},\n      {overlayX: 'start', overlayY: 'bottom'}),\n];\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nexport class OverlayOrigin {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction OverlayOrigin_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayOrigin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayOrigin.ctorParameters;\n/** @type {?} */\nOverlayOrigin.prototype.elementRef;\n}\n\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nexport class ConnectedOverlayDirective implements OnDestroy, OnChanges {\nprivate _overlayRef: OverlayRef;\nprivate _templatePortal: TemplatePortal;\nprivate _hasBackdrop = false;\nprivate _backdropSubscription: Subscription | null;\nprivate _positionSubscription: Subscription;\nprivate _offsetX: number = 0;\nprivate _offsetY: number = 0;\nprivate _position: ConnectedPositionStrategy;\nprivate _escapeListener: Function;\n/**\n * Origin for the connected overlay.\n */\norigin: OverlayOrigin;\n/**\n * Registered connected position pairs.\n */\npositions: ConnectionPositionPair[];\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @return {?}\n */\nget offsetX(): number {\n    return this._offsetX;\n  }\n/**\n * @param {?} offsetX\n * @return {?}\n */\nset offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n    if (this._position) {\n      this._position.withOffsetX(offsetX);\n    }\n  }\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @return {?}\n */\nget offsetY() {\n    return this._offsetY;\n  }\n/**\n * @param {?} offsetY\n * @return {?}\n */\nset offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n    if (this._position) {\n      this._position.withOffsetY(offsetY);\n    }\n  }\n/**\n * The width of the overlay panel.\n */\nwidth: number | string;\n/**\n * The height of the overlay panel.\n */\nheight: number | string;\n/**\n * The min width of the overlay panel.\n */\nminWidth: number | string;\n/**\n * The min height of the overlay panel.\n */\nminHeight: number | string;\n/**\n * The custom class to be set on the backdrop element.\n */\nbackdropClass: string;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy: ScrollStrategy = this._overlay.scrollStrategies.reposition();\n/**\n * Whether the overlay is open.\n */\nopen: boolean = false;\n/**\n * Whether or not the overlay should attach a backdrop.\n * @return {?}\n */\nget hasBackdrop() {\n    return this._hasBackdrop;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset hasBackdrop(value: any) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * Event emitted when the position has changed.\n */\npositionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n/**\n * Event emitted when the overlay has been attached.\n */\nattach = new EventEmitter<void>();\n/**\n * Event emitted when the overlay has been detached.\n */\ndetach = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _renderer\n * @param {?} templateRef\n * @param {?} viewContainerRef\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _renderer: Renderer2,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\nprivate _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n/**\n * The associated overlay reference.\n * @return {?}\n */\nget overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n/**\n * The element's layout direction.\n * @return {?}\n */\nget dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyOverlay();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n/**\n * Creates an overlay\n * @return {?}\n */\nprivate _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n/**\n * Builds the overlay config based on the directive's inputs\n * @return {?}\n */\nprivate _buildConfig(): OverlayState {\n    let /** @type {?} */ overlayConfig = new OverlayState();\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    overlayConfig.hasBackdrop = this.hasBackdrop;\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    this._position = /** @type {?} */(( this._createPositionStrategy() as ConnectedPositionStrategy));\n    overlayConfig.positionStrategy = this._position;\n    overlayConfig.scrollStrategy = this.scrollStrategy;\n\n    return overlayConfig;\n  }\n/**\n * Returns the position strategy of the overlay to be set on the overlay config\n * @return {?}\n */\nprivate _createPositionStrategy(): ConnectedPositionStrategy {\n    const /** @type {?} */ pos = this.positions[0];\n    const /** @type {?} */ originPoint = {originX: pos.originX, originY: pos.originY};\n    const /** @type {?} */ overlayPoint = {overlayX: pos.overlayX, overlayY: pos.overlayY};\n\n    const /** @type {?} */ strategy = this._overlay.position()\n      .connectedTo(this.origin.elementRef, originPoint, overlayPoint)\n      .withOffsetX(this.offsetX)\n      .withOffsetY(this.offsetY);\n\n    this._handlePositionChanges(strategy);\n\n    return strategy;\n  }\n/**\n * @param {?} strategy\n * @return {?}\n */\nprivate _handlePositionChanges(strategy: ConnectedPositionStrategy): void {\n    for (let /** @type {?} */ i = 1; i < this.positions.length; i++) {\n      strategy.withFallbackPosition(\n          {originX: this.positions[i].originX, originY: this.positions[i].originY},\n          {overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY}\n      );\n    }\n\n    this._positionSubscription =\n        strategy.onPositionChange.subscribe(pos => this.positionChange.emit(pos));\n  }\n/**\n * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    }\n\n    this._position.withDirection(this.dir);\n    this._overlayRef.getState().direction = this.dir;\n    this._initEscapeListener();\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n        this.backdropClick.emit();\n      });\n    }\n  }\n/**\n * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n      this._backdropSubscription = null;\n    }\n\n    if (this._escapeListener) {\n      this._escapeListener();\n    }\n  }\n/**\n * Destroys the overlay created by this directive.\n * @return {?}\n */\nprivate _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n\n    if (this._escapeListener) {\n      this._escapeListener();\n    }\n  }\n/**\n * Sets the event listener that closes the overlay when pressing Escape.\n * @return {?}\n */\nprivate _initEscapeListener() {\n    this._escapeListener = this._renderer.listen('document', 'keydown', (event: KeyboardEvent) => {\n      if (event.keyCode === ESCAPE) {\n        this._detachOverlay();\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Renderer2, },\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'origin': [{ type: Input },],\n'positions': [{ type: Input },],\n'offsetX': [{ type: Input },],\n'offsetY': [{ type: Input },],\n'width': [{ type: Input },],\n'height': [{ type: Input },],\n'minWidth': [{ type: Input },],\n'minHeight': [{ type: Input },],\n'backdropClass': [{ type: Input },],\n'scrollStrategy': [{ type: Input },],\n'open': [{ type: Input },],\n'hasBackdrop': [{ type: Input },],\n'backdropClick': [{ type: Output },],\n'positionChange': [{ type: Output },],\n'attach': [{ type: Output },],\n'detach': [{ type: Output },],\n};\n}\n\nfunction ConnectedOverlayDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedOverlayDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayDirective.ctorParameters;\n/** @type {?} */\nConnectedOverlayDirective.propDecorators;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlayRef;\n/** @type {?} */\nConnectedOverlayDirective.prototype._templatePortal;\n/** @type {?} */\nConnectedOverlayDirective.prototype._hasBackdrop;\n/** @type {?} */\nConnectedOverlayDirective.prototype._backdropSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._positionSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetX;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetY;\n/** @type {?} */\nConnectedOverlayDirective.prototype._position;\n/** @type {?} */\nConnectedOverlayDirective.prototype._escapeListener;\n/**\n * Origin for the connected overlay.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.origin;\n/**\n * Registered connected position pairs.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positions;\n/**\n * The width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.width;\n/**\n * The height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.height;\n/**\n * The min width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minWidth;\n/**\n * The min height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minHeight;\n/**\n * The custom class to be set on the backdrop element.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClass;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.scrollStrategy;\n/**\n * Whether the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.open;\n/**\n * Event emitted when the backdrop is clicked.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClick;\n/**\n * Event emitted when the position has changed.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positionChange;\n/**\n * Event emitted when the overlay has been attached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.attach;\n/**\n * Event emitted when the overlay has been detached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.detach;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlay;\n/** @type {?} */\nConnectedOverlayDirective.prototype._renderer;\n/** @type {?} */\nConnectedOverlayDirective.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\n/**\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\n * that supports correct displaying of overlay elements in Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n * It should be provided in the root component that way:\n * providers: [\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\n * ],\n */\nexport class FullscreenOverlayContainer extends OverlayContainer {\n/**\n * @return {?}\n */\nprotected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n/**\n * @return {?}\n */\nprivate _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n    let /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n    let /** @type {?} */ parent = fullscreenElement || document.body;\n    parent.appendChild(this._containerElement);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nprivate _addFullscreenChangeListener(fn: () => void) {\n    if (document.fullscreenEnabled) {\n      document.addEventListener('fullscreenchange', fn);\n    } else if (document.webkitFullscreenEnabled) {\n      document.addEventListener('webkitfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).mozFullScreenEnabled) {\n      document.addEventListener('mozfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).msFullscreenEnabled) {\n      document.addEventListener('MSFullscreenChange', fn);\n    }\n  }\n/**\n * When the page is put into fullscreen mode, a specific element is specified.\n * Only that element and its children are visible when in fullscreen mode.\n * @return {?}\n */\ngetFullscreenElement(): Element {\n    return document.fullscreenElement ||\n        document.webkitFullscreenElement ||\n        ( /** @type {?} */((document as any))).mozFullScreenElement ||\n        ( /** @type {?} */((document as any))).msFullscreenElement ||\n        null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FullscreenOverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nFullscreenOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFullscreenOverlayContainer.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, Provider} from '@angular/core';\nimport {Overlay} from './overlay';\nimport {ScrollDispatchModule} from './scroll/index';\nimport {PortalModule} from '../portal/portal-directives';\nimport {ConnectedOverlayDirective, OverlayOrigin} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {VIEWPORT_RULER_PROVIDER} from './position/viewport-ruler';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\n\n\nexport const /** @type {?} */ OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n];\nexport class OverlayModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PortalModule, ScrollDispatchModule],\n  exports: [ConnectedOverlayDirective, OverlayOrigin, ScrollDispatchModule],\n  declarations: [ConnectedOverlayDirective, OverlayOrigin],\n  providers: [OVERLAY_PROVIDERS],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayModule.ctorParameters;\n}\n\n\n\nexport {Overlay} from './overlay';\nexport {OverlayContainer} from './overlay-container';\nexport {FullscreenOverlayContainer} from './fullscreen-overlay-container';\nexport {OverlayRef} from './overlay-ref';\nexport {OverlayState} from './overlay-state';\nexport {ConnectedOverlayDirective, OverlayOrigin} from './overlay-directives';\nexport {ViewportRuler} from './position/viewport-ruler';\n\nexport {HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange} from './position/connected-position';\nexport {Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule} from './scroll/index';\n\n// Export pre-defined position strategies and interface to build custom ones.\nexport {PositionStrategy} from './position/position-strategy';\nexport {GlobalPositionStrategy} from './position/global-position-strategy';\nexport {ConnectedPositionStrategy} from './position/connected-position-strategy';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subject} from 'rxjs/Subject';\n/**\n * Class to be used to power selecting one or more options from a list.\n * \\@docs-private\n */\nexport class SelectionModel<T> {\n/**\n * Currently-selected values.\n */\nprivate _selection: Set<T> = new Set();\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n */\nprivate _deselectedToEmit: T[] = [];\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n */\nprivate _selectedToEmit: T[] = [];\n/**\n * Cache for the array value of the selected items.\n */\nprivate _selected: T[] | null;\n/**\n * Selected value(s).\n * @return {?}\n */\nget selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n/**\n * Event emitted when the value has changed.\n */\nonChange: Subject<SelectionChange<T>> | null = this._emitChanges ? new Subject() : null;\n/**\n * @param {?=} _isMulti\n * @param {?=} initiallySelectedValues\n * @param {?=} _emitChanges\n */\nconstructor(\nprivate _isMulti = false,\n    initiallySelectedValues?: T[],\nprivate _emitChanges = true) {\n\n    if (initiallySelectedValues) {\n      if (_isMulti) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n/**\n * Selects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\nselect(value: T): void {\n    this._markSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Deselects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\ndeselect(value: T): void {\n    this._unmarkSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Toggles a value between selected and deselected.\n * @param {?} value\n * @return {?}\n */\ntoggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n/**\n * Clears all of the selected values.\n * @return {?}\n */\nclear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n/**\n * Determines whether a value is selected.\n * @param {?} value\n * @return {?}\n */\nisSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n/**\n * Determines whether the model does not have a value.\n * @return {?}\n */\nisEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n/**\n * Determines whether the model has a value.\n * @return {?}\n */\nhasValue(): boolean {\n    return !this.isEmpty();\n  }\n/**\n * Sorts the selected values based on a predicate function.\n * @param {?=} predicate\n * @return {?}\n */\nsort(predicate?: (a: T, b: T) => number): void {\n    if (this._isMulti && this._selected) {\n      this._selected.sort(predicate);\n    }\n  }\n/**\n * Emits a change event and clears the records of selected and deselected values.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      let /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n\n      if (this.onChange) {\n        this.onChange.next(eventData);\n      }\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n\n    this._selected = null;\n  }\n/**\n * Selects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._isMulti) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Deselects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Clears out the selected values.\n * @return {?}\n */\nprivate _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n}\n\nfunction SelectionModel_tsickle_Closure_declarations() {\n/**\n * Currently-selected values.\n * @type {?}\n */\nSelectionModel.prototype._selection;\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._deselectedToEmit;\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._selectedToEmit;\n/**\n * Cache for the array value of the selected items.\n * @type {?}\n */\nSelectionModel.prototype._selected;\n/**\n * Event emitted when the value has changed.\n * @type {?}\n */\nSelectionModel.prototype.onChange;\n/** @type {?} */\nSelectionModel.prototype._isMulti;\n/** @type {?} */\nSelectionModel.prototype._emitChanges;\n}\n\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nexport class SelectionChange<T> {\n/**\n * @param {?=} added\n * @param {?=} removed\n */\nconstructor(public added?: T[],\npublic removed?: T[]) { }\n}\n\nfunction SelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectionChange.prototype.added;\n/** @type {?} */\nSelectionChange.prototype.removed;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?} Function used to deregister listener\n * \n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n\nexport const /** @type {?} */ UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let /** @type {?} */ value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus, FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nimport {PlatformModule} from '../platform/index';\nexport class StyleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  declarations: [CdkMonitorFocus],\n  exports: [CdkMonitorFocus],\n  providers: [FOCUS_ORIGIN_MONITOR_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StyleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStyleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStyleModule.ctorParameters;\n}\n\n\n\nexport {TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nexport {applyCssTransform} from './apply-transform';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date, or null if date could not be parsed.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to parse.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The parsed date, or null if date could not be parsed.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible date string (https://tools.ietf.org/html/rfc3339)  for the given\n * date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ngetISODateString(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {DateAdapter} from './date-adapter';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    let /** @type {?} */ timestamp = typeof value == 'number' ? value : Date.parse(value);\n    return isNaN(timestamp) ? null : new Date(timestamp);\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetISODateString(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} str The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {ObserveContentModule} from '@angular/cdk';\nimport {MdLineModule} from './line/line';\nimport {BidiModule} from './bidi/index';\nimport {MdOptionModule} from './option/index';\nimport {PortalModule} from './portal/portal-directives';\nimport {OverlayModule} from './overlay/index';\nimport {A11yModule} from './a11y/index';\nimport {MdSelectionModule} from './selection/index';\nimport {MdRippleModule} from './ripple/index';\n\n// Re-exports of the CDK to avoid breaking changes.\nexport {\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  ObserveContentModule,\n  ObserveContent\n} from '@angular/cdk';\n\n// RTL\nexport {Dir, Direction, Directionality, BidiModule} from './bidi/index';\n\nexport {MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './option/index';\n\n// Portals\nexport {\n  Portal,\n  PortalHost,\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal\n} from './portal/portal';\nexport {\n  PortalHostDirective,\n  TemplatePortalDirective,\n  PortalModule,\n} from './portal/portal-directives';\nexport {DomPortalHost} from './portal/dom-portal-host';\n\n// Platform\nexport {PlatformModule,Platform,getSupportedInputTypes} from './platform/index';\n\n// Overlay\nexport {OVERLAY_PROVIDERS,OverlayModule,Overlay,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule} from './overlay/index';\n\n// Gestures\nexport {GestureConfig} from './gestures/gesture-config';\n// Explicitly specify the interfaces which should be re-exported, because if everything\n// is re-exported, module bundlers may run into issues with treeshaking.\nexport {HammerInput, HammerManager} from './gestures/gesture-annotations';\n\n// Ripple\nexport {MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule} from './ripple/index';\n\n// a11y\nexport {\n  AriaLivePoliteness,\n  LiveAnnouncer,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_PROVIDER,\n} from './a11y/live-announcer';\n\n// Selection\nexport {SelectionModel,SelectionChange} from './selection/selection';\n\nexport {FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective} from './a11y/focus-trap';\nexport {InteractivityChecker} from './a11y/interactivity-checker';\nexport {isFakeMousedownFromScreenReader} from './a11y/fake-mousedown';\n\nexport {A11yModule} from './a11y/index';\n\nexport {\n  UniqueSelectionDispatcher,\n  UniqueSelectionDispatcherListener,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n} from './coordination/unique-selection-dispatcher';\n\nexport {MdLineModule, MdLine, MdLineSetter} from './line/line';\n\n// Style\nexport {StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform} from './style/index';\n\n// Misc\nexport {ComponentType} from './overlay/generic-component-type';\n\n// Keybindings\nexport {UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE} from './keyboard/keycodes';\n\nexport {MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector} from './compatibility/compatibility';\n\n// Animation\nexport {AnimationCurves,AnimationDurations} from './animation/animation';\n\n// Selection\nexport {MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckboxBase,_MdPseudoCheckboxBase,MdPseudoCheckbox} from './selection/index';\n\n// Compatibility\nexport {CompatibilityModule, NoConflictStyleCompatibilityMode} from './compatibility/compatibility';\n\n// Common material module\nexport {MdCommonModule, MATERIAL_SANITY_CHECKS} from './common-behaviors/common-module';\n\n// Datetime\nexport {NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS} from './datetime/index';\n\n// Placeholder\nexport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS\n} from './placeholder/placeholder-options';\n\n// Error\nexport {\n  ErrorStateMatcher,\n  ErrorOptions,\n  MD_ERROR_GLOBAL_OPTIONS,\n  defaultErrorStateMatcher,\n  showOnDirtyErrorStateMatcher\n} from './error/error-options';\nexport class MdCoreModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MdLineModule,\n    BidiModule,\n    MdRippleModule,\n    ObserveContentModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n  exports: [\n    MdLineModule,\n    BidiModule,\n    MdRippleModule,\n    ObserveContentModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCoreModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCoreModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCoreModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdDateFormats} from './date-formats';\n\n\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MD_DATE_FORMATS} from './date-formats';\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\n\n\nexport {DateAdapter} from './date-adapter';\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\nexport {NativeDateAdapter} from './native-date-adapter';\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{provide: DateAdapter, useClass: NativeDateAdapter}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [NativeDateModule],\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport { InjectionToken } from '@angular/core';\n/**\n * InjectionToken that can be used to specify the global placeholder options.\n */\nexport const MD_PLACEHOLDER_GLOBAL_OPTIONS =\n  new InjectionToken<PlaceholderOptions>('md-placeholder-global-options');\n\n/** Type for the available floatPlaceholder values. */\nexport type FloatPlaceholderType = 'always' | 'never' | 'auto';\n\nexport interface PlaceholderOptions {\n  float?: FloatPlaceholderType;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\nimport {FormControl, FormGroupDirective, Form, NgForm} from '@angular/forms';\n/**\n * Injection token that can be used to specify the global error options.\n */\nexport const MD_ERROR_GLOBAL_OPTIONS = new InjectionToken<ErrorOptions>('md-error-global-options');\n\nexport type ErrorStateMatcher =\n    (control: FormControl, form: FormGroupDirective | NgForm) => boolean;\n\nexport interface ErrorOptions {\n  errorStateMatcher?: ErrorStateMatcher;\n}\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function defaultErrorStateMatcher(control: FormControl, form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.touched || isSubmitted));\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function showOnDirtyErrorStateMatcher(control: FormControl,\n    form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.dirty || isSubmitted));\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, Directive, Inject, Optional, ElementRef, InjectionToken} from '@angular/core';\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Returns an exception to be thrown if the consumer has used\n * an invalid Material prefix on a component.\n * \\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\n  return Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [matCardSubtitle],\n  [matCardTitle],\n  [matDialogActions],\n  [matDialogClose],\n  [matDialogContent],\n  [matDialogTitle],\n  [matLine],\n  [matTabLabel],\n  [matTabLink],\n  [matTabNav],\n  [matTooltip],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-cell,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-error,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-header-cell,\n  mat-hint,\n  mat-icon,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-row,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-table,\n  mat-tab-group,\n  mat-toolbar`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-fab],\n  [md-icon-button],\n  [md-mini-fab],\n  [md-raised-button],\n  [mdCardSubtitle],\n  [mdCardTitle],\n  [mdDialogActions],\n  [mdDialogClose],\n  [mdDialogContent],\n  [mdDialogTitle],\n  [mdLine],\n  [mdTabLabel],\n  [mdTabLink],\n  [mdTabNav],\n  [mdTooltip],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-cell,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-error,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-header-cell,\n  md-hint,\n  md-icon,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-row,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-table,\n  md-tab-group,\n  md-toolbar`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform} from '../platform/platform';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement | null;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\n      platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isMousedown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN; /** @type {?} */((\n      rippleEl.parentNode)).removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement | null) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => { /** @type {?} */((\n        this._triggerElement)).removeEventListener(type, fn);\n      });\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isMousedown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\n    this._isMousedown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\n    if (this._isMousedown) {\n      this.onMouseup();\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, Injectable, NgZone, Optional, SkipSelf} from '@angular/core';\nimport {Platform} from '../../platform/index';\nimport {Scrollable} from './scrollable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {auditTime} from '../../rxjs/index';\n/**\n * Time in ms to throttle the scrolling events by default.\n */\nexport const DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nexport class ScrollDispatcher {\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) { }\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n */\n_scrolled: Subject<void> = new Subject<void>();\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n */\n_globalSubscription: Subscription | null = null;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n */\nprivate _scrolledCount = 0;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n */\nscrollableReferences: Map<Scrollable, Subscription> = new Map();\n/**\n * Registers a Scrollable with the service and listens for its scrolled events. When the\n * scrollable is scrolled, the service emits the event in its scrolled observable.\n * @param {?} scrollable Scrollable instance to be registered.\n * @return {?}\n */\nregister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());\n\n    this.scrollableReferences.set(scrollable, scrollSubscription);\n  }\n/**\n * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n * @param {?} scrollable Scrollable instance to be deregistered.\n * @return {?}\n */\nderegister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollableReference = this.scrollableReferences.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollableReferences.delete(scrollable);\n    }\n  }\n/**\n * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n * to override the default \"throttle\" time.\n * @param {?=} auditTimeInMs\n * @param {?=} callback\n * @return {?}\n */\nscrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME, callback: () => any): Subscription {\n    // Scroll events can only happen on the browser, so do nothing if we're not on the browser.\n    if (!this._platform.isBrowser) {\n      return Subscription.EMPTY;\n    }\n\n    // In the case of a 0ms delay, use an observable without auditTime\n    // since it does add a perceptible delay in processing overhead.\n    let /** @type {?} */ observable = auditTimeInMs > 0 ?\n      auditTime.call(this._scrolled.asObservable(), auditTimeInMs) :\n      this._scrolled.asObservable();\n\n    this._scrolledCount++;\n\n    if (!this._globalSubscription) {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        return merge(\n          fromEvent(window.document, 'scroll'),\n          fromEvent(window, 'resize')\n        ).subscribe(() => this._notify());\n      });\n    }\n\n    // Note that we need to do the subscribing from here, in order to be able to remove\n    // the global event listeners once there are no more subscriptions.\n    let /** @type {?} */ subscription = observable.subscribe(callback);\n\n    subscription.add(() => {\n      this._scrolledCount--;\n\n      if (this._globalSubscription && !this.scrollableReferences.size && !this._scrolledCount) {\n        this._globalSubscription.unsubscribe();\n        this._globalSubscription = null;\n      }\n    });\n\n    return subscription;\n  }\n/**\n * Returns all registered Scrollables that contain the provided element.\n * @param {?} elementRef\n * @return {?}\n */\ngetScrollContainers(elementRef: ElementRef): Scrollable[] {\n    const /** @type {?} */ scrollingContainers: Scrollable[] = [];\n\n    this.scrollableReferences.forEach((_subscription: Subscription, scrollable: Scrollable) => {\n      if (this.scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n/**\n * Returns true if the element is contained within the provided Scrollable.\n * @param {?} scrollable\n * @param {?} elementRef\n * @return {?}\n */\nscrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean {\n    let /** @type {?} */ element = elementRef.nativeElement;\n    let /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element.parentElement);\n\n    return false;\n  }\n/**\n * Sends a notification that a scroll event has been fired.\n * @return {?}\n */\n_notify() {\n    this._scrolled.next();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction ScrollDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatcher.ctorParameters;\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolled;\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype._globalSubscription;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolledCount;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype.scrollableReferences;\n/** @type {?} */\nScrollDispatcher.prototype._ngZone;\n/** @type {?} */\nScrollDispatcher.prototype._platform;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n\nexport const /** @type {?} */ SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {Platform} from '../platform/platform';\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    platform: Platform,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['trigger'] && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\nprivate _updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n  exportAs: 'mdRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  scrollThrottle?: number;\n}\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n * @param {?=} _config\n */\nconstructor(\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _config?: RepositionScrollStrategyConfig) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      let /** @type {?} */ throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle, () => {\n        this._overlayRef.updatePosition();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction RepositionScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nRepositionScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollDispatcher;\n/** @type {?} */\nRepositionScrollStrategy.prototype._config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {ScrollStrategy} from './scroll-strategy';\nimport {CloseScrollStrategy} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {ViewportRuler} from '../position/viewport-ruler';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n/**\n * Options for how an overlay will handle scrolling.\n * \n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nexport class ScrollStrategyOptions {\n/**\n * @param {?} _scrollDispatcher\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewportRuler: ViewportRuler) { }\n/**\n * Do nothing on scroll.\n */\nnoop = () => new NoopScrollStrategy();\n/**\n * Close the overlay as soon as the user scrolls.\n */\nclose = () => new CloseScrollStrategy(this._scrollDispatcher);\n/**\n * Block scrolling.\n */\nblock = () => new BlockScrollStrategy(this._viewportRuler);\n/**\n * Update the overlay's position on scroll.\n * @param config Configuration to be used inside the scroll strategy.\n * Allows debouncing the reposition calls.\n */\nreposition = (config?: RepositionScrollStrategyConfig) =>\n      new RepositionScrollStrategy(this._scrollDispatcher, config)\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n{type: ViewportRuler, },\n];\n}\n\nfunction ScrollStrategyOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollStrategyOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollStrategyOptions.ctorParameters;\n/**\n * Do nothing on scroll.\n * @type {?}\n */\nScrollStrategyOptions.prototype.noop;\n/**\n * Close the overlay as soon as the user scrolls.\n * @type {?}\n */\nScrollStrategyOptions.prototype.close;\n/**\n * Block scrolling.\n * @type {?}\n */\nScrollStrategyOptions.prototype.block;\n/**\n * Update the overlay's position on scroll.\n * \\@param config Configuration to be used inside the scroll strategy.\n * Allows debouncing the reposition calls.\n * @type {?}\n */\nScrollStrategyOptions.prototype.reposition;\n/** @type {?} */\nScrollStrategyOptions.prototype._scrollDispatcher;\n/** @type {?} */\nScrollStrategyOptions.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../../common-behaviors/color';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * \\@docs-private\n */\nexport class MdPseudoCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdPseudoCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckboxBase.prototype._renderer;\n/** @type {?} */\nMdPseudoCheckboxBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdPseudoCheckboxBase = mixinColor(MdPseudoCheckboxBase, 'accent');\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox extends _MdPseudoCheckboxBase implements CanColor {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, renderer: Renderer2) {\n    super(renderer, elementRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  inputs: ['color'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {MdIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\nexport class MdIconModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdIcon, MdCommonModule],\n  declarations: [MdIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconModule.ctorParameters;\n}\n\n\n\nexport {MdIconBase,_MdIconMixinBase,MdIcon} from './icon';\nexport {getMdIconNameNotFoundError,getMdIconNoHttpProviderError,getMdIconFailedToSanitizeError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER} from './icon-registry';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {CompatibilityModule} from '../compatibility/compatibility';\nimport {BidiModule} from '../bidi/index';\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('md-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, compatibility mode, etc.\n * \n * This module should be imported to each top-level component module (e.g., MdTabsModule).\n */\nexport class MdCommonModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * @param {?} _document\n * @param {?} _sanityChecksEnabled\n */\nconstructor(\nprivate _document: any,\n      _sanityChecksEnabled: boolean) {\n\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\n      this._checkDoctype();\n      this._checkTheme();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (!this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, BidiModule],\n  exports: [CompatibilityModule, BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction MdCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCommonModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nMdCommonModule.prototype._hasDoneGlobalChecks;\n/** @type {?} */\nMdCommonModule.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {ScrollDispatcher} from '../scroll/scroll-dispatcher';\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nexport class ViewportRuler {\n/**\n * Cached document client rectangle.\n */\nprivate _documentRect?: ClientRect;\n/**\n * @param {?} scrollDispatcher\n */\nconstructor(scrollDispatcher: ScrollDispatcher) {\n    // Subscribe to scroll and resize events and update the document rectangle on changes.\n    scrollDispatcher.scrolled(0, () => this._cacheViewportGeometry());\n  }\n/**\n * Gets a ClientRect for the viewport's bounds.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportRect(documentRect = this._documentRect): ClientRect {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);\n    const /** @type {?} */ height = window.innerHeight;\n    const /** @type {?} */ width = window.innerWidth;\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n/**\n * Gets the (top, left) scroll position of the viewport.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportScrollPosition(documentRect = this._documentRect) {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const /** @type {?} */ top = - /** @type {?} */((documentRect)).top || document.body.scrollTop || window.scrollY ||\n                  document.documentElement.scrollTop || 0;\n\n    const /** @type {?} */ left = - /** @type {?} */((documentRect)).left || document.body.scrollLeft || window.scrollX ||\n                  document.documentElement.scrollLeft || 0;\n\n    return {top, left};\n  }\n/**\n * Caches the latest client rectangle of the document element.\n * @return {?}\n */\n_cacheViewportGeometry() {\n    this._documentRect = document.documentElement.getBoundingClientRect();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n];\n}\n\nfunction ViewportRuler_tsickle_Closure_declarations() {\n/** @type {?} */\nViewportRuler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nViewportRuler.ctorParameters;\n/**\n * Cached document client rectangle.\n * @type {?}\n */\nViewportRuler.prototype._documentRect;\n}\n\n/**\n * @param {?} parentRuler\n * @param {?} scrollDispatcher\n * @return {?}\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                scrollDispatcher: ScrollDispatcher) {\n  return parentRuler || new ViewportRuler(scrollDispatcher);\n}\n\nexport const /** @type {?} */ VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], ScrollDispatcher],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, OnInit, OnDestroy, NgZone, Renderer2} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nexport class Scrollable implements OnInit, OnDestroy {\nprivate _elementScrolled: Subject<Event> = new Subject();\nprivate _scrollListener: Function | null;\n/**\n * @param {?} _elementRef\n * @param {?} _scroll\n * @param {?} _ngZone\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _scroll: ScrollDispatcher,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    this._scrollListener = this._ngZone.runOutsideAngular(() => {\n      return this._renderer.listen(this.getElementRef().nativeElement, 'scroll', (event: Event) => {\n        this._elementScrolled.next(event);\n      });\n    });\n\n    this._scroll.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._scroll.deregister(this);\n\n    if (this._scrollListener) {\n      this._scrollListener();\n      this._scrollListener = null;\n    }\n  }\n/**\n * Returns observable that emits when a scroll event is fired on the host element.\n * @return {?}\n */\nelementScrolled(): Observable<any> {\n    return this._elementScrolled.asObservable();\n  }\n/**\n * @return {?}\n */\ngetElementRef(): ElementRef {\n    return this._elementRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-scrollable], [cdkScrollable]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction Scrollable_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollable.ctorParameters;\n/** @type {?} */\nScrollable.prototype._elementScrolled;\n/** @type {?} */\nScrollable.prototype._scrollListener;\n/** @type {?} */\nScrollable.prototype._elementRef;\n/** @type {?} */\nScrollable.prototype._scroll;\n/** @type {?} */\nScrollable.prototype._ngZone;\n/** @type {?} */\nScrollable.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n */\nconstructor(private _scrollDispatcher: ScrollDispatcher) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      this._scrollSubscription = this._scrollDispatcher.scrolled(0, () => {\n        if (this._overlayRef.hasAttached()) {\n          this._overlayRef.detach();\n        }\n\n        this.disable();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction CloseScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nCloseScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollDispatcher;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '../overlay-ref';\n\n/**\n * Describes a strategy that will be used by an overlay\n * to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  enable: () => void;\n  disable: () => void;\n  attach: (overlayRef: OverlayRef) => void;\n}\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nexport function getMdScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy} from './scroll-strategy';\n/**\n * Scroll strategy that doesn't do anything.\n */\nexport class NoopScrollStrategy implements ScrollStrategy {\n/**\n * @return {?}\n */\nenable() { }\n/**\n * @return {?}\n */\ndisable() { }\n/**\n * @return {?}\n */\nattach() { }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '../position/viewport-ruler';\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\nprivate _previousHTMLStyles = { top: '', left: '' };\nprivate _previousScrollPosition: { top: number, left: number };\nprivate _isEnabled = false;\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * @return {?}\n */\nattach() { }\n/**\n * @return {?}\n */\nenable() {\n    if (this._canBeEnabled()) {\n      const /** @type {?} */ root = document.documentElement;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = `${-this._previousScrollPosition.left}px`;\n      root.style.top = `${-this._previousScrollPosition.top}px`;\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._isEnabled) {\n      this._isEnabled = false;\n      document.documentElement.style.left = this._previousHTMLStyles.left;\n      document.documentElement.style.top = this._previousHTMLStyles.top;\n      document.documentElement.classList.remove('cdk-global-scrollblock');\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    if (document.documentElement.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const /** @type {?} */ body = document.body;\n    const /** @type {?} */ viewport = this._viewportRuler.getViewportRect();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n\nfunction BlockScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nBlockScrollStrategy.prototype._previousHTMLStyles;\n/** @type {?} */\nBlockScrollStrategy.prototype._previousScrollPosition;\n/** @type {?} */\nBlockScrollStrategy.prototype._isEnabled;\n/** @type {?} */\nBlockScrollStrategy.prototype._viewportRuler;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {SCROLL_DISPATCHER_PROVIDER} from './scroll-dispatcher';\nimport {Scrollable} from './scrollable';\nimport {PlatformModule} from '../../platform/index';\nimport {ScrollStrategyOptions} from './scroll-strategy-options';\n\nexport {Scrollable} from './scrollable';\nexport {ScrollDispatcher} from './scroll-dispatcher';\n\n// Export pre-defined scroll strategies and interface to build custom ones.\nexport {ScrollStrategy} from './scroll-strategy';\nexport {ScrollStrategyOptions} from './scroll-strategy-options';\nexport {RepositionScrollStrategy} from './reposition-scroll-strategy';\nexport {CloseScrollStrategy} from './close-scroll-strategy';\nexport {NoopScrollStrategy} from './noop-scroll-strategy';\nexport {BlockScrollStrategy} from './block-scroll-strategy';\nexport class ScrollDispatchModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  exports: [Scrollable],\n  declarations: [Scrollable],\n  providers: [SCROLL_DISPATCHER_PROVIDER, ScrollStrategyOptions],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollDispatchModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatchModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatchModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdRipple} from './ripple';\nimport {MdCommonModule} from '../common-behaviors/common-module';\nimport {VIEWPORT_RULER_PROVIDER} from '../overlay/position/viewport-ruler';\nimport {ScrollDispatchModule} from '../overlay/scroll/index';\nimport {PlatformModule} from '../platform/index';\n\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\n  exports: [MdRipple, MdCommonModule],\n  declarations: [MdRipple],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {ElementRef, Renderer2} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasRenderer {\n  _renderer: Renderer2;\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\n    : Constructor<CanColor> & T {\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\n      const /** @type {?} */ colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdSelectionModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MdPseudoCheckbox],\n  declarations: [MdPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectionModule.ctorParameters;\n}\n\n\n\nexport {MdPseudoCheckboxState,MdPseudoCheckboxBase,_MdPseudoCheckboxBase,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\nprivate _disabled: boolean = false;\n/**\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, ContentChildren, QueryList, Input} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdOptgroupBase { }\nexport const /** @type {?} */ _MdOptgroupMixinBase = mixinDisabled(MdOptgroupBase);\n\n// Counter for unique group ids.\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `md-option`.\n */\nexport class MdOptgroup extends _MdOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-optgroup, mat-optgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MdOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptgroup.ctorParameters;\n/** @type {?} */\nMdOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMdOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMdOptgroup.prototype._labelId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  NgModule,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '@angular/cdk';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../../core/compatibility/compatibility';\nimport {MdOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n */\nmultiple: boolean = false;\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} group\n * @param {?} _isCompatibilityMode\n */\nconstructor(\nprivate _element: ElementRef,\npublic readonly group: MdOptgroup,\npublic _isCompatibilityMode: boolean) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    this._active = true;\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    this._active = false;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Fetches the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MdOptgroup, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @type {?}\n */\nMdOption.prototype.multiple;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype.group;\n/** @type {?} */\nMdOption.prototype._isCompatibilityMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdSelectionModule} from '../selection/index';\nimport {MdOption} from './option';\nimport {MdOptgroup} from './optgroup';\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdSelectionModule],\n  exports: [MdOption, MdOptgroup],\n  declarations: [MdOption, MdOptgroup]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\n\nexport {MdOptionSelectionChange,MdOption} from './option';\nexport {MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './optgroup';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction} from '../bidi/index';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\n/**\n * OverlayState is a bag of values for either the initial configuration or current state of an\n * overlay.\n */\nexport class OverlayState {\n/**\n * Strategy with which to position the overlay.\n */\npositionStrategy: PositionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy: ScrollStrategy;\n/**\n * Custom class to add to the overlay pane.\n */\npanelClass?: string = '';\n/**\n * Whether the overlay has a backdrop.\n */\nhasBackdrop?: boolean = false;\n/**\n * Custom class to add to the backdrop\n */\nbackdropClass?: string = 'cdk-overlay-dark-backdrop';\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nwidth?: number | string;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nheight?: number | string;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminWidth?: number | string;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminHeight?: number | string;\n/**\n * The direction of the text in the overlay panel.\n */\ndirection?: Direction = 'ltr';\n\n  // TODO(jelbourn): configuration still to add\n  // - focus trap\n  // - disable pointer events\n  // - z-index\n}\n\nfunction OverlayState_tsickle_Closure_declarations() {\n/**\n * Strategy with which to position the overlay.\n * @type {?}\n */\nOverlayState.prototype.positionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nOverlayState.prototype.scrollStrategy;\n/**\n * Custom class to add to the overlay pane.\n * @type {?}\n */\nOverlayState.prototype.panelClass;\n/**\n * Whether the overlay has a backdrop.\n * @type {?}\n */\nOverlayState.prototype.hasBackdrop;\n/**\n * Custom class to add to the backdrop\n * @type {?}\n */\nOverlayState.prototype.backdropClass;\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.width;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.height;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minWidth;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minHeight;\n/**\n * The direction of the text in the overlay panel.\n * @type {?}\n */\nOverlayState.prototype.direction;\n}\n\n"],"names":["SELECT_PANEL_PADDING_X","END","this","_dateAdapter","getDate","_activeDate","PAGE_UP","event","altKey","addCalendarYears","addCalendarMonths","PAGE_DOWN","ENTER","_dateFilterForViews","_dateSelected","preventDefault","_focusActiveCell","MdCalendar","prototype","_handleCalendarBodyKeydownInYearView","keyCode","LEFT_ARROW","RIGHT_ARROW","_nextMonthInSameCol","HOME","_prevMonthInSameCol","date","increment","getMonth","decorators","type","Component","args","selector","template","styles","host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","NgZone","undefined","Optional","Inject","MD_DATE_FORMATS","startView","Input","minDate","maxDate","dateFilter","selectedChange","Output","datepickerUid","MdDatepickerContent","_handleKeydown","ESCAPE","datepicker","close","propDecorators","MdDatepicker","_dialog","_overlay","_ngZone","_viewContainerRef","_dir","_document","touchUi","opened","id","_selected","createMissingDateImplError","Object","defineProperty","get","_startAt","_datepickerInput","value","configurable","min","enumerable","_dateFilter","ngOnDestroy","_popupRef","_inputSubscription","unsubscribe","oldValue","Error","_focusedElementBeforeOpen","activeElement","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","isAttached","detach","focus","_this","open","direction","componentInstance","ComponentPortal","attach","instance","first","call","onStable","subscribe","updatePosition","backdropClick","overlayState","hasBackdrop","backdropClass","scrollStrategy","scrollStrategies","reposition","create","position","withFallbackPosition","originX","originY","overlayX","overlayY","MdDialog","Overlay","DOCUMENT","multi","MdDatepickerInput","_elementRef","_renderer","_dateFormats","_mdInputContainer","_cvaOnChange","_maxValidator","control","max","compareDate","mdDatepickerMax","actual","mdDatepickerFilter","set","_datepicker","_registerInput","mdDatepicker","filter$$1","_validatorOnChange","sameDate","oldDate","_valueChange","emit","_min","_datepickerSubscription","selectedChanged","selected","registerOnValidatorChange","fn","registerOnChange","_onTouched","setDisabledState","disabled","_onKeydown","[attr.aria-expanded]","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","ctorParameters","Renderer2","DateAdapter","MdInputContainer","matDatepickerFilter","MdDatepickerToggle","_intl","v","_open","stopPropagation","[attr.aria-label]","(click)","MdDatepickerIntl","MdDatepickerModule","NgModule","imports","CommonModule","MdButtonModule","MdDialogModule","OverlayModule","StyleModule","A11yModule","exports","declarations","MdCalendarBody","MdMonthView","MdYearView","providers","entryComponents","CdkAccordion","_focusTrapFactory","_ariaLabelledBy","tslib_1.__extends","MdDialogContainer","_super","attachComponentPortal","portal","_portalHost","hasAttached","throwMdDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","attachTemplatePortal","_trapFocus","_focusTrap","nativeElement","focusInitialElementWhenReady","_restoreFocus","toFocus","_elementFocusedBeforeDialogWasOpened","_onAnimationDone","_onAnimationStateChange","toState","trigger","transition","animate","[attr.aria-labelledby]","[@slideDialog]","(@slideDialog.done)","FocusTrapFactory","_injector","_location","_parentDialog","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","Subject","_afterOpenAtThisLevel","_boundKeydown","bind","afterAllClosed","_afterAllClosed","asObservable","closeAll","_openDialogs","componentOrTemplateRef","config","length","_afterOpen","next","dialogRef","_getOverlayState","dialogConfig","OverlayState","panelClass","block","_attachDialogContainer","overlay","containerPortal","viewContainerRef","containerRef","_config","_attachDialogContent","dialogContainer","overlayRef","MdDialogRef","disableClose","injector","_createInjector","contentRef","userInjector","injectionTokens","WeakMap","_removeOpenDialog","index","indexOf","canClose","topDialog","Injectable","MdDialogClose","ariaLabel","dialogResult","Directive","MdDialogTitle","ngOnInit","_container","Promise","resolve","then","[id]","MdDialogContent","MdDialogActions","ActiveDescendantKeyManager","setActiveItem","activeItem","setInactiveStyles","_uniqueAutocompleteIdCounter","MdAutocomplete","_changeDetectorRef","positionY","showPanel","_keyManager","options","withWrap","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_getClassList","exportAs","ChangeDetectorRef","ViewChild","TemplateRef","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MdAutocompleteTrigger","_element","_zone","_inputContainer","_panelOpen","_manuallyFloatingPlaceholder","_onChange","autocomplete","_panelPositionSubscription","openPanel","getMdAutocompleteMissingPanelError","_overlayRef","getState","width","_getHostWidth","updateSize","_createOverlay","_portal","_closingActionsSubscription","_subscribeToClosingActions","_setVisibility","_floatPlaceholder","closePanel","_resetPlaceholder","merge","optionSelections","tabOut","_outsideClickStream","RxChain","from","fromEvent","filter","clickTarget","inputContainer","contains","overlayElement","result","of","registerOnTouched","panelOpen","prevActiveItem_1","_handleInput","panelTop","optionOffset","changes","switchMap","_setValueAndClose","_destroyPanel","dispose","toDisplay","_setTriggerValue","source","forEach","option","skip","deselect","TemplatePortal","_getOverlayConfig","positionStrategy","_getOverlayPosition","_positionStrategy","connectedTo","_subscribeToPositionChanges","strategy","onPositionChange","change","connectionPair","_resetActiveItem","_resetPanel","recalculateLastPosition","role","aria-autocomplete","aria-multiline","(focusin)","(input)","(blur)","(keydown)","MD_AUTOCOMPLETE_VALUE_ACCESSOR","Host","_matAutocomplete","MdAutocompleteModule","MdOptionModule","MdCommonModule","MdCalendarCell","displayValue","enabled","numCols","activeCell","_cellClicked","cell","selectedValueChange","cellNumber","_firstRowOffset","label","allowDisabledSelection","EventEmitter","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","map","long","i","narrow","_weekdays","slice","concat","today","oldActiveDate","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","ngAfterContentInit","_init","_todayDate","_monthLabel","getMonthNames","activeDate","toLocaleUpperCase","firstOfMonth","createDate","getYear","_firstWeekOffset","_createWeekCells","dateNames","getDateNames","_weeks","daysInMonth","push","format","display","dateA11yLabel","d1","d2","_selectedMonth","_getMonthInCurrentYear","_monthSelected","month","monthNames","_months","row","_createCellForMonth","monthName","_isMonthEnabled","addCalendarDays","prevMonthLabel","_isCompatibilityMode","_clampedActiveDate","clampDate","_monthView","monthYearLabel","getYearName","nextMonthLabel","nextYearLabel","startAt","_currentPeriodClicked","_previousClicked","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","querySelector","date1","date2","UP_ARROW","_selectedIndex","_focusIndex","_disableRipple","MdTabHeader","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_alignInkBarToSelectedTab","_selectedIndexChanged","_scrollDistanceChanged","_focusNextTab","_focusPreviousTab","selectFocusedIndex","focusIndex","_realignInkBar","runOutsideAngular","dirChange","resize","window","auditTime","startWith","_onContentChanges","_updatePagination","_checkPaginationEnabled","_checkScrollingControls","_isValidIndex","_setTabFocus","tab","toArray","tabIndex","_showPaginationControls","_scrollToLabel","containerEl","_tabListContainer","scrollWidth","offsetWidth","tabs","offset","setStyle","_tabList","translateX","_scrollHeader","scrollDir","viewLength","scrollDistance","selectedLabel","afterVisiblePos","labelBeforePos","beforeVisiblePos","labelAfterPos","_disableScrollAfter","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","[class.mat-tab-header-rtl]","ContentChildren","MdTabLabelWrapper","MdInkBar","disableRipple","indexFocused","MdTabsModule","ObserveContentModule","ScrollDispatchModule","MdTabGroup","MdTabLabel","MdTab","MdTabNav","MdTabLink","MdToolbarRow","MdToolbarBase","_MdToolbarMixinBase","mixinColor","MdToolbar","renderer","inputs","MdToolbarModule","MdTooltip","_scrollDispatcher","_platform","_position","showDelay","IOS","listen","show","hide","_disabled","_message","_tooltipClass","_tooltipInstance","_setTooltipClass","message","hideDelay","tooltipClass","_disposeTooltip","delay","trim","_createTooltip","_setTooltipMessage","toggle","_isTooltipVisible","TooltipComponent","isDirectionLtr","getMdTooltipInvalidPositionError","isLtr","_markForCheck","(touchend)","ScrollDispatcher","ViewContainerRef","_positionDeprecated","_matPosition","_transformOrigin","_closeOnInteraction","_setTransformOrigin","_showTimeoutId","setTimeout","_visibility","_hideTimeoutId","_afterVisibilityAnimation","e","isVisible","_onHide","_handleBodyInteraction","animations","state","style","transform","(body:click)","MdTooltipModule","MdMenuItemBase","MdMenuItem","_getHostElement","[attr.tabindex]","[attr.aria-disabled]","[attr.disabled]","transformMenu","opacity","fadeInItems","MdMenu","_xPosition","overlapTrigger","setPositionClasses","_yPosition","classes","_classList","split","reduce","obj","className","_tabSubscription","onKeydown","focusFirstItem","_emitCloseEvent","posX","xPosition","posY","yPosition","templateRef","items","classList","MdMenuTrigger","onMenuOpen","onMenuClose","menu","_checkMenu","closeMenu","toggleMenu","_menuOpen","openMenu","_subscribeToBackdrop","_initMenu","_backdropSubscription","_resetMenu","_cleanUpSubscriptions","_openedByMouse","_setIsMenuOpen","throwMdMenuMissingError","_getPosition","withDirection","dir","_subscribeToPositions","_a","fallbackX","_b","fallbackOverlayY","_positionSubscription","aria-haspopup","(mousedown)","Directionality","MdMenuModule","MdRippleModule","DialogInjector","_parentInjector","_customTokens","token","notFoundValue","MdDialogConfig","_containerInstance","_afterClosed","afterClosed","_getPositionStrategy","left","right","centerHorizontally","top","bottom","height","[attr.align]","[class.mat-input-invalid]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","MD_PLACEHOLDER_GLOBAL_OPTIONS","hideRequiredMarker","_placeholderChild","ContentChild","MdPlaceholder","_errorChildren","MdErrorDirective","MdTextareaAutosize","formControl","valueChanges","resizeToFitContent","_minRows","minRows","minHeight","_cachedLineHeight","_setMaxHeight","ngAfterViewInit","_cacheTextareaLineHeight","textareaClone","clientHeight","textarea","removeChild","_previousValue","_matAutosizeMinRows","_matAutosizeMaxRows","MdInputModule","MdSuffix","MdHint","MdSnackBarConfig","announcementMessage","duration","_onAction","onAction","dismiss","containerInstance","_onExit","_finishDismiss","MdSnackBarRef","closed","exit","clearTimeout","_durationTimeoutId","_dismissAfter","complete","afterDismissed","afterOpened","_onEnter","MdSnackBarContainer","onExit","_i","snackBarConfig","extraClasses","cssClass","addClass","observableOf","_completeExit","onEnter_1","onEnter","animationState","onMicrotaskEmpty","SimpleSnackBar","snackBarRef","_action","action","MdSnackBar","_live","_parentSnackBar","_snackBarRefAtThisLevel","openFromComponent","component","_applyConfigDefaults","_openedSnackBarRef","enter","announce","politeness","simpleSnackBarRef","_attachSnackbarContent","container","state$$1","SkipSelf","MdSnackBarModule","LIVE_ANNOUNCER_PROVIDER","MdTabBase","_MdTabMixinBase","mixinDisabled","_contentPortal","_content","templateLabel","textLabel","MdTabChangeEvent","_indexToSelect","headerPosition","focusChange","_dynamicHeight","coerceBooleanProperty","Math","_tabs","indexToSelect","selectChange","_createChangeEvent","origin","ngAfterViewChecked","_isInitialized","_getTabContentId","_groupId","_tabBodyWrapper","_tabBodyWrapperHeight","_removeTabBodyWrapperHeight","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","selectedIndexChange","MdTabLabelWrapperBase","_MdTabLabelWrapperMixinBase","[class.mat-tab-disabled]","element","requestAnimationFrame","_getLeftPosition","_activeLinkElement","_activeLinkChanged","_alignInkBar","MdTabLinkBase","_MdTabLinkMixinBase","_tabLinkRipple","MdRipple","ngZone","ruler","platform","globalOptions","_isActive","active","HostBinding","MdTabBody","onCentering","_getLayoutDirection","_origin","_onTranslateTabStarted","_onTranslateTabComplete","_isCenterPosition","onCentered","_scrollDistance","MdChip","toggleSelected","onFocus","chip","_handleClick","_MdChipMixinBase","(focus)","destroy","_subscribed","_tabIndex","MdChipList","FocusKeyManager","chips","_subscribeChips","_tabOutSubscription","_selectable","setPreviousItemActive","chipIndex","updateActiveItemIndex","queries","selectable","MdChipsModule","MdBasicChip","url","MdIconRegistry","_cachedIconsByUrl","Map","_inProgressUrlFetches","_fontCssClassesByAlias","addSvgIcon","iconName","addSvgIconInNamespace","namespace","key","iconKey","_svgIconConfigs","SvgIconConfig","addSvgIconSetInNamespace","configNamespace","_iconSetConfigs","alias","classNameForFontAlias","setDefaultFontSetClass","_defaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","doOperator","svg","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","name","_throw","getMdIconNameNotFoundError","svgElement","namedIcon","_extractIconWithNameFromAnySet","_loadSvgIconSetFromConfig","iconSetConfig","catchOperator","err","forkJoin","Observable","iconSetFetchRequests","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_svgElementFromString","_createSvgElementForSingleIcon","responseText","_setSvgAttributes","iconNode","iconSet","_toSvgElement","setAttribute","getMdIconNoHttpProviderError","getMdIconFailedToSanitizeError","inProgressFetch","req","_http","MdIconBase","_MdIconMixinBase","MdIcon","_mdIconRegistry","ariaHidden","parts","ngOnChanges","changedInputs","keys","svgIcon","_splitIconName","getNamedSvgIcon","_setSvgElement","console","log","_usingFontIcon","_updateFontIconClasses","layoutElement","innerHTML","elem","fontSetClass","fontSet","_previousFontSetClass","removeClass","fontIcon","_previousFontIconClass","MdIconModule","DEGREE_IN_RADIANS","PI","MAX_ANGLE","HAS_RAF","PROGRESS_SPINNER_STROKE_WIDTH","MdProgressSpinnerCssMatStyler","MdProgressSpinner","_lastAnimationId","strokeWidth","mode","_interdeterminateInterval","_cleanupIndeterminateAnimation","newValue","clamp","_animateCircle","_value","animateFrom","animateTo","ease","rotation","linearEase","startTime","Date","now","_renderArc","animation_1","elapsedTime","changeInValue","start","end","rotationStartPoint","interdeterminateInterval","setInterval","animate$$1","_path","svgArc","MdSpinner","MdProgressSpinnerModule","MdProgressBar","color","_bufferValue","clamp$1","_primaryTransform","bufferValue","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","MdProgressBarModule","MD_INPUT_INVALID_TYPES","align","nextUniqueId$1","[class.mat-right]","MdPrefix","MdInputDirective","_ngControl","_parentForm","_parentFormGroup","errorOptions","_required","_placeholderChange","_neverEmptyInputTypes","_errorOptions","_id","_placeholder","_type","_isTextarea","getSupportedInputTypes","has","_isBadInput","_cachedUid","_onBlur","focused","_isErrorState","_isNeverEmpty","validity","badInput","nodeName","isBrowser","toLowerCase","[placeholder]","[disabled]","[required]","[attr.aria-describedby]","[attr.aria-invalid]","Platform","NgControl","Self","NgForm","placeholder","errorStateMatcher","placeholderOptions","_subscriptAnimationState","_hintLabel","_hintLabelId","_placeholderOptions","floatPlaceholder","float","_hideRequiredMarker","_processHints","_validateInputChild","_validatePlaceholders","_hintChildren","_mdInputChild","detectChanges","prop","_focusInput","input","_validateHints","startHint_1","endHint_1","hint","getMdInputContainerDuplicatedHintError","_syncAriaDescribedby","ids","startHint","find","endHint","ariaDescribedby","join","getMdInputContainerMissingMdInputError","MdSidenavContainer","_getMarginLeft","_right","_getSidenavEffectiveWidth","_getPositionLeft","_getPositionRight","_getStyles","MdSidenavModule","MdSidenav","MdListDivider","aria-orientation","MdList","MdListCssMatStyler","MdNavListCssMatStyler","MdDividerCssMatStyler","MdListAvatarCssMatStyler","MdListIconCssMatStyler","MdListSubheaderCssMatStyler","_list","MdListItem","_handleFocus","_handleBlur","MdListModule","MdLineModule","MdGridTile","_setStyle","property","rowspan","colspan","MdGridTileText","_lineSetter","MdLineSetter","_lines","MdLine","MdGridAvatarCssMatStyler","MdGridTileHeaderCssMatStyler","MdGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","Array","lastRowMax","rowCount","_trackTile","tile","_markTilePosition","gapStartIndex","_findMatchingGap","tileCols","_nextRow","gapEndIndex","_findGapEndIndex","TilePosition","col","TileStyler","_rows","_rowspan","_gutterSize","normalizeUnits","gutterSize","_cols","cols","_direction","getTilePosition","baseSize","calc","getTileSize","span","colIndex","percentWidthPerTile","setColStyles","percentWidth","gutterWidth","side","baseTileWidth","getTileSpan","tileHeight","setRowStyles","FixedTileStyler","fixedRowHeight","init","getGutterSpan","_parseRatio","RatioTileStyler","baseTileHeight","getComputedHeight","ratioParts","FitTileStyler","apply","arguments","percentHeightPerTile","gutterHeightPerTile","getBaseTileSize","MdGridList","_gutter","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkRowHeight","_tileStyler","_tiles","pos","positions","_setListStyle","rowHeight","MdGridListModule","MdCardContent","MdCardTitle","MdCardSubtitle","MdCardActions","MdCardFooter","MdCardImage","MdCardSmImage","MdCardMdImage","MdCardLgImage","MdCardXlImage","MdCardAvatar","MdCard","MdCardHeader","MdCardModule","MdCardTitleGroup","MdChipBase","select","MD_SLIDE_TOGGLE_VALUE_ACCESSOR","MdSlideToggle","labelPosition","ariaLabelledby","required","SlideToggleRenderer","startThumbDrag","checked","dragging","_thumbBarWidth","_thumbBarEl","clientWidth","_thumbEl","stopThumbDrag","applyCssTransform","dragPercentage","dragX","_getDragPercentage","distance","percentage","MdSlideToggleModule","FOCUS_ORIGIN_MONITOR_PROVIDER","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MdSlider","MdSliderChange","MdSliderBase","_MdSliderMixinBase","_focusOriginMonitor","_step","_thumbLabel","_tickInterval","onTouched","_isSliding","monitor","SliderRenderer","_invert","_max","_percent","_calculatePercentage","coerceNumberProperty","tickInterval","_vertical","_roundLabelTo","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","backgroundSize","tickSize","sign","rotate","_invertAxis","_sliderDimensions","getSliderDimensions","addFocus","_onSlide","_updateValueFromPosition","x","center","y","_onMouseenter","_onSlideEnd","_updateTickIntervalPercent","_increment","_onKeyup","numSteps","size","posComponent","_clamp","exactValue","_calculateValue","closestValue","round","step","_controlValueAccessorChangeFn","trackSize","pixelsPerStep","stepsPerTick","ceil","pixelsPerTick","_tickIntervalPercent","writeValue","isDisabled","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","tabindex","[attr.aria-valuemax]","[attr.aria-valuemin]","[class.mat-slider-hide-last-tick]","FocusOriginMonitor","_sliderElement","wrapperElement","MdSliderModule","FormsModule","BidiModule","MdSidenavToggleResult","animationFinished","_doc","_align","_disableClose","_opened","onOpen","onClose","_toggleAnimationPromise","_elementFocusedBeforeSidenavWasOpened","activeEl","HTMLElement","blur","isFocusTrapEnabled","_resolveToggleAnimationPromise","isOpen","[class.mat-sidenav-opening]","[class.mat-sidenav-over]","onAlignChanged","_enableTransitions","_validateDrawers","_start","_watchSidenavToggle","sidenav","_watchSidenavAlign","all","_end","isAdd","throwMdDuplicatedSidenavError","_left","_onBackdropClicked","_isShowingBackdrop","_isSidenavOpen","_width","MdRadioGroup","_uniqueIdCounter$2","MdRadioChange","MdRadioGroupBase","_MdRadioGroupMixinBase","_changeDetector","_name","_updateRadioButtonNames","_labelPosition","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","MdRadioButtonBase","MdRadioButton","radioGroup","_radioDispatcher","_checked","_removeUniqueSelectionListener","newCheckedState","notify","_inputElement","_emitChangeEvent","_onInputChange","groupValueChanged","_onInputFocusChange","focusOrigin","_focusRipple","fadeOut","[class.mat-radio-disabled]","_ripple","MdRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","VIEWPORT_RULER_PROVIDER","transformPanel","minWidth","MdSelectChange","MdSelectBase","_MdSelectMixinBase","MdSelect","_viewportRuler","_control","_scrollTop","_optionIds","_panelDoneAnimating","valueAccessor","parseInt","getMdSelectDynamicMultipleError","_multiple","onSelectionChange","_initKeyManager","_setSelectionByValue","_changeSubscription","_triggerWidth","_setTriggerWidth","_calculateOverlayPosition","_placeholderState","_floatPlaceholderState","multiple","_selectionModel","selectedOptions","viewValue","_isRtl","_getTriggerRect","SPACE","DOWN_ARROW","_onFadeInDone","_calculateOverlayOffsetX","overlayDir","isUserInput","isArray","_clearSelection","_sortValues","_setValueWidth","isEmpty","correspondingOption","_selectViaInteraction","optionsArray","clear","_resetOptions","_dropSubscriptions","_listenToOptions","_setOptionIds","_setOptionMultiple","_optionSubscription","optionSelectionChanges","_onSelect","wasSelected","isSelected","_propagateChanges","valueToEmit","fallbackValue","_selectedValueWidth","_focusCorrectOption","setFirstItemActive","_getOptionIndex","current","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","scrollBuffer","_calculateOverlayScroll","selectedOptionOffset","_offsetY","_calculateOverlayOffsetY","_getLabelCountBeforeOption","_checkOverlayWithinViewport","clampValue","_getPlaceholderAnimationState","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","offsetX","group","isRtl","leftOverflow","overlayRect","rightOverflow","viewportRect","firstDisplayedIndex","SELECT_MAX_OPTIONS_DISPLAYED","selectedDisplayIndex","optionOffsetFromPanelTop","triggerRect","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelDown","distanceBelowViewport","distanceAboveViewport","currentActiveItem","optionGroups","optionIndex","groups","groupCounter","[attr.aria-required]","transformPlaceholder","fadeInContent","ViewportRuler","Attribute","ConnectedOverlayDirective","MdOption","descendants","MdOptgroup","MdSelectModule","MdSlideToggleChange","nextId$1","MdSlideToggleBase","_uniqueId","_onChangeEvent","_onInputClick","onChange","_onDrag","_slideRenderer","updateThumbPosition","deltaX","_MdSlideToggleMixinBase","MdButtonToggleGroup","MdButtonToggleChange","_MdButtonToggleGroupMixinBase","MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","[class.mat-button-toggle-vertical]","_buttonToggles","MdButtonToggle","MdButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","_uniqueIdCounter$1","_toggle","UniqueSelectionDispatcher","MdButtonToggleModule","DEFAULT_ROUND_BUTTON_COLOR","MdButtonCssMatStyler","MdRaisedButtonCssMatStyler","MdIconButtonCssMatStyler","MdFab","button","anchor","MdButton","MdAnchor","MdMiniFab","MdButtonBase","_MdButtonMixinBase","_isRoundButton","_hasAttributeWithPrefix","_isIconButton","stopMonitoring","_isRippleDisabled","unprefixedAttributeNames","some","suffix","focusOriginMonitor","stopImmediatePropagation","nextId","MD_CHECKBOX_CONTROL_VALUE_ACCESSOR","MdCheckbox","TransitionCheckState","Unchecked","Indeterminate","MdCheckboxChange","MdCheckboxBase","_MdCheckboxMixinBase","indeterminateChange","_currentAnimationClass","_currentCheckState","Init","_indeterminate","indeterminate","changed","_transitionCheckState","_onLabelTextChange","newState","oldState","launch","persistent","centered","Checked","focusVia","_onInteractionEvent","_getAnimationClassForCheckStateTransition","animSuffix","MdCheckboxModule","_backdropElement","document","createElement","add","_state","_pane","insertBefore","addEventListener","_backdropClick","OverlayRef","_updateStackingOrder","nextSibling","appendChild","backdropToDetach","finishDetach_1","parentNode","remove","ConnectionPositionPair","ScrollableViewProperties","_overlayPos","_onPositionChange","_connectedTo","_originPos","ConnectedPositionStrategy","_preferredPositions","fallbackPoint","originPoint","_getOriginConnectionPoint","originRect","overlayPoint","fitsInViewport","_lastConnectedPosition","positionChange","ConnectedOverlayPositionChange","scrollableViewProperties","visibleArea","fallbackPosition","_setElementPosition","getBoundingClientRect","withScrollableContainers","scrollables","originPos","overlayPos","withOffsetX","_offsetX","withOffsetY","_getStartX","rect","originStartX","originEndX","_getEndX","overlayStartY","overlayStartX","topOverflow","bottomOverflow","visibleHeight","_subtractOverflows","getScrollableViewProperties","originBounds","_getElementBounds","isOriginOutsideView","isElementOutsideView","scrollContainerBounds","isOverlayClipped","isElementClipped","overlayBounds","isOverlayOutsideView","elementBounds","containersBounds","containerBounds","documentElement","horizontalStyleProperty","p","boundingClientRect","overflows","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_height","_wrapper","_topOffset","GlobalPositionStrategy","centerVertically","parentStyles","_cssPosition","marginTop","marginLeft","marginBottom","marginRight","OverlayPositionBuilder","OverlayContainer","_themeClass","_containerElement","_createContainer","body","deps","_positionBuilder","_appRef","pane","nextUniqueId","_createPortalHost","DomPortalHost","_componentFactoryResolver","noop","portalHost","ScrollStrategyOptions","ComponentFactoryResolver","OverlayOrigin","offsetY","_hasBackdrop","_destroyOverlay","_attachOverlay","_detachOverlay","_buildConfig","overlayConfig","_createPositionStrategy","_handlePositionChanges","_initEscapeListener","_templatePortal","_escapeListener","FullscreenOverlayContainer","_adjustParentForFullscreenChange","_addFullscreenChangeListener","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","getFullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","PortalModule","OVERLAY_PROVIDERS","_hammer","Hammer","isDevMode","warn","press","Press","_createRecognizer","base","inheritances","recognizer","SelectionModel","_isMulti","initiallySelectedValues","_emitChanges","_selection","Set","_selectedToEmit","_markSelected","values","_unmarkSelected","_unmarkAll","hasValue","sort","predicate","eventData","_deselectedToEmit","SelectionChange","added","removed","_listeners","useFactory","UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY","_windowFocused","checkChildren","subject","_elementInfo","info","focusListener","blurListener","unlisten","removeEventListener","elementInfo","_setClasses","delete","_setOriginForCurrentEventQueue","_registerDocumentEvents","_lastTouchTarget","target","_touchTimeout","toggleClass","shouldSet","focusTarget","_lastFocusOrigin","relatedTarget","Node","CdkMonitorFocus","cdkFocusChange","_monitorSubscription","hasAttribute","AnimationCurves","SHARP_CURVE","style$$1","parse","parseFormat","years","getISODateString","first$$1","second","DEFAULT_MONTH_NAMES","DEFAULT_DATE_NAMES","range","String","NativeDateAdapter","getFullYear","getDayOfWeek","getDay","SUPPORTS_INTL_API","dtf_1","Intl","DateTimeFormat","locale","_stripDirectionalityCharacters","dtf_2","dtf_3","weekday","DEFAULT_DAY_OF_WEEK_NAMES","dtf","getNumDaysInMonth","_createDateWithOverflow","year","timestamp","isNaN","displayFormat","months","newDate","days","_2digit","getUTCDate","setFullYear","n","str","replace","InjectionToken","MD_NATIVE_DATE_FORMATS","dateInput","day","monthYearA11yLabel","NativeDateModule","MdNativeDateModule","useValue","MdCoreModule","MdButtonToggleGroupBase","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","isAlreadySelected","matchingButtonToggle","buttonToggle","__extends","d","b","__","constructor","extendStatics","getMdCompatibilityInvalidPrefixError","prefix","enforceStyleRecalculation","parentRuler","scrollDispatcher","getMdScrollStrategyAlreadyAttachedError","defaultColor","class_1","colorPalette","class_2","formatCssUnit","parentDispatcher","valuesArray","valueFunction","isSubmitted","form","_uniqueIdCounter","submitted","exp","match","polarToCartesian","radius","pathRadius","angleInDegrees","angleInRadians","cos","sin","materialEase","currentTime","startValue","time","timeCubed","pow","timeQuad","largeArcFlag","startPoint","startAngle","endAngle","currentValue","arcSweep","getMdInputContainerUnsupportedTypeError","extendObject","dest","sources","TypeError","sources_1","hasOwnProperty","throwMdMenuInvalidPositionX","throwMdMenuInvalidPositionY","_applyConfigDefaults$1","setPrototypeOf","__proto__","MATERIAL_COMPATIBILITY_MODE","MAT_ELEMENTS_SELECTOR","CompatibilityModule","MatPrefixRejector","MdPrefixRejector","_checkTheme","getComputedStyle","testElement","MATERIAL_SANITY_CHECKS","_setLineClass","_setClass","count","RippleState","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","fadeOutRipple","RippleRenderer","_ruler","_triggerEvents","_activeRipples","rippleDisabled","setTriggerElement","containerRect","pageX","pageY","scrollPosition","getViewportScrollPosition","distanceToFurthestCorner","speedFactor","ripple","rippleRef","fadeOutAll","_isMousedown","fadeInRipple","rippleConfig","onMouseLeave","onMouseup","_scrolled","_scrolledCount","scrollableReferences","register","scrollable","deregister","scrollableReference","scrolled","auditTimeInMs","callback","Subscription","EMPTY","observable","subscription","_globalSubscription","scrollingContainers","_subscription","scrollableContainsElement","scrollableElement","SCROLL_DISPATCHER_PROVIDER_FACTORY","getViewportRect","documentRect","_documentRect","_cacheViewportGeometry","innerHeight","innerWidth","scrollY","scrollLeft","scrollX","VIEWPORT_RULER_PROVIDER_FACTORY","_rippleRenderer","_updateRippleRenderer","_globalOptions","[class.mat-ripple-unbounded]","_elementScrolled","_scrollListener","_scroll","Scrollable","getElementRef","CloseScrollStrategy","_scrollSubscription","enable","disable","NoopScrollStrategy","BlockScrollStrategy","_previousHTMLStyles","_isEnabled","_canBeEnabled","_previousScrollPosition","root","viewport","scrollHeight","RepositionScrollStrategy","throttle","scrollThrottle","SCROLL_DISPATCHER_PROVIDER","MdPseudoCheckboxBase","_MdPseudoCheckboxBase","MdPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MdSelectionModule","MdOptgroupBase","_MdOptgroupMixinBase","MdOptionSelectionChange","textContent","_active","_emitSelectionChangeEvent","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[attr.aria-selected]","_scrollStrategy","_attachments","updateDirection","_togglePointerEvents","_attachBackdrop","detachmentResult","_detachments","detachBackdrop","attachments","detachments"],"mappings":"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"}