{"version":3,"file":"material.es5.js","sources":["../../src/lib/index.ts","../../src/lib/module.ts","../../src/lib/paginator/index.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/sort/index.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/table/index.ts","../../src/lib/table/row.ts","../../src/lib/table/cell.ts","../../src/lib/table/table.ts","../../src/lib/expansion/index.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/accordion-item.ts","../../src/lib/expansion/accordion.ts","../../src/lib/datepicker/index.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/autocomplete/index.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/core/a11y/activedescendant-key-manager.ts","../../src/lib/dialog/index.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-injector.ts","../../src/lib/menu/index.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/tooltip/index.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/toolbar/index.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/tabs/index.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/snack-bar/index.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/input/index.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-container.ts","../../src/lib/input/input-container-errors.ts","../../src/lib/progress-bar/index.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-spinner/index.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/icon/index.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/chips/index.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip.ts","../../src/lib/card/index.ts","../../src/lib/card/card.ts","../../src/lib/grid-list/index.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/list/index.ts","../../src/lib/list/list.ts","../../src/lib/sidenav/index.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/slider/index.ts","../../src/lib/slider/slider.ts","../../src/lib/slide-toggle/index.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/select/index.ts","../../src/lib/select/select.ts","../../src/lib/select/select-errors.ts","../../src/lib/select/select-animations.ts","../../src/lib/core/a11y/focus-key-manager.ts","../../src/lib/radio/index.ts","../../src/lib/radio/radio.ts","../../src/lib/checkbox/index.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/button/index.ts","../../src/lib/button/button.ts","../../src/lib/button-toggle/index.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/core/core.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/placeholder/placeholder-options.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/style/index.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/core/style/focus-origin-monitor.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/selection/selection.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/overlay/index.ts","../../src/lib/core/overlay/fullscreen-overlay-container.ts","../../src/lib/core/overlay/overlay-directives.ts","../../src/lib/core/overlay/overlay.ts","../../src/lib/core/overlay/overlay-container.ts","../../src/lib/core/overlay/position/overlay-position-builder.ts","../../src/lib/core/overlay/position/global-position-strategy.ts","../../src/lib/core/overlay/position/connected-position-strategy.ts","../../src/lib/core/overlay/position/connected-position.ts","../../src/lib/core/overlay/overlay-ref.ts","../../src/lib/core/overlay/overlay-state.ts","../../src/lib/core/option/index.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/overlay/scroll/index.ts","../../src/lib/core/overlay/scroll/scroll-strategy-options.ts","../../src/lib/core/overlay/scroll/reposition-scroll-strategy.ts","../../src/lib/core/overlay/scroll/block-scroll-strategy.ts","../../src/lib/core/overlay/scroll/noop-scroll-strategy.ts","../../src/lib/core/overlay/scroll/close-scroll-strategy.ts","../../src/lib/core/overlay/scroll/scroll-strategy.ts","../../src/lib/core/overlay/scroll/scrollable.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/overlay/position/viewport-ruler.ts","../../src/lib/core/overlay/scroll/scroll-dispatcher.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/line/line.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/compatibility/compatibility.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {coerceBooleanProperty,coerceNumberProperty,ObserveContentModule,ObserveContent,Dir,Direction,Directionality,BidiModule,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,PortalHostDirective,TemplatePortalDirective,PortalModule,DomPortalHost,GestureConfig,HammerInput,HammerManager,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_ELEMENT_TOKEN,LIVE_ANNOUNCER_PROVIDER,InteractivityChecker,isFakeMousedownFromScreenReader,A11yModule,UniqueSelectionDispatcher,UniqueSelectionDispatcherListener,UNIQUE_SELECTION_DISPATCHER_PROVIDER,MdLineModule,MdLine,MdLineSetter,ComponentType,CompatibilityModule,NoConflictStyleCompatibilityMode,MdCommonModule,MATERIAL_SANITY_CHECKS,FloatPlaceholderType,PlaceholderOptions,MD_PLACEHOLDER_GLOBAL_OPTIONS,ErrorStateMatcher,ErrorOptions,MD_ERROR_GLOBAL_OPTIONS,defaultErrorStateMatcher,showOnDirtyErrorStateMatcher,MdCoreModule,MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup,PlatformModule,Platform,getSupportedInputTypes,OVERLAY_PROVIDERS,OverlayModule,Overlay,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,SelectionModel,SelectionChange,FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective,StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,AnimationCurves,AnimationDurations,MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckboxBase,_MdPseudoCheckboxBase,MdPseudoCheckbox,NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS,MaterialModule,MdAutocompleteModule,AutocompletePositionY,MdAutocomplete,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger,MdButtonModule,MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor,MdButtonToggleModule,ToggleType,MdButtonToggleGroupBase,_MdButtonToggleGroupMixinBase,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle,MdCardModule,MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardImage,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup,MdChipsModule,MdChipList,MdChipEvent,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip,MdCheckboxModule,MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox,MdDatepickerModule,MdCalendar,MdCalendarCell,MdCalendarBody,MdDatepickerContent,MdDatepicker,MD_DATEPICKER_VALUE_ACCESSOR,MD_DATEPICKER_VALIDATORS,MdDatepickerInput,MdDatepickerIntl,MdDatepickerToggle,MdMonthView,MdYearView,MdDialogModule,MD_DIALOG_DATA,MdDialog,throwMdDialogContentAlreadyAttachedError,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef,MdExpansionModule,CdkAccordion,MdAccordion,MdAccordionDisplayMode,AccordionItem,MdExpansionPanel,MdExpansionPanelState,MdExpansionPanelActionRow,MdExpansionPanelHeader,MdExpansionPanelDescription,MdExpansionPanelTitle,MdGridListModule,MdGridTile,MdGridList,MdIconModule,MdIconBase,_MdIconMixinBase,MdIcon,getMdIconNameNotFoundError,getMdIconNoHttpProviderError,getMdIconFailedToSanitizeError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER,MdInputModule,MdTextareaAutosize,MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer,getMdInputContainerPlaceholderConflictError,getMdInputContainerUnsupportedTypeError,getMdInputContainerDuplicatedHintError,getMdInputContainerMissingMdInputError,MdListModule,MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem,MdMenuModule,fadeInItems,transformMenu,MdMenu,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY,MdPaginatorModule,PageEvent,MdPaginator,MdProgressBarModule,MdProgressBar,MdProgressSpinnerModule,PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner,MdRadioModule,MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton,MdSelectModule,fadeInContent,transformPanel,transformPlaceholder,SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelect,MdSidenavModule,throwMdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer,MdSliderModule,MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,SliderRenderer,MdSlideToggleModule,MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle,MdSnackBarModule,MdSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer,MdSnackBarConfig,MdSnackBarRef,SimpleSnackBar,MdSortModule,SortDirection,MdSortHeader,MdSortHeaderIntl,MdSortable,Sort,MdSort,MdTableModule,_MdHeaderCellBase,_MdCell,MdHeaderCell,MdCell,_MdTable,MdTable,_MdHeaderRow,_MdRow,MdHeaderRow,MdRow,MdTabsModule,MdInkBar,MdTabBody,MdTabBodyOriginState,MdTabBodyPositionState,MdTabHeader,ScrollDirection,MdTabLabelWrapper,MdTab,MdTabLabel,MdTabNav,MdTabLink,MdTabChangeEvent,MdTabHeaderPosition,MdTabGroup,MdTabLinkBase,_MdTabLinkMixinBase,MdToolbarModule,MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar,MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,getMdTooltipInvalidPositionError,MdTooltip,TooltipVisibility,TooltipComponent} from './public_api';\n\nexport {mixinColor as ɵu} from './core/common-behaviors/color';\nexport {mixinDisabled as ɵv} from './core/common-behaviors/disabled';\nexport {UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY as ɵh} from './core/coordination/unique-selection-dispatcher';\nexport {MdDateFormats as ɵw} from './core/datetime/date-formats';\nexport {OVERLAY_CONTAINER_PROVIDER as ɵb,OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa} from './core/overlay/overlay-container';\nexport {OverlayPositionBuilder as ɵt} from './core/overlay/position/overlay-position-builder';\nexport {VIEWPORT_RULER_PROVIDER as ɵd,VIEWPORT_RULER_PROVIDER_FACTORY as ɵc} from './core/overlay/position/viewport-ruler';\nexport {SCROLL_DISPATCHER_PROVIDER as ɵf,SCROLL_DISPATCHER_PROVIDER_FACTORY as ɵe} from './core/overlay/scroll/scroll-dispatcher';\nexport {RippleRenderer as ɵg} from './core/ripple/ripple-renderer';\nexport {EXPANSION_PANEL_ANIMATION_TIMING as ɵi} from './expansion/expansion-panel';\nexport {MdGridAvatarCssMatStyler as ɵk,MdGridTileFooterCssMatStyler as ɵm,MdGridTileHeaderCssMatStyler as ɵl,MdGridTileText as ɵj} from './grid-list/grid-tile';\nexport {MdMenuItemBase as ɵn,_MdMenuItemMixinBase as ɵo} from './menu/menu-item';\nexport {MdPaginatorIntl as ɵx} from './paginator/paginator-intl';\nexport {MdTabBase as ɵr,_MdTabMixinBase as ɵs} from './tabs/tab';\nexport {MdTabLabelWrapperBase as ɵp,_MdTabLabelWrapperMixinBase as ɵq} from './tabs/tab-label-wrapper';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\n\nimport {\n  A11yModule,\n  BidiModule,\n  MdCommonModule,\n  MdRippleModule,\n  ObserveContentModule,\n  OverlayModule,\n  PortalModule\n} from './core/index';\n\nimport {MdButtonToggleModule} from './button-toggle/index';\nimport {MdButtonModule} from './button/index';\nimport {MdCheckboxModule} from './checkbox/index';\nimport {MdRadioModule} from './radio/index';\nimport {MdSelectModule} from './select/index';\nimport {MdSlideToggleModule} from './slide-toggle/index';\nimport {MdSliderModule} from './slider/index';\nimport {MdSidenavModule} from './sidenav/index';\nimport {MdListModule} from './list/index';\nimport {MdGridListModule} from './grid-list/index';\nimport {MdCardModule} from './card/index';\nimport {MdChipsModule} from './chips/index';\nimport {MdIconModule} from './icon/index';\nimport {MdProgressSpinnerModule} from './progress-spinner/index';\nimport {MdProgressBarModule} from './progress-bar/index';\nimport {MdInputModule} from './input/index';\nimport {MdSnackBarModule} from './snack-bar/index';\nimport {MdTabsModule} from './tabs/index';\nimport {MdToolbarModule} from './toolbar/index';\nimport {MdTooltipModule} from './tooltip/index';\nimport {MdMenuModule} from './menu/index';\nimport {MdDialogModule} from './dialog/index';\nimport {PlatformModule} from './core/platform/index';\nimport {MdAutocompleteModule} from './autocomplete/index';\nimport {StyleModule} from './core/style/index';\nimport {MdDatepickerModule} from './datepicker/index';\nimport {MdExpansionModule} from './expansion/index';\nimport {MdTableModule} from './table/index';\nimport {MdSortModule} from './sort/index';\nimport {MdPaginatorModule} from './paginator/index';\n\nconst /** @type {?} */ MATERIAL_MODULES = [\n  MdAutocompleteModule,\n  MdButtonModule,\n  MdButtonToggleModule,\n  MdCardModule,\n  MdChipsModule,\n  MdCheckboxModule,\n  MdDatepickerModule,\n  MdTableModule,\n  MdDialogModule,\n  MdExpansionModule,\n  MdGridListModule,\n  MdIconModule,\n  MdInputModule,\n  MdListModule,\n  MdMenuModule,\n  MdPaginatorModule,\n  MdProgressBarModule,\n  MdProgressSpinnerModule,\n  MdRadioModule,\n  MdRippleModule,\n  MdSelectModule,\n  MdSidenavModule,\n  MdSliderModule,\n  MdSlideToggleModule,\n  MdSnackBarModule,\n  MdSortModule,\n  MdTabsModule,\n  MdToolbarModule,\n  MdTooltipModule,\n  OverlayModule,\n  PortalModule,\n  BidiModule,\n  StyleModule,\n  A11yModule,\n  PlatformModule,\n  MdCommonModule,\n  ObserveContentModule\n];\n/**\n * @deprecated\n */\nexport class MaterialModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: MATERIAL_MODULES,\n  exports: MATERIAL_MODULES,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MaterialModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMaterialModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaterialModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {MdCommonModule, OverlayModule} from '../core';\nimport {MdButtonModule} from '../button/index';\nimport {MdSelectModule} from '../select/index';\nimport {MdPaginator} from './paginator';\nimport {MdPaginatorIntl} from './paginator-intl';\nimport {MdTooltipModule} from '../tooltip/index';\nexport class MdPaginatorModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    FormsModule,\n    MdButtonModule,\n    MdSelectModule,\n    MdTooltipModule,\n  ],\n  exports: [MdPaginator],\n  declarations: [MdPaginator],\n  providers: [MdPaginatorIntl],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPaginatorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginatorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginatorModule.ctorParameters;\n}\n\n\n\nexport {PageEvent,MdPaginator} from './paginator';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdPaginatorIntl} from './paginator-intl';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../core';\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n/**\n * The current page index.\n */\npageIndex: number;\n/**\n * The current page size\n */\npageSize: number;\n/**\n * The current total number of items being paged\n */\nlength: number;\n}\n\nfunction PageEvent_tsickle_Closure_declarations() {\n/**\n * The current page index.\n * @type {?}\n */\nPageEvent.prototype.pageIndex;\n/**\n * The current page size\n * @type {?}\n */\nPageEvent.prototype.pageSize;\n/**\n * The current total number of items being paged\n * @type {?}\n */\nPageEvent.prototype.length;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nexport class MdPaginator implements OnInit {\nprivate _initialized: boolean;\n/**\n * The zero-based page index of the displayed list of items. Defaulted to 0.\n */\npageIndex: number = 0;\n/**\n * The length of the total number of items that are being paginated. Defaulted to 0.\n */\nlength: number = 0;\n/**\n * Number of items to display on a page. By default set to 50.\n * @return {?}\n */\nget pageSize(): number { return this._pageSize; }\n/**\n * @param {?} pageSize\n * @return {?}\n */\nset pageSize(pageSize: number) {\n    this._pageSize = pageSize;\n    this._updateDisplayedPageSizeOptions();\n  }\nprivate _pageSize: number = 50;\n/**\n * The set of provided page size options to display to the user.\n * @return {?}\n */\nget pageSizeOptions(): number[] { return this._pageSizeOptions; }\n/**\n * @param {?} pageSizeOptions\n * @return {?}\n */\nset pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = pageSizeOptions;\n    this._updateDisplayedPageSizeOptions();\n  }\nprivate _pageSizeOptions: number[] = [];\n/**\n * Event emitted when the paginator changes the page size or page index.\n */\npage = new EventEmitter<PageEvent>();\n/**\n * Displayed set of page size options. Will be sorted and include current page size.\n */\n_displayedPageSizeOptions: number[];\n/**\n * @param {?} _intl\n */\nconstructor(public _intl: MdPaginatorIntl) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n/**\n * Advances to the next page if it exists.\n * @return {?}\n */\nnextPage() {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n/**\n * Move back to the previous page if it exists.\n * @return {?}\n */\npreviousPage() {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n/**\n * Whether there is a previous page.\n * @return {?}\n */\nhasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n/**\n * Whether there is a next page.\n * @return {?}\n */\nhasNextPage() {\n    const /** @type {?} */ numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n/**\n * Changes the page size so that the first item displayed on the page will still be\n * displayed using the new page size.\n * \n * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n * switching so that the page size is 5 will set the third page as the current page so\n * that the 10th item will still be displayed.\n * @param {?} pageSize\n * @return {?}\n */\n_changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const /** @type {?} */ startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n/**\n * Updates the list of page size options to display to the user. Includes making sure that\n * the page size is an option and that the list is sorted.\n * @return {?}\n */\nprivate _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n  }\n/**\n * Emits an event notifying that a change of the paginator's properties has been triggered.\n * @return {?}\n */\nprivate _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-paginator, mat-paginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  providers: [\n    {provide: MATERIAL_COMPATIBILITY_MODE, useValue: false}\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdPaginatorIntl, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'pageIndex': [{ type: Input },],\n'length': [{ type: Input },],\n'pageSize': [{ type: Input },],\n'pageSizeOptions': [{ type: Input },],\n'page': [{ type: Output },],\n};\n}\n\nfunction MdPaginator_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginator.ctorParameters;\n/** @type {?} */\nMdPaginator.propDecorators;\n/** @type {?} */\nMdPaginator.prototype._initialized;\n/**\n * The zero-based page index of the displayed list of items. Defaulted to 0.\n * @type {?}\n */\nMdPaginator.prototype.pageIndex;\n/**\n * The length of the total number of items that are being paginated. Defaulted to 0.\n * @type {?}\n */\nMdPaginator.prototype.length;\n/** @type {?} */\nMdPaginator.prototype._pageSize;\n/** @type {?} */\nMdPaginator.prototype._pageSizeOptions;\n/**\n * Event emitted when the paginator changes the page size or page index.\n * @type {?}\n */\nMdPaginator.prototype.page;\n/**\n * Displayed set of page size options. Will be sorted and include current page size.\n * @type {?}\n */\nMdPaginator.prototype._displayedPageSizeOptions;\n/** @type {?} */\nMdPaginator.prototype._intl;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n/**\n * To modify the labels and text displayed, create a new instance of MdPaginatorIntl and\n * include it in a custom provider\n */\nexport class MdPaginatorIntl {\n/**\n * A label for the page size selector.\n */\nitemsPerPageLabel = 'Items per page:';\n/**\n * A label for the button that increments the current page.\n */\nnextPageLabel = 'Next page';\n/**\n * A label for the button that decrements the current page.\n */\npreviousPageLabel = 'Previous page';\n/**\n * A label for the range of items within the current page and the length of the whole list.\n */\ngetRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPaginatorIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginatorIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginatorIntl.ctorParameters;\n/**\n * A label for the page size selector.\n * @type {?}\n */\nMdPaginatorIntl.prototype.itemsPerPageLabel;\n/**\n * A label for the button that increments the current page.\n * @type {?}\n */\nMdPaginatorIntl.prototype.nextPageLabel;\n/**\n * A label for the button that decrements the current page.\n * @type {?}\n */\nMdPaginatorIntl.prototype.previousPageLabel;\n/**\n * A label for the range of items within the current page and the length of the whole list.\n * @type {?}\n */\nMdPaginatorIntl.prototype.getRangeLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdSortHeader} from './sort-header';\nimport {MdSort} from './sort';\nimport {MdSortHeaderIntl} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\nexport {SortDirection} from './sort-direction';\nexport {MdSortHeader} from './sort-header';\nexport {MdSortHeaderIntl} from './sort-header-intl';\nexport {MdSortable,Sort,MdSort} from './sort';\nexport class MdSortModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  exports: [MdSort, MdSortHeader],\n  declarations: [MdSort, MdSortHeader],\n  providers: [MdSortHeaderIntl]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef, Component, Input,\n  Optional, ViewEncapsulation\n} from '@angular/core';\nimport {MdSort, MdSortable} from './sort';\nimport {MdSortHeaderIntl} from './sort-header-intl';\nimport {CdkColumnDef} from '@angular/cdk';\nimport {coerceBooleanProperty} from '../core';\nimport {getMdSortHeaderNotContainedWithinMdSortError} from './sort-errors';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n * \n * Must be provided with an id and contained within a parent MdSort directive.\n * \n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nexport class MdSortHeader implements MdSortable {\n/**\n * \\@docs-private\n */\nsortSubscription: Subscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n * the column's name.\n */\nid: string;\n/**\n * Sets the position of the arrow that displays when sorted.\n */\narrowPosition: 'before' | 'after' = 'after';\n/**\n * Overrides the sort start value of the containing MdSort for this MdSortable.\n */\nstart: 'asc' | 'desc';\n/**\n * Overrides the disable clear value of the containing MdSort for this MdSortable.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _id() { return this.id; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _id(v: string) { this.id = v; }\n/**\n * @param {?} _intl\n * @param {?} _changeDetectorRef\n * @param {?} _sort\n * @param {?} _cdkColumnDef\n */\nconstructor(public _intl: MdSortHeaderIntl,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic _sort: MdSort,\npublic _cdkColumnDef: CdkColumnDef) {\n    if (!_sort) {\n      throw getMdSortHeaderNotContainedWithinMdSortError();\n    }\n\n    this.sortSubscription = _sort.mdSortChange.subscribe(() => _changeDetectorRef.markForCheck());\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._sort.deregister(this);\n    this.sortSubscription.unsubscribe();\n  }\n/**\n * Whether this MdSortHeader is currently sorted in either ascending or descending order.\n * @return {?}\n */\n_isSorted() {\n    return this._sort.active == this.id && this._sort.direction;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-sort-header], [mat-sort-header]',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_sort.sort(this)',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSortHeaderIntl, },\n{type: ChangeDetectorRef, },\n{type: MdSort, decorators: [{ type: Optional }, ]},\n{type: CdkColumnDef, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input, args: ['md-sort-header', ] },],\n'arrowPosition': [{ type: Input },],\n'start': [{ type: Input, args: ['start', ] },],\n'disableClear': [{ type: Input },],\n'_id': [{ type: Input, args: ['mat-sort-header', ] },],\n};\n}\n\nfunction MdSortHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeader.ctorParameters;\n/** @type {?} */\nMdSortHeader.propDecorators;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdSortHeader.prototype.sortSubscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n * the column's name.\n * @type {?}\n */\nMdSortHeader.prototype.id;\n/**\n * Sets the position of the arrow that displays when sorted.\n * @type {?}\n */\nMdSortHeader.prototype.arrowPosition;\n/**\n * Overrides the sort start value of the containing MdSort for this MdSortable.\n * @type {?}\n */\nMdSortHeader.prototype.start;\n/** @type {?} */\nMdSortHeader.prototype._disableClear;\n/** @type {?} */\nMdSortHeader.prototype._intl;\n/** @type {?} */\nMdSortHeader.prototype._changeDetectorRef;\n/** @type {?} */\nMdSortHeader.prototype._sort;\n/** @type {?} */\nMdSortHeader.prototype._cdkColumnDef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {SortDirection} from './sort-direction';\n/**\n * To modify the labels and text displayed, create a new instance of MdSortHeaderIntl and\n * include it in a custom provider.\n */\nexport class MdSortHeaderIntl {\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n/**\n * A label to describe the current sort (visible only to screenreaders).\n */\nsortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortHeaderIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeaderIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeaderIntl.ctorParameters;\n/** @type {?} */\nMdSortHeaderIntl.prototype.sortButtonLabel;\n/**\n * A label to describe the current sort (visible only to screenreaders).\n * @type {?}\n */\nMdSortHeaderIntl.prototype.sortDescriptionLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Input, Output} from '@angular/core';\nimport {SortDirection} from './sort-direction';\nimport {coerceBooleanProperty} from '../core';\nimport {getMdSortDuplicateMdSortableIdError, getMdSortHeaderMissingIdError} from './sort-errors';\n\nexport interface MdSortable {\n  id: string;\n  start: 'asc' | 'desc';\n  disableClear: boolean;\n}\n\nexport interface Sort {\n  active: string;\n  direction: SortDirection;\n}\n/**\n * Container for MdSortables to manage the sort state and provide default sort parameters.\n */\nexport class MdSort {\n/**\n * Collection of all registered sortables that this directive manages.\n */\nsortables = new Map<string, MdSortable>();\n/**\n * The id of the most recently sorted MdSortable.\n */\nactive: string;\n/**\n * The direction to set when an MdSortable is initially sorted.\n * May be overriden by the MdSortable's sort start.\n */\nstart: 'asc' | 'desc' = 'asc';\n/**\n * The sort direction of the currently active MdSortable.\n */\ndirection: SortDirection = '';\n/**\n * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n * May be overriden by the MdSortable's disable clear input.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n */\nmdSortChange = new EventEmitter<Sort>();\n/**\n * Register function to be used by the contained MdSortables. Adds the MdSortable to the\n * collection of MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nregister(sortable: MdSortable) {\n    if (!sortable.id) {\n      throw getMdSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getMdSortDuplicateMdSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n/**\n * Unregister function to be used by the contained MdSortables. Removes the MdSortable from the\n * collection of contained MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nderegister(sortable: MdSortable) {\n    this.sortables.delete(sortable.id);\n  }\n/**\n * Sets the active sort id and determines the new sort direction.\n * @param {?} sortable\n * @return {?}\n */\nsort(sortable: MdSortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.mdSortChange.next({active: this.active, direction: this.direction});\n  }\n/**\n * Returns the next sort direction of the active sortable, checking for potential overrides.\n * @param {?} sortable\n * @return {?}\n */\ngetNextSortDirection(sortable: MdSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const /** @type {?} */ disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let /** @type {?} */ sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let /** @type {?} */ nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSort], [matSort]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input, args: ['mdSortActive', ] },],\n'start': [{ type: Input, args: ['mdSortStart', ] },],\n'direction': [{ type: Input, args: ['mdSortDirection', ] },],\n'disableClear': [{ type: Input, args: ['mdSortDisableClear', ] },],\n'mdSortChange': [{ type: Output },],\n};\n}\n\nfunction MdSort_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSort.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSort.ctorParameters;\n/** @type {?} */\nMdSort.propDecorators;\n/**\n * Collection of all registered sortables that this directive manages.\n * @type {?}\n */\nMdSort.prototype.sortables;\n/**\n * The id of the most recently sorted MdSortable.\n * @type {?}\n */\nMdSort.prototype.active;\n/**\n * The direction to set when an MdSortable is initially sorted.\n * May be overriden by the MdSortable's sort start.\n * @type {?}\n */\nMdSort.prototype.start;\n/**\n * The sort direction of the currently active MdSortable.\n * @type {?}\n */\nMdSort.prototype.direction;\n/** @type {?} */\nMdSort.prototype._disableClear;\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n * @type {?}\n */\nMdSort.prototype.mdSortChange;\n}\n\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let /** @type {?} */ sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nexport function getMdSortDuplicateMdSortableIdError(id: string): Error {\n  return Error(`Cannot have two MdSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSortHeaderNotContainedWithinMdSortError(): Error {\n  return Error(`MdSortHeader must be placed within a parent element with the MdSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSortHeaderMissingIdError(): Error {\n  return Error(`MdSortHeader must be provided with a unique id.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdTable} from './table';\nimport {CdkTableModule} from '@angular/cdk';\nimport {MdCell, MdHeaderCell} from './cell';\nimport {MdHeaderRow, MdRow} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\n\nexport {_MdHeaderCellBase,_MdCell,MdHeaderCell,MdCell} from './cell';\nexport {_MdTable,MdTable} from './table';\nexport {_MdHeaderRow,_MdRow,MdHeaderRow,MdRow} from './row';\nexport class MdTableModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CdkTableModule, CommonModule, MdCommonModule],\n  exports: [MdTable, MdHeaderCell, MdCell, MdHeaderRow, MdRow],\n  declarations: [MdTable, MdHeaderCell, MdCell, MdHeaderRow, MdRow],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTableModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTableModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTableModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {CdkHeaderRow, CdkRow, CDK_ROW_TEMPLATE} from '@angular/cdk';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdHeaderRow = CdkHeaderRow;\nexport const /** @type {?} */ _MdRow = CdkRow;\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MdHeaderRow extends _MdHeaderRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'md-header-row, mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderRow.ctorParameters;\n}\n\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MdRow extends _MdRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'md-row, mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Renderer2} from '@angular/core';\nimport {CdkCell, CdkColumnDef, CdkHeaderCell} from '@angular/cdk';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdHeaderCellBase = CdkHeaderCell;\nexport const /** @type {?} */ _MdCell = CdkCell;\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class MdHeaderCell extends _MdHeaderCellBase {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef,\n              renderer: Renderer2) {\n    super(columnDef, elementRef, renderer);\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.name}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-header-cell, mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderCell.ctorParameters;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class MdCell extends _MdCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef,\n              renderer: Renderer2) {\n    super(columnDef, elementRef, renderer);\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.name}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-cell, mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCell.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdTable = CdkTable;\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport class MdTable<T> extends _MdTable<T> { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-table, mat-table',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTable_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTable.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CompatibilityModule, UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '../core';\nimport {\n  MdExpansionPanelHeader,\n  MdExpansionPanelDescription,\n  MdExpansionPanelTitle\n} from './expansion-panel-header';\nimport {\n  MdExpansionPanel,\n  MdExpansionPanelActionRow,\n} from './expansion-panel';\nimport {\n  CdkAccordion,\n  MdAccordion,\n} from './accordion';\nexport class MdExpansionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, CommonModule],\n  exports: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  declarations: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionModule.ctorParameters;\n}\n\n\nexport {\n  CdkAccordion,\n  MdAccordion,\n  MdAccordionDisplayMode\n} from './accordion';\nexport {AccordionItem} from './accordion-item';\nexport {\n  MdExpansionPanel,\n  MdExpansionPanelState,\n  MdExpansionPanelActionRow\n} from './expansion-panel';\nexport {\n  MdExpansionPanelHeader,\n  MdExpansionPanelDescription,\n  MdExpansionPanelTitle\n} from './expansion-panel-header';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Host,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {SPACE, ENTER} from '../core/keyboard/keycodes';\nimport {MdExpansionPanel, EXPANSION_PANEL_ANIMATION_TIMING} from './expansion-panel';\n/**\n * <md-expansion-panel-header> component.\n * \n * This component corresponds to the header element of an <md-expansion-panel>.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanelHeader {\n/**\n * @param {?} panel\n */\nconstructor(\npublic panel: MdExpansionPanel) {}\n/**\n * Toggles the expanded state of the panel.\n * @return {?}\n */\n_toggle(): void {\n    this.panel.toggle();\n  }\n/**\n * Gets whether the panel is expanded.\n * @return {?}\n */\n_isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n/**\n * Gets the expanded state string of the panel.\n * @return {?}\n */\n_getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n/**\n * Gets the panel id.\n * @return {?}\n */\n_getPanelId(): string {\n    return this.panel.id;\n  }\n/**\n * Gets whether the expand indicator is hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\n    return this.panel.hideToggle;\n  }\n/**\n * Handle keyup event calling to toggle() if appropriate.\n * @param {?} event\n * @return {?}\n */\n_keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-expansion-panel-header, mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    'tabindex': '0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': '_getExpandedState()',\n  },\n  animations: [\n    trigger('indicatorRotate', [\n      state('collapsed', style({transform: 'rotate(0deg)'})),\n      state('expanded', style({transform: 'rotate(180deg)'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('expansionHeight', [\n      state('collapsed', style({height: '48px', 'line-height': '48px'})),\n      state('expanded', style({height: '64px', 'line-height': '68px'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdExpansionPanel, decorators: [{ type: Host }, ]},\n];\n}\n\nfunction MdExpansionPanelHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelHeader.ctorParameters;\n/** @type {?} */\nMdExpansionPanelHeader.prototype.panel;\n}\n\n/**\n * <md-panel-description> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelDescription {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-description, mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelDescription_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelDescription.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelDescription.ctorParameters;\n}\n\n/**\n * <md-panel-title> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-title, mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelTitle.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Host,\n  Input,\n  ViewEncapsulation,\n  Optional,\n  forwardRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {MdAccordion, MdAccordionDisplayMode} from './accordion';\nimport {AccordionItem} from './accordion-item';\nimport {UniqueSelectionDispatcher} from '../core';\n\n\n/** MdExpansionPanel's states. */\nexport type MdExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * Time and timing curve for expansion panel animations.\n */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * <md-expansion-panel> component.\n * \n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the CdkAccordion directive attached.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanel extends AccordionItem {\n/**\n * Whether the toggle indicator should be hidden.\n */\nhideToggle: boolean = false;\n/**\n * @param {?} accordion\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(  accordion: MdAccordion,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n/**\n * Gets the panel's display mode.\n * @return {?}\n */\n_getDisplayMode(): MdAccordionDisplayMode | MdExpansionPanelState {\n    if (!this.expanded) {\n      return this._getExpandedState();\n    }\n    if (this.accordion) {\n      return this.accordion.displayMode;\n    }\n    return this._getExpandedState();\n  }\n/**\n * Gets the expanded state string.\n * @return {?}\n */\n_getExpandedState(): MdExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'md-expansion-panel, mat-expansion-panel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[@displayMode]': '_getDisplayMode()',\n  },\n  providers: [\n    {provide: AccordionItem, useExisting: forwardRef(() => MdExpansionPanel)}\n  ],\n  animations: [\n    trigger('bodyExpansion', [\n      state('collapsed', style({height: '0px'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('displayMode', [\n      state('collapsed', style({margin: '0'})),\n      state('default', style({margin: '16px 0'})),\n      state('flat', style({margin: '0'})),\n      transition('flat <=> collapsed, default <=> collapsed, flat <=> default',\n                 animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdAccordion, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'hideToggle': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanel.ctorParameters;\n/** @type {?} */\nMdExpansionPanel.propDecorators;\n/**\n * Whether the toggle indicator should be hidden.\n * @type {?}\n */\nMdExpansionPanel.prototype.hideToggle;\n}\n\nexport class MdExpansionPanelActionRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-action-row, md-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelActionRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelActionRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelActionRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Output, EventEmitter, Input, Injectable, OnDestroy, Optional} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '../core';\nimport {CdkAccordion} from './accordion';\n/**\n * Used to generate unique ID for each expansion panel.\n */\nlet nextId = 0;\n/**\n * An abstract class to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nexport class AccordionItem implements OnDestroy {\n/**\n * Event emitted every time the MdAccordianChild is closed.\n */\nclosed = new EventEmitter<void>();\n/**\n * Event emitted every time the MdAccordianChild is opened.\n */\nopened = new EventEmitter<void>();\n/**\n * Event emitted when the MdAccordianChild is destroyed.\n */\ndestroyed = new EventEmitter<void>();\n/**\n * The unique MdAccordianChild id.\n */\nreadonly id = `cdk-accordion-child-${nextId++}`;\n/**\n * Whether the MdAccordianChild is expanded.\n * @return {?}\n */\nget expanded(): boolean { return this._expanded; }\n/**\n * @param {?} expanded\n * @return {?}\n */\nset expanded(expanded: boolean) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      if (expanded) {\n        this.opened.emit();\n/**\n * In the unique selection dispatcher, the id parameter is the id of the CdkAccordonItem,\n * the name value is the id of the accordion.\n */\nlet accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n    }\n  }\nprivate _expanded: boolean;\n/**\n * Unregister function for _expansionDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * @param {?} accordion\n * @param {?} _expansionDispatcher\n */\nconstructor(\npublic accordion: CdkAccordion,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n     this._removeUniqueSelectionListener =\n       _expansionDispatcher.listen((id: string, accordionId: string) => {\n         if (this.accordion && !this.accordion.multi &&\n             this.accordion.id === accordionId && this.id !== id) {\n           this.expanded = false;\n         }\n       });\n    }\n/**\n * Emits an event for the accordion item being destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this.destroyed.emit();\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Toggles the expanded state of the accordion item.\n * @return {?}\n */\ntoggle(): void {\n    this.expanded = !this.expanded;\n  }\n/**\n * Sets the expanded state of the accordion item to false.\n * @return {?}\n */\nclose(): void {\n    this.expanded = false;\n  }\n/**\n * Sets the expanded state of the accordion item to true.\n * @return {?}\n */\nopen(): void {\n    this.expanded = true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkAccordion, decorators: [{ type: Optional }, ]},\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'closed': [{ type: Output },],\n'opened': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'expanded': [{ type: Input },],\n};\n}\n\nfunction AccordionItem_tsickle_Closure_declarations() {\n/** @type {?} */\nAccordionItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccordionItem.ctorParameters;\n/** @type {?} */\nAccordionItem.propDecorators;\n/**\n * Event emitted every time the MdAccordianChild is closed.\n * @type {?}\n */\nAccordionItem.prototype.closed;\n/**\n * Event emitted every time the MdAccordianChild is opened.\n * @type {?}\n */\nAccordionItem.prototype.opened;\n/**\n * Event emitted when the MdAccordianChild is destroyed.\n * @type {?}\n */\nAccordionItem.prototype.destroyed;\n/**\n * The unique MdAccordianChild id.\n * @type {?}\n */\nAccordionItem.prototype.id;\n/** @type {?} */\nAccordionItem.prototype._expanded;\n/**\n * Unregister function for _expansionDispatcher *\n * @type {?}\n */\nAccordionItem.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nAccordionItem.prototype.accordion;\n/** @type {?} */\nAccordionItem.prototype._expansionDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk';\n\n/** MdAccordion's display modes. */\nexport type MdAccordionDisplayMode = 'default' | 'flat';\n/**\n * Unique ID counter\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nexport class CdkAccordion {\n/**\n * A readonly id value to use for unique selection coordination.\n */\nreadonly id = `cdk-accordion-${nextId++}`;\n/**\n * Whether the accordion should allow multiple expanded accordion items simulateously.\n * @return {?}\n */\nget multi(): boolean { return this._multi; }\n/**\n * @param {?} multi\n * @return {?}\n */\nset multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\nprivate  _multi: boolean = false;\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\nget hideToggle(): boolean { return this._hideToggle; }\n/**\n * @param {?} show\n * @return {?}\n */\nset hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\nprivate  _hideToggle: boolean = false;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n */\ndisplayMode: MdAccordionDisplayMode = 'default';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-accordion]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multi': [{ type: Input },],\n'hideToggle': [{ type: Input },],\n'displayMode': [{ type: Input },],\n};\n}\n\nfunction CdkAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkAccordion.ctorParameters;\n/** @type {?} */\nCdkAccordion.propDecorators;\n/**\n * A readonly id value to use for unique selection coordination.\n * @type {?}\n */\nCdkAccordion.prototype.id;\n/** @type {?} */\nCdkAccordion.prototype._multi;\n/** @type {?} */\nCdkAccordion.prototype._hideToggle;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n * @type {?}\n */\nCdkAccordion.prototype.displayMode;\n}\n\n/**\n * Directive for a Material Design Accordion.\n */\nexport class MdAccordion extends CdkAccordion {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-accordion, md-accordion',\n  host: {\n    class: 'mat-accordion'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAccordion.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdMonthView} from './month-view';\nimport {CommonModule} from '@angular/common';\nimport {StyleModule, OverlayModule, A11yModule} from '../core';\nimport {MdCalendarBody} from './calendar-body';\nimport {MdYearView} from './year-view';\nimport {MdDatepicker, MdDatepickerContent} from './datepicker';\nimport {MdDatepickerInput} from './datepicker-input';\nimport {MdDialogModule} from '../dialog/index';\nimport {MdCalendar} from './calendar';\nimport {MdDatepickerToggle} from './datepicker-toggle';\nimport {MdButtonModule} from '../button/index';\nimport {MdDatepickerIntl} from './datepicker-intl';\n\n\nexport {MdCalendar} from './calendar';\nexport {MdCalendarCell,MdCalendarBody} from './calendar-body';\nexport {MdDatepickerContent,MdDatepicker} from './datepicker';\nexport {MD_DATEPICKER_VALUE_ACCESSOR,MD_DATEPICKER_VALIDATORS,MdDatepickerInput} from './datepicker-input';\nexport {MdDatepickerIntl} from './datepicker-intl';\nexport {MdDatepickerToggle} from './datepicker-toggle';\nexport {MdMonthView} from './month-view';\nexport {MdYearView} from './year-view';\nexport class MdDatepickerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdButtonModule,\n    MdDialogModule,\n    OverlayModule,\n    StyleModule,\n    A11yModule,\n  ],\n  exports: [\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n  ],\n  declarations: [\n    MdCalendar,\n    MdCalendarBody,\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n    MdMonthView,\n    MdYearView,\n  ],\n  providers: [\n    MdDatepickerIntl,\n  ],\n  entryComponents: [\n    MdDatepickerContent,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {MdDatepicker} from './datepicker';\nimport {MdDatepickerIntl} from './datepicker-intl';\nexport class MdDatepickerToggle<D> {\n/**\n * Datepicker instance that the button will toggle.\n */\ndatepicker: MdDatepicker<D>;\n/**\n * @return {?}\n */\nget _datepicker() { return this.datepicker; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _datepicker(v: MdDatepicker<D>) { this.datepicker = v; }\n/**\n * @param {?} _intl\n */\nconstructor(public _intl: MdDatepickerIntl) {}\n/**\n * @param {?} event\n * @return {?}\n */\n_open(event: Event): void {\n    if (this.datepicker) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'button[mdDatepickerToggle], button[matDatepickerToggle]',\n  template: '',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'type': 'button',\n    'class': 'mat-datepicker-toggle',\n    '[attr.aria-label]': '_intl.openCalendarLabel',\n    '(click)': '_open($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDatepickerIntl, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'datepicker': [{ type: Input, args: ['mdDatepickerToggle', ] },],\n'_datepicker': [{ type: Input, args: ['matDatepickerToggle', ] },],\n};\n}\n\nfunction MdDatepickerToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerToggle.ctorParameters;\n/** @type {?} */\nMdDatepickerToggle.propDecorators;\n/**\n * Datepicker instance that the button will toggle.\n * @type {?}\n */\nMdDatepickerToggle.prototype.datepicker;\n/** @type {?} */\nMdDatepickerToggle.prototype._intl;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Renderer2\n} from '@angular/core';\nimport {MdDatepicker} from './datepicker';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdInputContainer} from '../input/input-container';\nimport {DOWN_ARROW} from '../core/keyboard/keycodes';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n/**\n * Directive used to connect an input to a MdDatepicker.\n */\nexport class MdDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n/**\n * The datepicker that this input is associated with.\n * @param {?} value\n * @return {?}\n */\nset mdDatepicker(value: MdDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n  _datepicker: MdDatepicker<D>;\n/**\n * @param {?} value\n * @return {?}\n */\nset matDatepicker(value: MdDatepicker<D>) { this.mdDatepicker = value; }\n/**\n * @param {?} filter\n * @return {?}\n */\nset mdDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n/**\n * @param {?} filter\n * @return {?}\n */\nset matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this.mdDatepickerFilter = filter;\n  }\n/**\n * The value of the input.\n * @return {?}\n */\nget value(): D | null {\n    return this._dateAdapter.parse(this._elementRef.nativeElement.value,\n        this._dateFormats.parse.dateInput);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: D | null) {\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    let /** @type {?} */ oldDate = this.value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value',\n        date ? this._dateAdapter.format(date, this._dateFormats.display.dateInput) : '');\n    if (!this._dateAdapter.sameDate(oldDate, date)) {\n      this._valueChange.emit(date);\n    }\n  }\n/**\n * The minimum valid date.\n * @return {?}\n */\nget min(): D { return this._min; }\n/**\n * @param {?} value\n * @return {?}\n */\nset min(value: D) {\n    this._min = value;\n    this._validatorOnChange();\n  }\nprivate _min: D;\n/**\n * The maximum valid date.\n * @return {?}\n */\nget max(): D { return this._max; }\n/**\n * @param {?} value\n * @return {?}\n */\nset max(value: D) {\n    this._max = value;\n    this._validatorOnChange();\n  }\nprivate _max: D;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n */\n_valueChange = new EventEmitter<D|null>();\n\n  _onTouched = () => {};\nprivate _cvaOnChange: (value: any) => void = () => {};\nprivate _validatorOnChange = () => {};\nprivate _datepickerSubscription: Subscription;\n/**\n * The form control validator for the min date.\n */\nprivate _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return (!this.min || !control.value ||\n        this._dateAdapter.compareDate(this.min, control.value) <= 0) ?\n        null : {'mdDatepickerMin': {'min': this.min, 'actual': control.value}};\n  }\n/**\n * The form control validator for the max date.\n */\nprivate _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return (!this.max || !control.value ||\n        this._dateAdapter.compareDate(this.max, control.value) >= 0) ?\n        null : {'mdDatepickerMax': {'max': this.max, 'actual': control.value}};\n  }\n/**\n * The form control validator for the date filter.\n */\nprivate _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return !this._dateFilter || !control.value || this._dateFilter(control.value) ?\n        null : {'mdDatepickerFilter': true};\n  }\n/**\n * The combined form control validator for this input.\n */\nprivate _validator: ValidatorFn | null =\n      Validators.compose([this._minValidator, this._maxValidator, this._filterValidator]);\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} _mdInputContainer\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\nprivate _mdInputContainer: MdInputContainer) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n          });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._datepickerSubscription) {\n      this._datepickerSubscription.unsubscribe();\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n/**\n * Gets the element that the datepicker popup should be connected to.\n * @return {?} The element to connect the popup to.\n */\ngetPopupConnectionElementRef(): ElementRef {\n    return this._mdInputContainer ? this._mdInputContainer.underlineRef : this._elementRef;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: D): void {\n    this.value = value;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\n_onInput(value: string) {\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdDatepicker], input[matDatepicker]',\n  providers: [MD_DATEPICKER_VALUE_ACCESSOR, MD_DATEPICKER_VALIDATORS],\n  host: {\n    '[attr.aria-expanded]': '_datepicker?.opened || \"false\"',\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '_datepicker?.id',\n    '[attr.min]': 'min ? _dateAdapter.getISODateString(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.getISODateString(max) : null',\n    '(input)': '_onInput($event.target.value)',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: MdInputContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mdDatepicker': [{ type: Input },],\n'matDatepicker': [{ type: Input },],\n'mdDatepickerFilter': [{ type: Input },],\n'matDatepickerFilter': [{ type: Input },],\n'value': [{ type: Input },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n};\n}\n\nfunction MdDatepickerInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerInput.ctorParameters;\n/** @type {?} */\nMdDatepickerInput.propDecorators;\n/** @type {?} */\nMdDatepickerInput.prototype._datepicker;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFilter;\n/** @type {?} */\nMdDatepickerInput.prototype._min;\n/** @type {?} */\nMdDatepickerInput.prototype._max;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n * @type {?}\n */\nMdDatepickerInput.prototype._valueChange;\n/** @type {?} */\nMdDatepickerInput.prototype._onTouched;\n/** @type {?} */\nMdDatepickerInput.prototype._cvaOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._validatorOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._datepickerSubscription;\n/**\n * The form control validator for the min date.\n * @type {?}\n */\nMdDatepickerInput.prototype._minValidator;\n/**\n * The form control validator for the max date.\n * @type {?}\n */\nMdDatepickerInput.prototype._maxValidator;\n/**\n * The form control validator for the date filter.\n * @type {?}\n */\nMdDatepickerInput.prototype._filterValidator;\n/**\n * The combined form control validator for this input.\n * @type {?}\n */\nMdDatepickerInput.prototype._validator;\n/** @type {?} */\nMdDatepickerInput.prototype._elementRef;\n/** @type {?} */\nMdDatepickerInput.prototype._renderer;\n/** @type {?} */\nMdDatepickerInput.prototype._dateAdapter;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFormats;\n/** @type {?} */\nMdDatepickerInput.prototype._mdInputContainer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  NgZone,\n  Inject,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Overlay} from '../core/overlay/overlay';\nimport {OverlayRef} from '../core/overlay/overlay-ref';\nimport {ComponentPortal} from '../core/portal/portal';\nimport {OverlayState} from '../core/overlay/overlay-state';\nimport {Directionality} from '../core/bidi/index';\nimport {MdDialog} from '../dialog/dialog';\nimport {MdDialogRef} from '../dialog/dialog-ref';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {MdDatepickerInput} from './datepicker-input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdDialogConfig} from '../dialog/dialog-config';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {MdCalendar} from './calendar';\nimport {first} from '../core/rxjs/index';\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nlet datepickerUid = 0;\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MdCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n */\nexport class MdDatepickerContent<D> implements AfterContentInit {\n  datepicker: MdDatepicker<D>;\n\n   _calendar: MdCalendar<D>;\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n/**\n * Handles keydown event on datepicker content.\n * @param {?} event The event.\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE) {\n      this.datepicker.close();\n      event.preventDefault();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_calendar': [{ type: ViewChild, args: [MdCalendar, ] },],\n};\n}\n\nfunction MdDatepickerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerContent.ctorParameters;\n/** @type {?} */\nMdDatepickerContent.propDecorators;\n/** @type {?} */\nMdDatepickerContent.prototype.datepicker;\n/** @type {?} */\nMdDatepickerContent.prototype._calendar;\n}\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\nexport class MdDatepicker<D> implements OnDestroy {\n/**\n * The date to open the calendar to initially.\n * @return {?}\n */\nget startAt(): D {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nset startAt(date: D) { this._startAt = date; }\nprivate _startAt: D;\n/**\n * The view that the calendar should start in.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n */\ntouchUi = false;\n/**\n * Emits new selected date when selected date changes.\n */\nselectedChanged = new EventEmitter<D>();\n/**\n * Whether the calendar is open.\n */\nopened = false;\n/**\n * The id for the datepicker calendar.\n */\nid = `md-datepicker-${datepickerUid++}`;\n/**\n * The currently selected date.\n */\n_selected: D | null = null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget _minDate(): D {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget _maxDate(): D {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n/**\n * @return {?}\n */\nget _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n */\nprivate _popupRef: OverlayRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n */\nprivate _dialogRef: MdDialogRef<any> | null;\n/**\n * A portal containing the calendar for this datepicker.\n */\nprivate _calendarPortal: ComponentPortal<MdDatepickerContent<D>>;\n/**\n * The input element this datepicker is associated with.\n */\nprivate _datepickerInput: MdDatepickerInput<D>;\n/**\n * The element that was focused before the datepicker was opened.\n */\nprivate _focusedElementBeforeOpen: HTMLElement | null = null;\nprivate _inputSubscription: Subscription;\n/**\n * @param {?} _dialog\n * @param {?} _overlay\n * @param {?} _ngZone\n * @param {?} _viewContainerRef\n * @param {?} _dateAdapter\n * @param {?} _dir\n * @param {?} _document\n */\nconstructor(private _dialog: MdDialog,\nprivate _overlay: Overlay,\nprivate _ngZone: NgZone,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dir: Directionality,\nprivate _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.close();\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n    if (this._inputSubscription) {\n      this._inputSubscription.unsubscribe();\n    }\n  }\n/**\n * Selects the given date and closes the currently open popup or dialog.\n * @param {?} date\n * @return {?}\n */\n_selectAndClose(date: D): void {\n    let /** @type {?} */ oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n    this.close();\n  }\n/**\n * Register an input with this datepicker.\n * @param {?} input The datepicker input to register with this datepicker.\n * @return {?}\n */\n_registerInput(input: MdDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('An MdDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D) => this._selected = value);\n  }\n/**\n * Open the calendar.\n * @return {?}\n */\nopen(): void {\n    if (this.opened) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MdDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this.opened = true;\n  }\n/**\n * Close the calendar.\n * @return {?}\n */\nclose(): void {\n    if (!this.opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n    if (this._focusedElementBeforeOpen && 'focus' in this._focusedElementBeforeOpen) {\n      this._focusedElementBeforeOpen.focus();\n      this._focusedElementBeforeOpen = null;\n    }\n\n    this.opened = false;\n  }\n/**\n * Open the calendar as a dialog.\n * @return {?}\n */\nprivate _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MdDatepickerContent, {\n      viewContainerRef: this._viewContainerRef,\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n/**\n * Open the calendar as a popup.\n * @return {?}\n */\nprivate _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MdDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let /** @type {?} */ componentRef: ComponentRef<MdDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      first.call(this._ngZone.onStable).subscribe(() => this._popupRef.updatePosition());\n    }\n\n    this._popupRef.backdropClick().subscribe(() => this.close());\n  }\n/**\n * Create the popup.\n * @return {?}\n */\nprivate _createPopup(): void {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._createPopupPositionStrategy();\n    overlayState.hasBackdrop = true;\n    overlayState.backdropClass = 'md-overlay-transparent-backdrop';\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n\n    this._popupRef = this._overlay.create(overlayState);\n  }\n/**\n * Create the popup PositionStrategy.\n * @return {?}\n */\nprivate _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'start', originY: 'top' },\n        { overlayX: 'start', overlayY: 'bottom' }\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'end', originY: 'top' },\n        { overlayX: 'end', overlayY: 'bottom' }\n      );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker, mat-datepicker',\n  template: '',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n{type: Overlay, },\n{type: NgZone, },\n{type: ViewContainerRef, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'touchUi': [{ type: Input },],\n'selectedChanged': [{ type: Output },],\n};\n}\n\nfunction MdDatepicker_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepicker.ctorParameters;\n/** @type {?} */\nMdDatepicker.propDecorators;\n/** @type {?} */\nMdDatepicker.prototype._startAt;\n/**\n * The view that the calendar should start in.\n * @type {?}\n */\nMdDatepicker.prototype.startView;\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n * @type {?}\n */\nMdDatepicker.prototype.touchUi;\n/**\n * Emits new selected date when selected date changes.\n * @type {?}\n */\nMdDatepicker.prototype.selectedChanged;\n/**\n * Whether the calendar is open.\n * @type {?}\n */\nMdDatepicker.prototype.opened;\n/**\n * The id for the datepicker calendar.\n * @type {?}\n */\nMdDatepicker.prototype.id;\n/**\n * The currently selected date.\n * @type {?}\n */\nMdDatepicker.prototype._selected;\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n * @type {?}\n */\nMdDatepicker.prototype._popupRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n * @type {?}\n */\nMdDatepicker.prototype._dialogRef;\n/**\n * A portal containing the calendar for this datepicker.\n * @type {?}\n */\nMdDatepicker.prototype._calendarPortal;\n/**\n * The input element this datepicker is associated with.\n * @type {?}\n */\nMdDatepicker.prototype._datepickerInput;\n/**\n * The element that was focused before the datepicker was opened.\n * @type {?}\n */\nMdDatepicker.prototype._focusedElementBeforeOpen;\n/** @type {?} */\nMdDatepicker.prototype._inputSubscription;\n/** @type {?} */\nMdDatepicker.prototype._dialog;\n/** @type {?} */\nMdDatepicker.prototype._overlay;\n/** @type {?} */\nMdDatepicker.prototype._ngZone;\n/** @type {?} */\nMdDatepicker.prototype._viewContainerRef;\n/** @type {?} */\nMdDatepicker.prototype._dateAdapter;\n/** @type {?} */\nMdDatepicker.prototype._dir;\n/** @type {?} */\nMdDatepicker.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {DateAdapter} from '../core/datetime/index';\nimport {MdDatepickerIntl} from './datepicker-intl';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../core';\nimport {first} from '../core/rxjs/index';\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n */\nexport class MdCalendar<D> implements AfterContentInit {\n/**\n * A date representing the period (month or year) to start the calendar in.\n */\nstartAt: D;\n/**\n * Whether the calendar should be started in month or year view.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * The currently selected date.\n */\nselected: D;\n/**\n * The minimum selectable date.\n */\nminDate: D;\n/**\n * The maximum selectable date.\n */\nmaxDate: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when the currently selected date changes.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Date filter for the month and year views.\n */\n_dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n/**\n * The current active date. This determines which time period is shown and which date is\n * highlighted when using keyboard navigation.\n * @return {?}\n */\nget _activeDate(): D { return this._clampedActiveDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\nprivate _clampedActiveDate: D;\n/**\n * Whether the calendar is in month view.\n */\n_monthView: boolean;\n/**\n * The label for the current calendar view.\n * @return {?}\n */\nget _periodButtonText(): string {\n    return this._monthView ?\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n            .toLocaleUpperCase() :\n        this._dateAdapter.getYearName(this._activeDate);\n  }\n/**\n * @return {?}\n */\nget _periodButtonLabel(): string {\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n/**\n * The label for the the previous button.\n * @return {?}\n */\nget _prevButtonLabel(): string {\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n  }\n/**\n * The label for the the next button.\n * @return {?}\n */\nget _nextButtonLabel(): string {\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _intl\n * @param {?} _ngZone\n * @param {?} _isCompatibilityMode\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(private _elementRef: ElementRef,\nprivate _intl: MdDatepickerIntl,\nprivate _ngZone: NgZone,\npublic _isCompatibilityMode: boolean,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._monthView = this.startView != 'year';\n  }\n/**\n * Handles date selection in the month view.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n/**\n * Handles month selection in the year view.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: D): void {\n    this._activeDate = month;\n    this._monthView = true;\n  }\n/**\n * Handles user clicks on the period label.\n * @return {?}\n */\n_currentPeriodClicked(): void {\n    this._monthView = !this._monthView;\n  }\n/**\n * Handles user clicks on the previous button.\n * @return {?}\n */\n_previousClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n/**\n * Handles user clicks on the next button.\n * @return {?}\n */\n_nextClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n/**\n * Whether the previous period button is enabled.\n * @return {?}\n */\n_previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n/**\n * Whether the next period button is enabled.\n * @return {?}\n */\n_nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n/**\n * Handles keydown events on the calendar body.\n * @param {?} event\n * @return {?}\n */\n_handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._monthView) {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else {\n      this._handleCalendarBodyKeydownInYearView(event);\n    }\n  }\n/**\n * Focuses the active cell after the microtask queue is empty.\n * @return {?}\n */\n_focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => first.call(this._ngZone.onStable).subscribe(() => {\n      this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n    }));\n  }\n/**\n * Whether the two dates represent the same view in the current view mode (month or year).\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nprivate _isSameView(date1: D, date2: D): boolean {\n    return this._monthView ?\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in month view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in year view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Determine the date for the month that comes before the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _prevMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? -5 :\n        (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\n/**\n * Determine the date for the month that comes after the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _nextMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? 7 :\n        (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MdDatepickerIntl, },\n{type: NgZone, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'selected': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendar.ctorParameters;\n/** @type {?} */\nMdCalendar.propDecorators;\n/**\n * A date representing the period (month or year) to start the calendar in.\n * @type {?}\n */\nMdCalendar.prototype.startAt;\n/**\n * Whether the calendar should be started in month or year view.\n * @type {?}\n */\nMdCalendar.prototype.startView;\n/**\n * The currently selected date.\n * @type {?}\n */\nMdCalendar.prototype.selected;\n/**\n * The minimum selectable date.\n * @type {?}\n */\nMdCalendar.prototype.minDate;\n/**\n * The maximum selectable date.\n * @type {?}\n */\nMdCalendar.prototype.maxDate;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdCalendar.prototype.dateFilter;\n/**\n * Emits when the currently selected date changes.\n * @type {?}\n */\nMdCalendar.prototype.selectedChange;\n/**\n * Date filter for the month and year views.\n * @type {?}\n */\nMdCalendar.prototype._dateFilterForViews;\n/** @type {?} */\nMdCalendar.prototype._clampedActiveDate;\n/**\n * Whether the calendar is in month view.\n * @type {?}\n */\nMdCalendar.prototype._monthView;\n/** @type {?} */\nMdCalendar.prototype._elementRef;\n/** @type {?} */\nMdCalendar.prototype._intl;\n/** @type {?} */\nMdCalendar.prototype._ngZone;\n/** @type {?} */\nMdCalendar.prototype._isCompatibilityMode;\n/** @type {?} */\nMdCalendar.prototype._dateAdapter;\n/** @type {?} */\nMdCalendar.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n/**\n * Datepicker data that requires internationalization.\n */\nexport class MdDatepickerIntl {\n/**\n * A label for the calendar popup (used by screen readers).\n */\ncalendarLabel = 'Calendar';\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n */\nopenCalendarLabel = 'Open calendar';\n/**\n * A label for the previous month button (used by screen readers).\n */\nprevMonthLabel = 'Previous month';\n/**\n * A label for the next month button (used by screen readers).\n */\nnextMonthLabel = 'Next month';\n/**\n * A label for the previous year button (used by screen readers).\n */\nprevYearLabel = 'Previous year';\n/**\n * A label for the next year button (used by screen readers).\n */\nnextYearLabel = 'Next year';\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n */\nswitchToMonthViewLabel = 'Change to month view';\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n */\nswitchToYearViewLabel = 'Change to year view';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerIntl.ctorParameters;\n/**\n * A label for the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.calendarLabel;\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.openCalendarLabel;\n/**\n * A label for the previous month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevMonthLabel;\n/**\n * A label for the next month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextMonthLabel;\n/**\n * A label for the previous year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevYearLabel;\n/**\n * A label for the next year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextYearLabel;\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToMonthViewLabel;\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToYearViewLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n */\nexport class MdYearView<D> implements AfterContentInit {\n/**\n * The date to display in this year view (everything other than the year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new month is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Grid of calendar cells representing the months of the year.\n */\n_months: MdCalendarCell[][];\n/**\n * The label for this year (e.g. \"2017\").\n */\n_yearLabel: string;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n */\n_todayMonth: number | null;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n */\n_selectedMonth: number | null;\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._init();\n  }\n/**\n * Handles when a new month is selected.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: number) {\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        this._dateAdapter.getDate(this.activeDate)));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n  }\n/**\n * Gets the month in this year that the given Date falls on.\n * Returns null if the given Date is in another year.\n * @param {?} date\n * @return {?}\n */\nprivate _getMonthInCurrentYear(date: D) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n/**\n * Creates an MdCalendarCell for the given month.\n * @param {?} month\n * @param {?} monthName\n * @return {?}\n */\nprivate _createCellForMonth(month: number, monthName: string) {\n    let /** @type {?} */ ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MdCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n/**\n * Whether the given month is enabled.\n * @param {?} month\n * @return {?}\n */\nprivate _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-year-view',\n  templateUrl: 'year-view.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdYearView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdYearView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdYearView.ctorParameters;\n/** @type {?} */\nMdYearView.propDecorators;\n/** @type {?} */\nMdYearView.prototype._activeDate;\n/** @type {?} */\nMdYearView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdYearView.prototype.dateFilter;\n/**\n * Emits when a new month is selected.\n * @type {?}\n */\nMdYearView.prototype.selectedChange;\n/**\n * Grid of calendar cells representing the months of the year.\n * @type {?}\n */\nMdYearView.prototype._months;\n/**\n * The label for this year (e.g. \"2017\").\n * @type {?}\n */\nMdYearView.prototype._yearLabel;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n * @type {?}\n */\nMdYearView.prototype._todayMonth;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n * @type {?}\n */\nMdYearView.prototype._selectedMonth;\n/** @type {?} */\nMdYearView.prototype._dateAdapter;\n/** @type {?} */\nMdYearView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n\n\nconst /** @type {?} */ DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n */\nexport class MdMonthView<D> implements AfterContentInit {\n/**\n * The date to display in this month view (everything other than the month and year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new date is selected.\n */\nselectedChange = new EventEmitter<D | null>();\n/**\n * The label for this month (e.g. \"January 2017\").\n */\n_monthLabel: string;\n/**\n * Grid of calendar cells representing the dates of the month.\n */\n_weeks: MdCalendarCell[][];\n/**\n * The number of blank cells in the first row before the 1st of the month.\n */\n_firstWeekOffset: number;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n */\n_selectedDate: number | null;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n */\n_todayDate: number | null;\n/**\n * The names of the weekdays.\n */\n_weekdays: {long: string, narrow: string}[];\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._init();\n  }\n/**\n * Handles when a new date is selected.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: number) {\n    if (this._selectedDate == date) {\n      return;\n    }\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate),\n        date));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n  }\n/**\n * Creates MdCalendarCells for the dates in this month.\n * @return {?}\n */\nprivate _createWeekCells() {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let /** @type {?} */ date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let /** @type {?} */ enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n/**\n * Gets the date in this month that the given Date falls on.\n * Returns null if the given Date is in another month.\n * @param {?} date\n * @return {?}\n */\nprivate _getDateInCurrentMonth(date: D): number | null {\n    return this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n/**\n * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n * @param {?} d1\n * @param {?} d2\n * @return {?}\n */\nprivate _hasSameMonthAndYear(d1: D, d2: D): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-month-view',\n  templateUrl: 'month-view.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdMonthView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMonthView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMonthView.ctorParameters;\n/** @type {?} */\nMdMonthView.propDecorators;\n/** @type {?} */\nMdMonthView.prototype._activeDate;\n/** @type {?} */\nMdMonthView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdMonthView.prototype.dateFilter;\n/**\n * Emits when a new date is selected.\n * @type {?}\n */\nMdMonthView.prototype.selectedChange;\n/**\n * The label for this month (e.g. \"January 2017\").\n * @type {?}\n */\nMdMonthView.prototype._monthLabel;\n/**\n * Grid of calendar cells representing the dates of the month.\n * @type {?}\n */\nMdMonthView.prototype._weeks;\n/**\n * The number of blank cells in the first row before the 1st of the month.\n * @type {?}\n */\nMdMonthView.prototype._firstWeekOffset;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n * @type {?}\n */\nMdMonthView.prototype._selectedDate;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n * @type {?}\n */\nMdMonthView.prototype._todayDate;\n/**\n * The names of the weekdays.\n * @type {?}\n */\nMdMonthView.prototype._weekdays;\n/** @type {?} */\nMdMonthView.prototype._dateAdapter;\n/** @type {?} */\nMdMonthView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MdDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MdNativeDateModule, or provide a custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nexport class MdCalendarCell {\n/**\n * @param {?} value\n * @param {?} displayValue\n * @param {?} ariaLabel\n * @param {?} enabled\n */\nconstructor(public value: number,\npublic displayValue: string,\npublic ariaLabel: string,\npublic enabled: boolean) {}\n}\n\nfunction MdCalendarCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarCell.prototype.value;\n/** @type {?} */\nMdCalendarCell.prototype.displayValue;\n/** @type {?} */\nMdCalendarCell.prototype.ariaLabel;\n/** @type {?} */\nMdCalendarCell.prototype.enabled;\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nexport class MdCalendarBody {\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n */\nlabel: string;\n/**\n * The cells to display in the table.\n */\nrows: MdCalendarCell[][];\n/**\n * The value in the table that corresponds to today.\n */\ntodayValue: number;\n/**\n * The value in the table that is currently selected.\n */\nselectedValue: number;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n */\nlabelMinRequiredCells: number;\n/**\n * The number of columns in the table.\n */\nnumCols = 7;\n/**\n * Whether to allow selection of disabled cells.\n */\nallowDisabledSelection = false;\n/**\n * The cell number of the active cell in the table.\n */\nactiveCell = 0;\n/**\n * Emits when a new value is selected.\n */\nselectedValueChange = new EventEmitter<number>();\n/**\n * @param {?} cell\n * @return {?}\n */\n_cellClicked(cell: MdCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n/**\n * The number of blank cells to put at the beginning for the first row.\n * @return {?}\n */\nget _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n/**\n * @param {?} rowIndex\n * @param {?} colIndex\n * @return {?}\n */\n_isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'rows': [{ type: Input },],\n'todayValue': [{ type: Input },],\n'selectedValue': [{ type: Input },],\n'labelMinRequiredCells': [{ type: Input },],\n'numCols': [{ type: Input },],\n'allowDisabledSelection': [{ type: Input },],\n'activeCell': [{ type: Input },],\n'selectedValueChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendarBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendarBody.ctorParameters;\n/** @type {?} */\nMdCalendarBody.propDecorators;\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n * @type {?}\n */\nMdCalendarBody.prototype.label;\n/**\n * The cells to display in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.rows;\n/**\n * The value in the table that corresponds to today.\n * @type {?}\n */\nMdCalendarBody.prototype.todayValue;\n/**\n * The value in the table that is currently selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValue;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n * @type {?}\n */\nMdCalendarBody.prototype.labelMinRequiredCells;\n/**\n * The number of columns in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.numCols;\n/**\n * Whether to allow selection of disabled cells.\n * @type {?}\n */\nMdCalendarBody.prototype.allowDisabledSelection;\n/**\n * The cell number of the active cell in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.activeCell;\n/**\n * Emits when a new value is selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValueChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdOptionModule, OverlayModule, MdCommonModule} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdAutocomplete} from './autocomplete';\nimport {MdAutocompleteTrigger} from './autocomplete-trigger';\nexport class MdAutocompleteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdOptionModule, OverlayModule, MdCommonModule, CommonModule],\n  exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, MdCommonModule],\n  declarations: [MdAutocomplete, MdAutocompleteTrigger],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteModule.ctorParameters;\n}\n\n\n\nexport {AutocompletePositionY,MdAutocomplete} from './autocomplete';\nexport {AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger} from './autocomplete-trigger';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Input,\n  NgZone,\n  Optional,\n  OnDestroy,\n  ViewContainerRef,\n  Inject,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Overlay, OverlayRef, OverlayState, TemplatePortal} from '../core';\nimport {MdAutocomplete} from './autocomplete';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {ConnectedPositionStrategy} from '../core/overlay/position/connected-position-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {MdOptionSelectionChange, MdOption} from '../core/option/option';\nimport {ENTER, UP_ARROW, DOWN_ARROW, ESCAPE} from '../core/keyboard/keycodes';\nimport {Directionality} from '../core/bidi/index';\nimport {MdInputContainer} from '../input/input-container';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {RxChain, switchMap, first, filter} from '../core/rxjs/index';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @return {?}\n */\nexport function getMdAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `md-autocomplete`. ' +\n               'Make sure that the id passed to the `mdAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef | null;\nprivate _portal: TemplatePortal;\nprivate _panelOpen: boolean = false;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n */\nprivate _panelPositionSubscription: Subscription;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * The subscription for closing actions (some are bound to document).\n */\nprivate _closingActionsSubscription: Subscription;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _zone\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n * @param {?} _inputContainer\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _zone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality,\nprivate _inputContainer: MdInputContainer,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._panelPositionSubscription) {\n      this._panelPositionSubscription.unsubscribe();\n    }\n\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    if (!this.autocomplete) {\n      throw getMdAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n      this._overlayRef.updateSize();\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._floatPlaceholder();\n    this._panelOpen = true;\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    this._panelOpen = false;\n    this._resetPlaceholder();\n\n    // We need to trigger change detection manually, because\n    // `fromEvent` doesn't seem to do it at the proper time.\n    // This ensures that the placeholder is reset when the\n    // user clicks outside.\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut,\n      this._outsideClickStream\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return /** @type {?} */(( this.autocomplete._keyManager.activeItem as MdOption));\n    }\n\n    return null;\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return RxChain.from(merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )).call(filter, (event: MouseEvent | TouchEvent) => {\n      const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n      const /** @type {?} */ inputContainer = this._inputContainer ?\n          this._inputContainer._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n             clickTarget !== this._element.nativeElement &&\n             (!inputContainer || !inputContainer.contains(clickTarget)) &&\n             (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }).result();\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && this.panelOpen) {\n      this.closePanel();\n    } else if (this.activeOption && event.keyCode === ENTER) {\n      this.activeOption._selectViaInteraction();\n      event.preventDefault();\n    } else {\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n\n      this.autocomplete._keyManager.onKeydown(event);\n\n      if (isArrowKey) {\n        this.openPanel();\n      }\n\n      Promise.resolve().then(() => {\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      });\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @return {?}\n */\nprivate _floatPlaceholder(): void {\n    if (this._inputContainer && this._inputContainer.floatPlaceholder === 'auto') {\n      this._inputContainer.floatPlaceholder = 'always';\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._inputContainer.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n * the panel height + the option height, so the active option will be just visible at the\n * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n * will become the offset. If that offset is visible within the panel already, the scrollTop is\n * not adjusted.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ optionOffset = this.autocomplete._keyManager.activeItemIndex ?\n        this.autocomplete._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT : 0;\n    const /** @type {?} */ panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const /** @type {?} */ newScrollTop =\n          Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n      this.autocomplete._setScrollTop(newScrollTop);\n    }\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): Subscription {\n    // When the zone is stable initially, and when the option list changes...\n    return RxChain.from(merge(first.call(this._zone.onStable), this.autocomplete.options.changes))\n      // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      .call(switchMap, () => {\n        this._resetPanel();\n        return this.panelClosingActions;\n      })\n      // when the first closing event occurs...\n      .call(first)\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    this._element.nativeElement.value = toDisplay != null ? toDisplay : '';\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach((option) => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _createOverlay(): void {\n    this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n    this._overlayRef = this._overlay.create(this._getOverlayConfig());\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getOverlayPosition();\n    overlayState.width = this._getHostWidth();\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n    return overlayState;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._element,\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    this._subscribeToPositionChanges(this._positionStrategy);\n    return this._positionStrategy;\n  }\n/**\n * This method subscribes to position changes in the autocomplete panel, so the panel's\n * y-offset can be adjusted to match the new position.\n * @param {?} strategy\n * @return {?}\n */\nprivate _subscribeToPositionChanges(strategy: ConnectedPositionStrategy) {\n    this._panelPositionSubscription = strategy.onPositionChange.subscribe(change => {\n      this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';\n    });\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._element.nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to -1 so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n/**\n * Resets the active item and re-calculates alignment of the panel in case its size\n * has changed due to fewer or greater number of options.\n * @return {?}\n */\nprivate _resetPanel() {\n    this._resetActiveItem();\n    this._positionStrategy.recalculateLastPosition();\n    this.autocomplete._setVisibility();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdAutocomplete], input[matAutocomplete],' +\n            'textarea[mdAutocomplete], textarea[matAutocomplete]',\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': 'openPanel()',\n    '(input)': '_handleInput($event)',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: MdInputContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._panelPositionSubscription;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * The subscription for closing actions (some are bound to document).\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._closingActionsSubscription;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._inputContainer;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {MdOption} from '../core';\nimport {ActiveDescendantKeyManager} from '../core/a11y/activedescendant-key-manager';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\nexport type AutocompletePositionY = 'above' | 'below';\nexport class MdAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n */\npositionY: AutocompletePositionY = 'below';\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n/**\n * \\@docs-private\n */\ntemplate: TemplateRef<any>;\n/**\n * Element for the panel containing the autocomplete options.\n */\npanel: ElementRef;\n/**\n * \\@docs-private\n */\noptions: QueryList<MdOption>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: ((value: any) => string) | null = null;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display options\n * above or below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Returns the panel's scrollTop.\n * @return {?}\n */\n_getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility() {\n    Promise.resolve().then(() => {\n      this.showPanel = !!this.options.length;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Sets a class on the panel based on its position (used to set y-offset).\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-panel-below': this.positionY === 'below',\n      'mat-autocomplete-panel-above': this.positionY === 'above',\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-autocomplete, mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'mdAutocomplete',\n  host: {\n    'class': 'mat-autocomplete'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, ] },],\n'displayWith': [{ type: Input },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.positionY;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.template;\n/**\n * Element for the panel containing the autocomplete options.\n * @type {?}\n */\nMdAutocomplete.prototype.panel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.options;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n/** @type {?} */\nMdAutocomplete.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends CanDisable {\n  setActiveStyles(): void;\n  setInactiveStyles(): void;\n}\nexport class ActiveDescendantKeyManager extends ListKeyManager<Highlightable> {\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds active styles to the newly active item and removes active\n * styles from the previously active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    Promise.resolve().then(() => {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n      super.setActiveItem(index);\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {\n  OverlayModule,\n  PortalModule,\n  A11yModule,\n  MdCommonModule,\n} from '../core';\nimport {MdDialog} from './dialog';\nimport {MdDialogContainer} from './dialog-container';\nimport {\n  MdDialogClose,\n  MdDialogContent,\n  MdDialogTitle,\n  MdDialogActions\n} from './dialog-content-directives';\nexport class MdDialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MdCommonModule,\n  ],\n  exports: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogContent,\n    MdDialogActions,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogActions,\n    MdDialogContent,\n  ],\n  providers: [\n    MdDialog,\n  ],\n  entryComponents: [MdDialogContainer],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogModule.ctorParameters;\n}\n\n\nexport {MD_DIALOG_DATA,MdDialog} from './dialog';\nexport {throwMdDialogContentAlreadyAttachedError,MdDialogContainer} from './dialog-container';\nexport {MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions} from './dialog-content-directives';\nexport {DialogRole,DialogPosition,MdDialogConfig} from './dialog-config';\nexport {MdDialogRef} from './dialog-ref';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input, Optional, OnInit} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\n/**\n * Dialog close input for compatibility mode.\n * @param {?} value\n * @return {?}\n */\nset _matDialogClose(value: any) { this.dialogResult = value; }\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-dialog-close], button[mat-dialog-close],' +\n            'button[mdDialogClose], button[matDialogClose]',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['md-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['mat-dialog-close', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMdDialogClose.prototype.dialogResult;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle implements OnInit {\n   id = `md-dialog-title-${dialogElementUid++}`;\n/**\n * @param {?} _container\n */\nconstructor(\nprivate _container: MdDialogContainer) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-title], [mat-dialog-title], [mdDialogTitle], [matDialogTitle]',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n/** @type {?} */\nMdDialogTitle.propDecorators;\n/** @type {?} */\nMdDialogTitle.prototype.id;\n/** @type {?} */\nMdDialogTitle.prototype._container;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content,' +\n            '[mdDialogContent], [matDialogContent]',\n  host: {'class': 'mat-dialog-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions,' +\n            '[mdDialogActions], [matDialogActions]',\n  host: {'class': 'mat-dialog-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Injector,\n  InjectionToken,\n  ComponentRef,\n  Injectable,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  Overlay,\n  OverlayRef,\n  ComponentType,\n  OverlayState,\n  ComponentPortal,\n} from '../core';\nimport {extendObject} from '../core/util/object-extend';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {DialogInjector} from './dialog-injector';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\nimport {TemplatePortal} from '../core/portal/portal';\n\nexport const /** @type {?} */ MD_DIALOG_DATA = new InjectionToken<any>('MdDialogData');\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget _openDialogs(): MdDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog._openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Subject for notifying the user that a dialog has opened.\n * @return {?}\n */\nget _afterOpen(): Subject<MdDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog._afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * Subject for notifying the user that all open dialogs have finished closing.\n * @return {?}\n */\nget _afterAllClosed(): Subject<void> {\n    return this._parentDialog ?\n      this._parentDialog._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n/**\n * Gets an observable that is notified when a dialog has been opened.\n */\nafterOpen: Observable<MdDialogRef<any>> = this._afterOpen.asObservable();\n/**\n * Gets an observable that is notified when all open dialog have finished closing.\n */\nafterAllClosed: Observable<void> = this._afterAllClosed.asObservable();\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} _location\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\nprivate _location: Location,\nprivate _parentDialog: MdDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && _location) {\n      _location.subscribe(() => this.closeAll());\n    }\n  }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MdDialogConfig): MdDialogRef<T> {\n    config = _applyConfigDefaults(config);\n\n    let /** @type {?} */ overlayRef = this._createOverlay(config);\n    let /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    let /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this._openDialogs.length) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this._openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this._afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this._openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this._openDialogs[i].close();\n    }\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(config: MdDialogConfig): OverlayRef {\n    let /** @type {?} */ overlayState = this._getOverlayState(config);\n    return this._overlay.create(overlayState);\n  }\n/**\n * Creates an overlay state from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayState {\n    let /** @type {?} */ overlayState = new OverlayState();\n    overlayState.panelClass = dialogConfig.panelClass;\n    overlayState.hasBackdrop = dialogConfig.hasBackdrop;\n    overlayState.scrollStrategy = this._overlay.scrollStrategies.block();\n    overlayState.direction = dialogConfig.direction;\n    if (dialogConfig.backdropClass) {\n      overlayState.backdropClass = dialogConfig.backdropClass;\n    }\n    overlayState.positionStrategy = this._overlay.position().global();\n\n    return overlayState;\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MdDialogContainer,\n      overlayRef: OverlayRef,\n      config: MdDialogConfig): MdDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    let /** @type {?} */ dialogRef = new MdDialogRef<T>(overlayRef, dialogContainer);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, /** @type {?} */(( null))));\n    } else {\n      let /** @type {?} */ injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      let /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n/**\n * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n * of a dialog to close itself and, optionally, to return a value.\n * @template T\n * @param {?} config Config object that is used to construct the dialog.\n * @param {?} dialogRef Reference to the dialog.\n * @param {?} dialogContainer\n * @return {?} The custom injector that can be used inside the dialog.\n */\nprivate _createInjector<T>(\n      config: MdDialogConfig,\n      dialogRef: MdDialogRef<T>,\n      dialogContainer: MdDialogContainer): DialogInjector {\n\n    let /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    let /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MdDialogRef, dialogRef);\n    injectionTokens.set(MdDialogContainer, dialogContainer);\n    injectionTokens.set(MD_DIALOG_DATA, config.data);\n\n    return new DialogInjector(userInjector || this._injector, injectionTokens);\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\n    let /** @type {?} */ index = this._openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this._openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this._openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    let /** @type {?} */ topDialog = this._openDialogs[this._openDialogs.length - 1];\n    let /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\n\n    if (event.keyCode === ESCAPE && canClose) {\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Gets an observable that is notified when a dialog has been opened.\n * @type {?}\n */\nMdDialog.prototype.afterOpen;\n/**\n * Gets an observable that is notified when all open dialog have finished closing.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._location;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config?: MdDialogConfig): MdDialogConfig {\n  return extendObject(new MdDialogConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  animate,\n  trigger,\n  state,\n  style,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {BasePortalHost, ComponentPortal, PortalHostDirective, TemplatePortal} from '../core';\nimport {MdDialogConfig} from './dialog-config';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalHost without an origin.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n/**\n * Reference to the global document object.\n */\nprivate _document: Document;\n/**\n * The dialog configuration.\n */\n_config: MdDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits the current animation state whenever it changes.\n */\n_onAnimationStateChange = new EventEmitter<AnimationEvent>();\n/**\n * ID of the element that should be considered as the dialog's label.\n */\n_ariaLabelledBy: string | null = null;\n/**\n * @param {?} _ngZone\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _document\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\n      _document: any) {\n\n    super();\n    this._document = _document;\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n/**\n * Restores focus to the element that was focused before the dialog opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    const /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && 'focus' in toFocus) {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\n    }\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    this._onAnimationStateChange.emit(event);\n\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n      this._onAnimationStateChange.complete();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-dialog-container, mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('slideDialog', [\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n      // solves both issues.\n      state('enter', style({ transform: 'none', opacity: 1 })),\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    'class': 'mat-dialog-container',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_ariaLabelledBy',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * Reference to the global document object.\n * @type {?}\n */\nMdDialogContainer.prototype._document;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype._config;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits the current animation state whenever it changes.\n * @type {?}\n */\nMdDialogContainer.prototype._onAnimationStateChange;\n/**\n * ID of the element that should be considered as the dialog's label.\n * @type {?}\n */\nMdDialogContainer.prototype._ariaLabelledBy;\n/** @type {?} */\nMdDialogContainer.prototype._ngZone;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef, GlobalPositionStrategy} from '../core';\nimport {AnimationEvent} from '@angular/animations';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogContainer} from './dialog-container';\nimport {filter} from '../core/rxjs/index';\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Whether the user is allowed to close the dialog.\n */\ndisableClose = this._containerInstance._config.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n */\nconstructor(private _overlayRef: OverlayRef,\nprivate _containerInstance: MdDialogContainer) {\n    filter.call(_containerInstance._onAnimationStateChange,\n      (event: AnimationEvent) => event.toState === 'exit')\n      .subscribe(() => this._overlayRef.dispose(), undefined, () => {\n        this._afterClosed.next(this._result);\n        this._afterClosed.complete();\n        this.componentInstance = null!;\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n    this._containerInstance._state = 'exit';\n    this._overlayRef.detachBackdrop(); // Transition the backdrop in parallel with the dialog.\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Whether the user is allowed to close the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '../core';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nexport class MdDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Custom class for the overlay pane.\n */\npanelClass?: string = '';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * Layout direction for the dialog's content.\n */\ndirection?: Direction = 'ltr';\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n\nfunction MdDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n * @type {?}\n */\nMdDialogConfig.prototype.viewContainerRef;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMdDialogConfig.prototype.role;\n/**\n * Custom class for the overlay pane.\n * @type {?}\n */\nMdDialogConfig.prototype.panelClass;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMdDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMdDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMdDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMdDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdDialogConfig.prototype.data;\n/**\n * Layout direction for the dialog's content.\n * @type {?}\n */\nMdDialogConfig.prototype.direction;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\n/**\n * Custom injector type specifically for instantiating components with a dialog.\n */\nexport class DialogInjector implements Injector {\n/**\n * @param {?} _parentInjector\n * @param {?} _customTokens\n */\nconstructor(\nprivate _parentInjector: Injector,\nprivate _customTokens: WeakMap<any, any>) { }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    const /** @type {?} */ value = this._customTokens.get(token);\n\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n\nfunction DialogInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogInjector.prototype._parentInjector;\n/** @type {?} */\nDialogInjector.prototype._customTokens;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule, MdCommonModule} from '../core';\nimport {MdMenu} from './menu-directive';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuTrigger} from './menu-trigger';\nimport {MdRippleModule} from '../core/ripple/index';\nexport class MdMenuModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n  ],\n  exports: [MdMenu, MdMenuItem, MdMenuTrigger, MdCommonModule],\n  declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuModule.ctorParameters;\n}\n\n\n\nexport {MdMenu,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY} from './menu';\nexport {fadeInItems, transformMenu} from './menu-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewContainerRef,\n} from '@angular/core';\nimport {MdMenuPanel} from './menu-panel';\nimport {throwMdMenuMissingError} from './menu-errors';\nimport {\n    isFakeMousedownFromScreenReader,\n    Directionality,\n    Direction,\n    Overlay,\n    OverlayState,\n    OverlayRef,\n    TemplatePortal,\n    ConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    VerticalConnectionPos,\n} from '../core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nexport class MdMenuTrigger implements AfterViewInit, OnDestroy {\nprivate _portal: TemplatePortal;\nprivate _overlayRef: OverlayRef | null = null;\nprivate _menuOpen: boolean = false;\nprivate _backdropSubscription: Subscription;\nprivate _positionSubscription: Subscription;\nprivate _openedByMouse: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMdMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMdMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMatMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMatMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * @return {?}\n */\nget _matMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * References the menu instance that the trigger is associated with.\n */\nmenu: MdMenuPanel;\n/**\n * Event emitted when the associated menu is opened.\n */\nonMenuOpen = new EventEmitter<void>();\n/**\n * Event emitted when the associated menu is closed.\n */\nonMenuClose = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _element\n * @param {?} _viewContainerRef\n * @param {?} _dir\n */\nconstructor(private _overlay: Overlay,\nprivate _element: ElementRef,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _dir: Directionality) { }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._checkMenu();\n    this.menu.close.subscribe(() => this.closeMenu());\n  }\n/**\n * @return {?}\n */\nngOnDestroy() { this.destroyMenu(); }\n/**\n * Whether the menu is open.\n * @return {?}\n */\nget menuOpen(): boolean { return this._menuOpen; }\n/**\n * Toggles the menu between the open and closed states.\n * @return {?}\n */\ntoggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n/**\n * Opens the menu.\n * @return {?}\n */\nopenMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._subscribeToBackdrop();\n      this._initMenu();\n    }\n  }\n/**\n * Closes the menu.\n * @return {?}\n */\ncloseMenu(): void {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this._backdropSubscription.unsubscribe();\n      this._resetMenu();\n    }\n  }\n/**\n * Removes the menu from the DOM.\n * @return {?}\n */\ndestroyMenu(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n\n      this._cleanUpSubscriptions();\n    }\n  }\n/**\n * Focuses the menu trigger.\n * @return {?}\n */\nfocus() {\n    this._element.nativeElement.focus();\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\nget dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * This method ensures that the menu closes when the overlay backdrop is clicked.\n * We do not use first() here because doing so would not catch clicks from within\n * the menu, and it would fail to unsubscribe properly. Instead, we unsubscribe\n * explicitly when the menu is closed or destroyed.\n * @return {?}\n */\nprivate _subscribeToBackdrop(): void {\n    if (this._overlayRef) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n        this.menu._emitCloseEvent();\n      });\n    }\n  }\n/**\n * This method sets the menu state to open and focuses the first item if\n * the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _initMenu(): void {\n    this._setIsMenuOpen(true);\n\n    // Should only set focus if opened via the keyboard, so keyboard users can\n    // can easily navigate menu items. According to spec, mouse users should not\n    // see the focus style.\n    if (!this._openedByMouse) {\n      this.menu.focusFirstItem();\n    }\n  }\n/**\n * This method resets the menu when it's closed, most importantly restoring\n * focus to the menu trigger if the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // Focus only needs to be reset to the host element if the menu was opened\n    // by the keyboard and manually shifted to the first menu item.\n    if (!this._openedByMouse) {\n      this.focus();\n    }\n    this._openedByMouse = false;\n  }\n/**\n * @param {?} isOpen\n * @return {?}\n */\nprivate _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\n  }\n/**\n *  This method checks that a valid instance of MdMenu has been passed into\n *  mdMenuTriggerFor. If not, an exception is thrown.\n * @return {?}\n */\nprivate _checkMenu() {\n    if (!this.menu) {\n      throwMdMenuMissingError();\n    }\n  }\n/**\n *  This method creates the overlay from the provided menu's template and saves its\n *  OverlayRef so that it can be attached to the DOM when openMenu is called.\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const /** @type {?} */ config = this._getOverlayConfig();\n      this._subscribeToPositions( /** @type {?} */((config.positionStrategy as ConnectedPositionStrategy)));\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n/**\n * This method builds the configuration object needed to create the overlay, the OverlayState.\n * @return {?} OverlayState\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getPosition()\n                                        .withDirection(this.dir);\n    overlayState.hasBackdrop = true;\n    overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';\n    overlayState.direction = this.dir;\n    overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n    return overlayState;\n  }\n/**\n * Listens to changes in the position of the overlay and sets the correct classes\n * on the menu based on the new position. This ensures the animation origin is always\n * correct, even if a fallback position is used for the overlay.\n * @param {?} position\n * @return {?}\n */\nprivate _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe((change) => {\n      const /** @type {?} */ posX: MenuPositionX = change.connectionPair.originX === 'start' ? 'after' : 'before';\n      let /** @type {?} */ posY: MenuPositionY = change.connectionPair.originY === 'top' ? 'below' : 'above';\n\n      if (!this.menu.overlapTrigger) {\n        posY = posY === 'below' ? 'above' : 'below';\n      }\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n/**\n * This method builds the position strategy for the overlay, so the menu is properly connected\n * to the trigger.\n * @return {?} ConnectedPositionStrategy\n */\nprivate _getPosition(): ConnectedPositionStrategy  {\n    const [posX, fallbackX]: HorizontalConnectionPos[] =\n      this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    const [overlayY, fallbackOverlayY]: VerticalConnectionPos[] =\n      this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let /** @type {?} */ originY = overlayY;\n    let /** @type {?} */ fallbackOriginY = fallbackOverlayY;\n\n    if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      fallbackOriginY = fallbackOverlayY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n      .connectedTo(this._element,\n          {originX: posX, originY: originY}, {overlayX: posX, overlayY: overlayY})\n      .withFallbackPosition(\n          {originX: fallbackX, originY: originY},\n          {overlayX: fallbackX, overlayY: overlayY})\n      .withFallbackPosition(\n          {originX: posX, originY: fallbackOriginY},\n          {overlayX: posX, overlayY: fallbackOverlayY})\n      .withFallbackPosition(\n          {originX: fallbackX, originY: fallbackOriginY},\n          {overlayX: fallbackX, overlayY: fallbackOverlayY});\n  }\n/**\n * @return {?}\n */\nprivate _cleanUpSubscriptions(): void {\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-menu-trigger-for], [mat-menu-trigger-for],\n             [mdMenuTriggerFor], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(click)': 'toggleMenu()',\n  },\n  exportAs: 'mdMenuTrigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedMdMenuTriggerFor': [{ type: Input, args: ['md-menu-trigger-for', ] },],\n'_deprecatedMatMenuTriggerFor': [{ type: Input, args: ['mat-menu-trigger-for', ] },],\n'_matMenuTriggerFor': [{ type: Input, args: ['matMenuTriggerFor', ] },],\n'menu': [{ type: Input, args: ['mdMenuTriggerFor', ] },],\n'onMenuOpen': [{ type: Output },],\n'onMenuClose': [{ type: Output },],\n};\n}\n\nfunction MdMenuTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuTrigger.ctorParameters;\n/** @type {?} */\nMdMenuTrigger.propDecorators;\n/** @type {?} */\nMdMenuTrigger.prototype._portal;\n/** @type {?} */\nMdMenuTrigger.prototype._overlayRef;\n/** @type {?} */\nMdMenuTrigger.prototype._menuOpen;\n/** @type {?} */\nMdMenuTrigger.prototype._backdropSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._positionSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._openedByMouse;\n/**\n * References the menu instance that the trigger is associated with.\n * @type {?}\n */\nMdMenuTrigger.prototype.menu;\n/**\n * Event emitted when the associated menu is opened.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuOpen;\n/**\n * Event emitted when the associated menu is closed.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuClose;\n/** @type {?} */\nMdMenuTrigger.prototype._overlay;\n/** @type {?} */\nMdMenuTrigger.prototype._element;\n/** @type {?} */\nMdMenuTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdMenuTrigger.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ElementRef,\n} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMdMenuInvalidPositionX, throwMdMenuInvalidPositionY} from './menu-errors';\nimport {MdMenuItem} from './menu-item';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {MdMenuPanel} from './menu-panel';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformMenu, fadeInItems} from './menu-animations';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nexport class MdMenu implements AfterContentInit, MdMenuPanel, OnDestroy {\nprivate _keyManager: FocusKeyManager;\nprivate _xPosition: MenuPositionX = 'after';\nprivate _yPosition: MenuPositionY = 'below';\n/**\n * Subscription to tab events on the menu panel\n */\nprivate _tabSubscription: Subscription;\n/**\n * Config object to be passed into the menu's ngClass\n */\n_classList: any = {};\n/**\n * Position of the menu in the X axis.\n * @return {?}\n */\nget xPosition() { return this._xPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMdMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n/**\n * Position of the menu in the Y axis.\n * @return {?}\n */\nget yPosition() { return this._yPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMdMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n   templateRef: TemplateRef<any>;\n/**\n * List of the items inside of a menu.\n */\nitems: QueryList<MdMenuItem>;\n/**\n * Whether the menu should overlap its trigger.\n */\noverlapTrigger = true;\n/**\n * This method takes classes set on the host md-menu element and applies them on the\n * menu template that displays in the overlay container.  Otherwise, it's difficult\n * to style the containing menu from outside the component.\n * @param {?} classes list of class names\n * @return {?}\n */\nset classList(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n/**\n * Event emitted when the menu is closed.\n */\nclose = new EventEmitter<void>();\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.items).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this._emitCloseEvent());\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Handle a keyboard event from the menu, delegating to the appropriate action.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this._emitCloseEvent();\n        return;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Focus the first item in the menu. This method is used by the menu trigger\n * to focus the first item when the menu is opened by the ENTER key.\n * @return {?}\n */\nfocusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * This emits a close event to which the trigger is subscribed. When emitted, the\n * trigger will close the menu.\n * @return {?}\n */\n_emitCloseEvent(): void {\n    this.close.emit();\n  }\n/**\n * It's necessary to set position-based classes to ensure the menu panel animation\n * folds out from the correct direction.\n * @param {?=} posX\n * @param {?=} posY\n * @return {?}\n */\nsetPositionClasses(posX = this.xPosition, posY = this.yPosition): void {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-menu, mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    transformMenu,\n    fadeInItems\n  ],\n  exportAs: 'mdMenu'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'xPosition': [{ type: Input },],\n'yPosition': [{ type: Input },],\n'templateRef': [{ type: ViewChild, args: [TemplateRef, ] },],\n'items': [{ type: ContentChildren, args: [MdMenuItem, ] },],\n'overlapTrigger': [{ type: Input },],\n'classList': [{ type: Input, args: ['class', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction MdMenu_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenu.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenu.ctorParameters;\n/** @type {?} */\nMdMenu.propDecorators;\n/** @type {?} */\nMdMenu.prototype._keyManager;\n/** @type {?} */\nMdMenu.prototype._xPosition;\n/** @type {?} */\nMdMenu.prototype._yPosition;\n/**\n * Subscription to tab events on the menu panel\n * @type {?}\n */\nMdMenu.prototype._tabSubscription;\n/**\n * Config object to be passed into the menu's ngClass\n * @type {?}\n */\nMdMenu.prototype._classList;\n/** @type {?} */\nMdMenu.prototype.templateRef;\n/**\n * List of the items inside of a menu.\n * @type {?}\n */\nMdMenu.prototype.items;\n/**\n * Whether the menu should overlap its trigger.\n * @type {?}\n */\nMdMenu.prototype.overlapTrigger;\n/**\n * Event emitted when the menu is closed.\n * @type {?}\n */\nMdMenu.prototype.close;\n/** @type {?} */\nMdMenu.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Below are all the animations for the md-menu component.\n * Animation duration and timing values are based on AngularJS Material.\n */\n\n\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nexport const /** @type {?} */ transformMenu: AnimationTriggerMetadata = trigger('transformMenu', [\n  state('showing', style({\n    opacity: 1,\n    transform: `scale(1)`\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      transform: `scale(0)`\n    }),\n    animate(`200ms cubic-bezier(0.25, 0.8, 0.25, 1)`)\n  ]),\n  transition('* => void', [\n    animate('50ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nexport const fadeInItems: AnimationTriggerMetadata = trigger('fadeInItems', [\n  state('showing', style({opacity: 1})),\n  transition('void => *', [\n    style({opacity: 0}),\n    animate(`200ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)`)\n  ])\n]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ElementRef} from '@angular/core';\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdMenuItemBase {}\nexport const /** @type {?} */ _MdMenuItemMixinBase = mixinDisabled(MdMenuItemBase);\n/**\n * This directive is intended to be used inside an md-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport class MdMenuItem extends _MdMenuItemMixinBase implements Focusable, CanDisable {\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Focuses the menu item.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * Used to set the `tabindex`.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Returns the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n/**\n * Prevents the default element actions if it is disabled.\n * @param {?} event\n * @return {?}\n */\n_checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-menu-item], [mat-menu-item]',\n  inputs: ['disabled'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n  },\n  templateUrl: 'menu-item.html',\n  exportAs: 'mdMenuItem'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdMenuItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuItem.ctorParameters;\n/** @type {?} */\nMdMenuItem.prototype._elementRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid md-menu instance\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuMissingError() {\n  throw Error(`md-menu-trigger: must pass in an md-menu instance.\n\n    Example:\n      <md-menu #menu=\"mdMenu\"></md-menu>\n      <button [mdMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <md-menu x-position=\"before\" #menu=\"mdMenu\"></md-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <md-menu y-position=\"above\" #menu=\"mdMenu\"></md-menu>`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule, MdCommonModule} from '../core';\nimport {PlatformModule} from '../core/platform/index';\nimport {MdTooltip, TooltipComponent} from './tooltip';\nexport class MdTooltipModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdCommonModule,\n    PlatformModule\n  ],\n  exports: [MdTooltip, TooltipComponent, MdCommonModule],\n  declarations: [MdTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTooltipModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltipModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltipModule.ctorParameters;\n}\n\n\n\nexport {TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,getMdTooltipInvalidPositionError,MdTooltip,TooltipVisibility,TooltipComponent} from './tooltip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Input,\n  ElementRef,\n  ViewContainerRef,\n  NgZone,\n  Optional,\n  OnDestroy,\n  Renderer2,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  style,\n  trigger,\n  state,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  Overlay,\n  OverlayState,\n  OverlayRef,\n  ComponentPortal,\n  OverlayConnectionPosition,\n  OriginConnectionPosition,\n} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Directionality} from '../core/bidi/index';\nimport {Platform} from '../core/platform/index';\nimport {first} from '../core/rxjs/index';\nimport {ScrollDispatcher} from '../core/overlay/scroll/scroll-dispatcher';\nimport {coerceBooleanProperty} from '@angular/cdk';\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/**\n * Time in ms to delay before changing the tooltip visibility to hidden\n */\nexport const TOUCHEND_HIDE_DELAY = 1500;\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\nexport const SCROLL_THROTTLE_MS = 20;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @param {?} position\n * @return {?}\n */\nexport function getMdTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n * \n * https://material.google.com/components/tooltips.html\n */\nexport class MdTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\nprivate _position: TooltipPosition = 'below';\nprivate _disabled: boolean = false;\nprivate _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * Allows the user to define the position of the tooltip relative to the parent element\n * @return {?}\n */\nget position(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n/**\n * Disables the display of the tooltip.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _positionDeprecated(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _positionDeprecated(value: TooltipPosition) { this._position = value; }\n/**\n * The default delay in ms before showing the tooltip after show is called\n */\nshowDelay = 0;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n */\nhideDelay = 0;\nprivate _message: string;\n/**\n * The message to be displayed in the tooltip\n * @return {?}\n */\nget message() { return this._message; }\n/**\n * @param {?} value\n * @return {?}\n */\nset message(value: string) {\n    this._message = value;\n    this._setTooltipMessage(this._message);\n  }\n/**\n * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n * @return {?}\n */\nget tooltipClass() { return this._tooltipClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMessage(): string { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMessage(v: string) { this.message = v; }\n/**\n * @return {?}\n */\nget _matMessage() { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMessage(v) { this.message = v; }\n/**\n * @return {?}\n */\nget _matPosition() { return this.position; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matPosition(v) { this.position = v; }\n/**\n * @return {?}\n */\nget _matDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matHideDelay() { return this.hideDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matHideDelay(v) { this.hideDelay = v; }\n/**\n * @return {?}\n */\nget _matShowDelay() { return this.showDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matShowDelay(v) { this.showDelay = v; }\n/**\n * @return {?}\n */\nget _matClass() { return this.tooltipClass; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matClass(v) { this.tooltipClass = v; }\n/**\n * @param {?} _overlay\n * @param {?} _elementRef\n * @param {?} _scrollDispatcher\n * @param {?} _viewContainerRef\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _elementRef: ElementRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _platform: Platform,\nprivate _dir: Directionality) {\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      _renderer.listen(_elementRef.nativeElement, 'mouseenter', () => this.show());\n      _renderer.listen(_elementRef.nativeElement, 'mouseleave', () => this.hide());\n    }\n  }\n/**\n * Dispose the tooltip when destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n  }\n/**\n * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nshow(delay: number = this.showDelay): void {\n    if (this.disabled || !this._message || !this._message.trim()) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._setTooltipMessage(this._message); /** @type {?} */((\n    this._tooltipInstance)).show(this._position, delay);\n  }\n/**\n * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nhide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n/**\n * Shows/hides the tooltip\n * @return {?}\n */\ntoggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n/**\n * Returns true if the tooltip is currently visible to the user\n * @return {?}\n */\n_isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n/**\n * Create the tooltip to display\n * @return {?}\n */\nprivate _createTooltip(): void {\n    let /** @type {?} */ overlayRef = this._createOverlay();\n    let /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance; /** @type {?} */((\n\n    // Dispose the overlay when finished the shown tooltip.\n    this._tooltipInstance)).afterHidden().subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n/**\n * Create the overlay config and position strategy\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    let /** @type {?} */ origin = this._getOrigin();\n    let /** @type {?} */ position = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    // After position changes occur and the overlay is clipped by a parent scrollable then\n    // close the tooltip.\n    let /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n    strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n    strategy.onPositionChange.subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped &&\n          this._tooltipInstance && this._tooltipInstance.isVisible()) {\n        this.hide(0);\n      }\n    });\n\n    let /** @type {?} */ config = new OverlayState();\n\n    config.direction = this._dir ? this._dir.value : 'ltr';\n    config.positionStrategy = strategy;\n    config.scrollStrategy = this._overlay.scrollStrategies.reposition({\n      scrollThrottle: SCROLL_THROTTLE_MS\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n/**\n * Disposes the current tooltip and the overlay it is attached to\n * @return {?}\n */\nprivate _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n/**\n * Returns the origin position based on the user's position preference\n * @return {?}\n */\n_getOrigin(): OriginConnectionPosition {\n    if (this.position == 'above' || this.position == 'below') {\n      return {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    }\n\n    const /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isDirectionLtr ||\n        this.position == 'after' && !isDirectionLtr) {\n      return {originX: 'start', originY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isDirectionLtr ||\n        this.position == 'before' && !isDirectionLtr) {\n      return {originX: 'end', originY: 'center'};\n    }\n\n    throw getMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Returns the overlay position based on the user's preference\n * @return {?}\n */\n_getOverlayPosition(): OverlayConnectionPosition {\n    if (this.position == 'above') {\n      return {overlayX: 'center', overlayY: 'bottom'};\n    }\n\n    if (this.position == 'below') {\n      return {overlayX: 'center', overlayY: 'top'};\n    }\n\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isLtr ||\n        this.position == 'after' && !isLtr) {\n      return {overlayX: 'end', overlayY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isLtr ||\n        this.position == 'before' && !isLtr) {\n      return {overlayX: 'start', overlayY: 'center'};\n    }\n\n    throw getMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Updates the tooltip message and repositions the overlay according to the new message length\n * @param {?} message\n * @return {?}\n */\nprivate _setTooltipMessage(message: string) {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = message;\n      this._tooltipInstance._markForCheck();\n\n      first.call(this._ngZone.onMicrotaskEmpty).subscribe(() => {\n        if (this._tooltipInstance) { /** @type {?} */((\n          this._overlayRef)).updatePosition();\n        }\n      });\n    }\n  }\n/**\n * Updates the tooltip class\n * @param {?} tooltipClass\n * @return {?}\n */\nprivate _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',\n  host: {\n    '(longpress)': 'show()',\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n  },\n  exportAs: 'mdTooltip',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: Renderer2, },\n{type: Platform, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input, args: ['mdTooltipPosition', ] },],\n'disabled': [{ type: Input, args: ['mdTooltipDisabled', ] },],\n'_positionDeprecated': [{ type: Input, args: ['tooltip-position', ] },],\n'showDelay': [{ type: Input, args: ['mdTooltipShowDelay', ] },],\n'hideDelay': [{ type: Input, args: ['mdTooltipHideDelay', ] },],\n'message': [{ type: Input, args: ['mdTooltip', ] },],\n'tooltipClass': [{ type: Input, args: ['mdTooltipClass', ] },],\n'_deprecatedMessage': [{ type: Input, args: ['md-tooltip', ] },],\n'_matMessage': [{ type: Input, args: ['matTooltip', ] },],\n'_matPosition': [{ type: Input, args: ['matTooltipPosition', ] },],\n'_matDisabled': [{ type: Input, args: ['matTooltipDisabled', ] },],\n'_matHideDelay': [{ type: Input, args: ['matTooltipHideDelay', ] },],\n'_matShowDelay': [{ type: Input, args: ['matTooltipShowDelay', ] },],\n'_matClass': [{ type: Input, args: ['matTooltipClass', ] },],\n};\n}\n\nfunction MdTooltip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltip.ctorParameters;\n/** @type {?} */\nMdTooltip.propDecorators;\n/** @type {?} */\nMdTooltip.prototype._overlayRef;\n/** @type {?} */\nMdTooltip.prototype._tooltipInstance;\n/** @type {?} */\nMdTooltip.prototype._position;\n/** @type {?} */\nMdTooltip.prototype._disabled;\n/** @type {?} */\nMdTooltip.prototype._tooltipClass;\n/**\n * The default delay in ms before showing the tooltip after show is called\n * @type {?}\n */\nMdTooltip.prototype.showDelay;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n * @type {?}\n */\nMdTooltip.prototype.hideDelay;\n/** @type {?} */\nMdTooltip.prototype._message;\n/** @type {?} */\nMdTooltip.prototype._overlay;\n/** @type {?} */\nMdTooltip.prototype._elementRef;\n/** @type {?} */\nMdTooltip.prototype._scrollDispatcher;\n/** @type {?} */\nMdTooltip.prototype._viewContainerRef;\n/** @type {?} */\nMdTooltip.prototype._ngZone;\n/** @type {?} */\nMdTooltip.prototype._renderer;\n/** @type {?} */\nMdTooltip.prototype._platform;\n/** @type {?} */\nMdTooltip.prototype._dir;\n}\n\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nexport class TooltipComponent {\n/**\n * Message to display in the tooltip\n */\nmessage: string;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n */\ntooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * The timeout ID of any current timer set to show the tooltip\n */\n_showTimeoutId: number;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n */\n_hideTimeoutId: number;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n */\n_visibility: TooltipVisibility = 'initial';\n/**\n * Whether interactions on the page should close the tooltip\n */\n_closeOnInteraction: boolean = false;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n */\n_transformOrigin: string = 'bottom';\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n */\nprivate _onHide: Subject<any> = new Subject();\n/**\n * @param {?} _dir\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * Shows the tooltip with an animation originating from the provided origin\n * @param {?} position Position of the tooltip.\n * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n * @return {?}\n */\nshow(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n\n    this._setTransformOrigin(position);\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // If this was set to true immediately, then a body click that triggers show() would\n      // trigger interaction and close the tooltip right after it was displayed.\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n      setTimeout(() => this._closeOnInteraction = true, 0);\n    }, delay);\n  }\n/**\n * Begins the animation to hide the tooltip after the provided delay in ms.\n * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n * @return {?}\n */\nhide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Returns an observable that notifies when the tooltip has been hidden from view\n * @return {?}\n */\nafterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n/**\n * Whether the tooltip is being displayed\n * @return {?}\n */\nisVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n/**\n * Sets the tooltip transform origin according to the tooltip position\n * @param {?} value\n * @return {?}\n */\n_setTransformOrigin(value: TooltipPosition) {\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    switch (value) {\n      case 'before': this._transformOrigin = isLtr ? 'right' : 'left'; break;\n      case 'after':  this._transformOrigin = isLtr ? 'left' : 'right'; break;\n      case 'left':   this._transformOrigin = 'right'; break;\n      case 'right':  this._transformOrigin = 'left'; break;\n      case 'above':  this._transformOrigin = 'bottom'; break;\n      case 'below':  this._transformOrigin = 'top'; break;\n      default: throw getMdTooltipInvalidPositionError(value);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_afterVisibilityAnimation(e: AnimationEvent): void {\n    if (e.toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n  }\n/**\n * Interactions on the HTML body should close the tooltip immediately as defined in the\n * material design spec.\n * https://material.google.com/components/tooltips.html#tooltips-interaction\n * @return {?}\n */\n_handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n/**\n * Marks that the tooltip needs to be checked in the next change detection run.\n * Mainly used for rendering the initial text before positioning a tooltip, which\n * can be problematic in components with OnPush change detection.\n * @return {?}\n */\n_markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tooltip-component, mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('state', [\n      state('void', style({transform: 'scale(0)'})),\n      state('initial', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      state('hidden', style({transform: 'scale(0)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TooltipComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipComponent.ctorParameters;\n/**\n * Message to display in the tooltip\n * @type {?}\n */\nTooltipComponent.prototype.message;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nTooltipComponent.prototype.tooltipClass;\n/**\n * The timeout ID of any current timer set to show the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._showTimeoutId;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._hideTimeoutId;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._visibility;\n/**\n * Whether interactions on the page should close the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._closeOnInteraction;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._transformOrigin;\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n * @type {?}\n */\nTooltipComponent.prototype._onHide;\n/** @type {?} */\nTooltipComponent.prototype._dir;\n/** @type {?} */\nTooltipComponent.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {MdToolbar, MdToolbarRow} from './toolbar';\nexport class MdToolbarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdToolbar, MdToolbarRow, MdCommonModule],\n  declarations: [MdToolbar, MdToolbarRow],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarModule.ctorParameters;\n}\n\n\n\nexport {MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar} from './toolbar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Directive,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nexport class MdToolbarRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-toolbar-row, mat-toolbar-row',\n  host: {'class': 'mat-toolbar-row'},\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarRow.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdToolbarBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdToolbarBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarBase.prototype._renderer;\n/** @type {?} */\nMdToolbarBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdToolbarMixinBase = mixinColor(MdToolbarBase);\nexport class MdToolbar extends _MdToolbarMixinBase implements CanColor {\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-toolbar, mat-toolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    'role': 'toolbar'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction MdToolbar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbar.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserveContentModule} from '@angular/cdk';\nimport {PortalModule} from '../core';\nimport {MdRippleModule} from '../core/ripple/index';\nimport {MdTab} from './tab';\nimport {MdTabGroup} from './tab-group';\nimport {MdTabLabel} from './tab-label';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdTabNav, MdTabLink} from './tab-nav-bar/tab-nav-bar';\nimport {MdInkBar} from './ink-bar';\nimport {MdTabBody} from './tab-body';\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\nimport {MdTabHeader} from './tab-header';\nimport {ScrollDispatchModule} from '../core/overlay/scroll/index';\nexport class MdTabsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    PortalModule,\n    MdRippleModule,\n    ObserveContentModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdTabNav,\n    MdTabLink,\n  ],\n  declarations: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdInkBar,\n    MdTabLabelWrapper,\n    MdTabNav,\n    MdTabLink,\n    MdTabBody,\n    MdTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTabsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabsModule.ctorParameters;\n}\n\n\n\nexport {MdTabChangeEvent,MdTabHeaderPosition,MdTabGroup} from './tab-group';\nexport {MdInkBar} from './ink-bar';\nexport {MdTabBody, MdTabBodyOriginState, MdTabBodyPositionState} from './tab-body';\nexport {MdTabHeader, ScrollDirection} from './tab-header';\nexport {MdTabLabelWrapper} from './tab-label-wrapper';\nexport {MdTab} from './tab';\nexport {MdTabLabel} from './tab-label';\nexport {MdTabNav, MdTabLink} from './tab-nav-bar/index';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  QueryList,\n  ElementRef,\n  ViewEncapsulation,\n  ContentChildren,\n  Output,\n  EventEmitter,\n  Optional,\n  AfterContentChecked,\n  AfterContentInit,\n  OnDestroy,\n  NgZone,\n  Renderer2,\n} from '@angular/core';\nimport {\n  RIGHT_ARROW,\n  LEFT_ARROW,\n  ENTER,\n  Directionality,\n  Direction,\n  coerceBooleanProperty\n} from '../core';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdInkBar} from './ink-bar';\nimport {Subscription} from 'rxjs/Subscription';\nimport {applyCssTransform} from '../core/style/apply-transform';\nimport {auditTime, startWith} from '../core/rxjs/index';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {merge} from 'rxjs/observable/merge';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nexport class MdTabHeader implements AfterContentChecked, AfterContentInit, OnDestroy {\n   _labelWrappers: QueryList<MdTabLabelWrapper>;\n\n   _inkBar: MdInkBar;\n   _tabListContainer: ElementRef;\n   _tabList: ElementRef;\n/**\n * The tab index that is focused.\n */\nprivate _focusIndex: number = 0;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n */\nprivate _scrollDistance = 0;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n */\nprivate _selectedIndexChanged = false;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n */\nprivate _realignInkBar: Subscription | null = null;\n/**\n * Whether the controls for pagination should be displayed\n */\n_showPaginationControls = false;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n */\n_disableScrollAfter = true;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n */\n_disableScrollBefore = true;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n */\nprivate _tabLabelCount: number;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n */\nprivate _scrollDistanceChanged: boolean;\nprivate _selectedIndex: number = 0;\n/**\n * The index of the active tab.\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) {\n    this._selectedIndexChanged = this._selectedIndex != value;\n\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n/**\n * Whether ripples for the tab-header labels should be disabled or not.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\nprivate _disableRipple: boolean = false;\n/**\n * Event emitted when the option is selected.\n */\nselectFocusedIndex = new EventEmitter();\n/**\n * Event emitted when a label is focused.\n */\nindexFocused = new EventEmitter();\n/**\n * @param {?} _elementRef\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _dir\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _dir: Directionality) { }\n/**\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        break;\n    }\n  }\n/**\n * Aligns the ink bar to the selected tab on load.\n * @return {?}\n */\nngAfterContentInit() {\n    this._realignInkBar = this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.change : observableOf(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          auditTime.call(fromEvent(window, 'resize'), 10) :\n          observableOf(null);\n\n      return startWith.call(merge(dirChange, resize), null).subscribe(() => {\n        this._updatePagination();\n        this._alignInkBarToSelectedTab();\n      });\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._realignInkBar) {\n      this._realignInkBar.unsubscribe();\n      this._realignInkBar = null;\n    }\n  }\n/**\n * Callback for when the MutationObserver detects that the content has changed.\n * @return {?}\n */\n_onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n  }\n/**\n * Updating the view whether pagination should be enabled or not\n * @return {?}\n */\n_updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n/**\n * When the focus index is set, we must manually send focus to the correct label\n * @param {?} value\n * @return {?}\n */\nset focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n\n    this._setTabFocus(value);\n  }\n/**\n * Tracks which element has focus; used for keyboard navigation\n * @return {?}\n */\nget focusIndex(): number { return this._focusIndex; }\n/**\n * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n * providing a valid index and return true.\n * @param {?} index\n * @return {?}\n */\n_isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n/**\n * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n * scrolling is enabled.\n * @param {?} tabIndex\n * @return {?}\n */\n_setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const /** @type {?} */ containerEl = this._tabListContainer.nativeElement;\n      const /** @type {?} */ dir = this._getLayoutDirection();\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n/**\n * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n * Valid offsets are 1 and -1.\n * @param {?} offset\n * @return {?}\n */\n_moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const /** @type {?} */ tabs: MdTabLabelWrapper[] = this._labelWrappers.toArray();\n      for (let /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n/**\n * Increment the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n/**\n * Decrement the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n/**\n * The layout direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Performs the CSS transformation on the tab list that will cause the list to scroll.\n * @return {?}\n */\n_updateTabScrollPosition() {\n    const /** @type {?} */ scrollDistance = this.scrollDistance;\n    const /** @type {?} */ translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._renderer.setStyle(this._tabList.nativeElement, 'transform',\n        `translate3d(${translateX}px, 0, 0)`);\n  }\n/**\n * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n * @param {?} v\n * @return {?}\n */\nset scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n\n    this._checkScrollingControls();\n  }\n/**\n * @return {?}\n */\nget scrollDistance(): number { return this._scrollDistance; }\n/**\n * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n * the end of the list, respectively). The distance to scroll is computed to be a third of the\n * length of the tab list view window.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} scrollDir\n * @return {?}\n */\n_scrollHeader(scrollDir: ScrollDirection) {\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n/**\n * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} labelIndex\n * @return {?}\n */\n_scrollToLabel(labelIndex: number) {\n    const /** @type {?} */ selectedLabel = this._labelWrappers\n        ? this._labelWrappers.toArray()[labelIndex]\n        :  null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let /** @type {?} */ labelBeforePos: number, /** @type {?} */ labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const /** @type {?} */ beforeVisiblePos = this.scrollDistance;\n    const /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n/**\n * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n * tab list is wider than the size of the header container, then the pagination controls should\n * be shown.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkPaginationEnabled() {\n    this._showPaginationControls =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!this._showPaginationControls) {\n      this.scrollDistance = 0;\n    }\n  }\n/**\n * Evaluate whether the before and after controls should be enabled or disabled.\n * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n * before button. If the header is at the end of the list (scroll distance is equal to the\n * maximum distance we can scroll), then disable the after button.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n  }\n/**\n * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n * is equal to the difference in width between the tab list container and tab header container.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_getMaxScrollDistance(): number {\n    const /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n/**\n * Tells the ink-bar to align itself to the current label wrapper\n * @return {?}\n */\nprivate _alignInkBarToSelectedTab(): void {\n    const /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length\n        ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement\n        : null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-header, mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_labelWrappers': [{ type: ContentChildren, args: [MdTabLabelWrapper, ] },],\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabListContainer': [{ type: ViewChild, args: ['tabListContainer', ] },],\n'_tabList': [{ type: ViewChild, args: ['tabList', ] },],\n'selectedIndex': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'selectFocusedIndex': [{ type: Output },],\n'indexFocused': [{ type: Output },],\n};\n}\n\nfunction MdTabHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabHeader.ctorParameters;\n/** @type {?} */\nMdTabHeader.propDecorators;\n/** @type {?} */\nMdTabHeader.prototype._labelWrappers;\n/** @type {?} */\nMdTabHeader.prototype._inkBar;\n/** @type {?} */\nMdTabHeader.prototype._tabListContainer;\n/** @type {?} */\nMdTabHeader.prototype._tabList;\n/**\n * The tab index that is focused.\n * @type {?}\n */\nMdTabHeader.prototype._focusIndex;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistance;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n * @type {?}\n */\nMdTabHeader.prototype._selectedIndexChanged;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n * @type {?}\n */\nMdTabHeader.prototype._realignInkBar;\n/**\n * Whether the controls for pagination should be displayed\n * @type {?}\n */\nMdTabHeader.prototype._showPaginationControls;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollAfter;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollBefore;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n * @type {?}\n */\nMdTabHeader.prototype._tabLabelCount;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistanceChanged;\n/** @type {?} */\nMdTabHeader.prototype._selectedIndex;\n/** @type {?} */\nMdTabHeader.prototype._disableRipple;\n/**\n * Event emitted when the option is selected.\n * @type {?}\n */\nMdTabHeader.prototype.selectFocusedIndex;\n/**\n * Event emitted when a label is focused.\n * @type {?}\n */\nMdTabHeader.prototype.indexFocused;\n/** @type {?} */\nMdTabHeader.prototype._elementRef;\n/** @type {?} */\nMdTabHeader.prototype._ngZone;\n/** @type {?} */\nMdTabHeader.prototype._renderer;\n/** @type {?} */\nMdTabHeader.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  ElementRef,\n  Optional,\n  AfterViewChecked,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {TemplatePortal, PortalHostDirective, Directionality, Direction} from '../core';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MdTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MdTabBodyOriginState = 'left' | 'right';\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nexport class MdTabBody implements OnInit, AfterViewChecked {\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n */\nonCentering: EventEmitter<number> = new EventEmitter<number>();\n/**\n * Event emitted when the tab completes its animation towards the center.\n */\nonCentered: EventEmitter<void> = new EventEmitter<void>(true);\n/**\n * The tab body content to display.\n */\n_content: TemplatePortal;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n */\n_position: MdTabBodyPositionState;\n/**\n * @param {?} position\n * @return {?}\n */\nset position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n/**\n * The origin position from which this tab should appear when it is centered into view.\n */\n_origin: MdTabBodyOriginState;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @param {?} origin\n * @return {?}\n */\nset origin(origin: number) {\n    if (origin == null) { return; }\n\n    const /** @type {?} */ dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _dir\n */\nconstructor(private _elementRef: ElementRef,\nprivate _dir: Directionality) { }\n/**\n * After initialized, check if the content is centered and has an origin. If so, set the\n * special position states that transition the tab from the left or right before centering.\n * @return {?}\n */\nngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n/**\n * After the view has been set, check if the tab content is set to the center and attach the\n * content if it is not already attached.\n * @return {?}\n */\nngAfterViewChecked() {\n    if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {\n      this._portalHost.attach(this._content);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabStarted(e: AnimationEvent) {\n    if (this._isCenterPosition(e.toState)) {\n      this.onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabComplete(e: AnimationEvent) {\n    // If the end state is that the tab is not centered, then detach the content.\n    if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {\n      this._portalHost.detach();\n    }\n\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this.onCentered.emit();\n    }\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the provided position state is considered center, regardless of origin.\n * @param {?} position\n * @return {?}\n */\nprivate _isCenterPosition(position: MdTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-body, mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-tab-body',\n  },\n  animations: [\n    trigger('translateTab', [\n      state('void', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n      state('left-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n      transition('* => left, * => right, left => center, right => center',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n      transition('void => left-origin-center', [\n        style({transform: 'translate3d(-100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ]),\n      transition('void => right-origin-center', [\n        style({transform: 'translate3d(100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ])\n    ])\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n'onCentering': [{ type: Output },],\n'onCentered': [{ type: Output },],\n'_content': [{ type: Input, args: ['content', ] },],\n'position': [{ type: Input, args: ['position', ] },],\n'origin': [{ type: Input, args: ['origin', ] },],\n};\n}\n\nfunction MdTabBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabBody.ctorParameters;\n/** @type {?} */\nMdTabBody.propDecorators;\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n * @type {?}\n */\nMdTabBody.prototype._portalHost;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n * @type {?}\n */\nMdTabBody.prototype.onCentering;\n/**\n * Event emitted when the tab completes its animation towards the center.\n * @type {?}\n */\nMdTabBody.prototype.onCentered;\n/**\n * The tab body content to display.\n * @type {?}\n */\nMdTabBody.prototype._content;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n * @type {?}\n */\nMdTabBody.prototype._position;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @type {?}\n */\nMdTabBody.prototype._origin;\n/** @type {?} */\nMdTabBody.prototype._elementRef;\n/** @type {?} */\nMdTabBody.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  Directive,\n  ElementRef,\n  HostBinding,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdInkBar} from '../ink-bar';\nimport {CanDisable, mixinDisabled} from '../../core/common-behaviors/disabled';\nimport {MdRipple} from '../../core';\nimport {ViewportRuler} from '../../core/overlay/position/viewport-ruler';\nimport {Directionality, MD_RIPPLE_GLOBAL_OPTIONS, Platform, RippleGlobalOptions} from '../../core';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {takeUntil, auditTime} from '../../core/rxjs/index';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {merge} from 'rxjs/observable/merge';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nexport class MdTabNav implements AfterContentInit, OnDestroy {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n   _inkBar: MdInkBar;\n/**\n * Subscription for window.resize event *\n */\nprivate _resizeSubscription: Subscription;\n/**\n * @param {?} _dir\n * @param {?} _ngZone\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _ngZone: NgZone) { }\n/**\n * Notifies the component that the active link has been changed.\n * @param {?} element\n * @return {?}\n */\nupdateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._resizeSubscription = this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.change : observableOf(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          auditTime.call(fromEvent(window, 'resize'), 10) :\n          observableOf(null);\n\n      return takeUntil.call(merge(dirChange, resize), this._onDestroy)\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n/**\n * Checks if the active link has been changed and, if so, will update the ink bar.\n * @return {?}\n */\nngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._onDestroy.next();\n    this._resizeSubscription.unsubscribe();\n  }\n/**\n * Aligns the ink bar to the active link.\n * @return {?}\n */\n_alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n};\n}\n\nfunction MdTabNav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabNav.ctorParameters;\n/** @type {?} */\nMdTabNav.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nMdTabNav.prototype._onDestroy;\n/** @type {?} */\nMdTabNav.prototype._activeLinkChanged;\n/** @type {?} */\nMdTabNav.prototype._activeLinkElement;\n/** @type {?} */\nMdTabNav.prototype._inkBar;\n/**\n * Subscription for window.resize event *\n * @type {?}\n */\nMdTabNav.prototype._resizeSubscription;\n/** @type {?} */\nMdTabNav.prototype._dir;\n/** @type {?} */\nMdTabNav.prototype._ngZone;\n}\n\nexport class MdTabLinkBase {}\nexport const /** @type {?} */ _MdTabLinkMixinBase = mixinDisabled(MdTabLinkBase);\n/**\n * Link inside of a `md-tab-nav-bar`.\n */\nexport class MdTabLink extends _MdTabLinkMixinBase implements OnDestroy, CanDisable {\n/**\n * Whether the tab link is active or not.\n */\nprivate _isActive: boolean = false;\n/**\n * Reference to the instance of the ripple for the tab link.\n */\nprivate _tabLinkRipple: MdRipple;\n/**\n * Whether the link is active.\n * @return {?}\n */\nget active(): boolean { return this._isActive; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._mdTabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget tabIndex(): number {\n    return this.disabled ? -1 : 0;\n  }\n/**\n * @param {?} _mdTabNavBar\n * @param {?} _elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(private _mdTabNavBar: MdTabNav,\nprivate _elementRef: ElementRef,\n              ngZone: NgZone,\n              ruler: ViewportRuler,\n              platform: Platform,\n                globalOptions: RippleGlobalOptions) {\n    super();\n\n    // Manually create a ripple instance that uses the tab link element as trigger element.\n    // Notice that the lifecycle hooks for the ripple config won't be called anymore.\n    this._tabLinkRipple = new MdRipple(_elementRef, ngZone, ruler, platform, globalOptions);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Manually call the ngOnDestroy lifecycle hook of the ripple instance because it won't be\n    // called automatically since its instance is not created by Angular.\n    this._tabLinkRipple.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-link], [mat-tab-link], [mdTabLink], [matTabLink]',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdTabNav, },\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input },],\n'tabIndex': [{ type: HostBinding, args: ['tabIndex', ] },],\n};\n}\n\nfunction MdTabLink_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLink.ctorParameters;\n/** @type {?} */\nMdTabLink.propDecorators;\n/**\n * Whether the tab link is active or not.\n * @type {?}\n */\nMdTabLink.prototype._isActive;\n/**\n * Reference to the instance of the ripple for the tab link.\n * @type {?}\n */\nMdTabLink.prototype._tabLinkRipple;\n/** @type {?} */\nMdTabLink.prototype._mdTabNavBar;\n/** @type {?} */\nMdTabLink.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Renderer2, ElementRef, NgZone} from '@angular/core';\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nexport class MdInkBar {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) {}\n/**\n * Calculates the styles from the provided element in order to align the ink-bar to that element.\n * Shows the ink bar if previously set as hidden.\n * @param {?} element\n * @return {?}\n */\nalignToElement(element: HTMLElement) {\n    this.show();\n\n    this._ngZone.runOutsideAngular(() => {\n      requestAnimationFrame(() => {\n        this._renderer.setStyle(this._elementRef.nativeElement, 'left',\n            this._getLeftPosition(element));\n        this._renderer.setStyle(this._elementRef.nativeElement, 'width',\n            this._getElementWidth(element));\n      });\n    });\n  }\n/**\n * Shows the ink bar.\n * @return {?}\n */\nshow(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'visible');\n  }\n/**\n * Hides the ink bar.\n * @return {?}\n */\nhide(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\n  }\n/**\n * Generates the pixel distance from the left based on the provided element in string format.\n * @param {?} element\n * @return {?}\n */\nprivate _getLeftPosition(element: HTMLElement): string {\n    return element ? element.offsetLeft + 'px' : '0';\n  }\n/**\n * Generates the pixel width from the provided element in string format.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementWidth(element: HTMLElement): string {\n    return element ? element.offsetWidth + 'px' : '0';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-ink-bar, mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\n}\n\nfunction MdInkBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInkBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInkBar.ctorParameters;\n/** @type {?} */\nMdInkBar.prototype._renderer;\n/** @type {?} */\nMdInkBar.prototype._elementRef;\n/** @type {?} */\nMdInkBar.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdTabLabelWrapperBase {}\nexport const /** @type {?} */ _MdTabLabelWrapperMixinBase = mixinDisabled(MdTabLabelWrapperBase);\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * \\@docs-private\n */\nexport class MdTabLabelWrapper extends _MdTabLabelWrapperMixinBase implements CanDisable {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {\n    super();\n  }\n/**\n * Sets focus on the wrapper element\n * @return {?}\n */\nfocus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n/**\n * @return {?}\n */\ngetOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n/**\n * @return {?}\n */\ngetOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label-wrapper], [mat-tab-label-wrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdTabLabelWrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabelWrapper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabelWrapper.ctorParameters;\n/** @type {?} */\nMdTabLabelWrapper.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  QueryList,\n  ContentChildren,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {MdTab} from './tab';\nimport {map} from '../core/rxjs/index';\n/**\n * Used to generate unique ID's for each tab component\n */\nlet nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nexport class MdTabChangeEvent {\n  index: number;\n  tab: MdTab;\n}\n\nfunction MdTabChangeEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabChangeEvent.prototype.index;\n/** @type {?} */\nMdTabChangeEvent.prototype.tab;\n}\n\n\n/** Possible positions for the tab header. */\nexport type MdTabHeaderPosition = 'above' | 'below';\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\nexport class MdTabGroup {\n   _tabs: QueryList<MdTab>;\n\n   _tabBodyWrapper: ElementRef;\n/**\n * Whether this component has been initialized.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The tab index that should be selected after the content has been checked.\n */\nprivate _indexToSelect: number | null = 0;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n */\nprivate _tabBodyWrapperHeight: number = 0;\n/**\n * Whether the tab group should grow to the size of the active tab.\n * @return {?}\n */\nget dynamicHeight(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\nprivate _dynamicHeight: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n/**\n * Whether ripples for the tab-group should be disabled or not.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\nprivate _disableRipple: boolean = false;\nprivate _selectedIndex: number | null = null;\n/**\n * The index of the active tab.\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number | null) { this._indexToSelect = value; }\n/**\n * @return {?}\n */\nget selectedIndex(): number | null { return this._selectedIndex; }\n/**\n * Position of the tab header.\n */\nheaderPosition: MdTabHeaderPosition = 'above';\n/**\n * Output to enable support for two-way binding on `[(selectedIndex)]`\n * @return {?}\n */\nget selectedIndexChange(): Observable<number> {\n    return map.call(this.selectChange, event => event.index);\n  }\n/**\n * Event emitted when focus has changed within a tab group.\n */\nfocusChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>();\n/**\n * Event emitted when the tab selection has changed.\n */\nselectChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>(true);\nprivate _groupId: number;\n/**\n * @param {?} _renderer\n */\nconstructor(private _renderer: Renderer2) {\n    this._groupId = nextId++;\n  }\n/**\n * After the content is checked, this component knows what tabs have been defined\n * and what the selected index should be. This is where we can know exactly what position\n * each tab should be in according to the new selected index, and additionally we know how\n * a new selected tab should transition in (from the left or right).\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // Clamp the next selected index to the bounds of 0 and the tabs length. Note the `|| 0`, which\n    // ensures that values like NaN can't get through and which would otherwise throw the\n    // component into an infinite loop (since Math.max(NaN, 0) === NaN).\n    let /** @type {?} */ indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      this.selectChange.emit(this._createChangeEvent(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MdTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    this._selectedIndex = indexToSelect;\n  }\n/**\n * Waits one frame for the view to update, then updates the ink bar\n * Note: This must be run outside of the zone or it will create an infinite change detection loop.\n * @return {?}\n */\nngAfterViewChecked(): void {\n    this._isInitialized = true;\n  }\n/**\n * @param {?} index\n * @return {?}\n */\n_focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _createChangeEvent(index: number): MdTabChangeEvent {\n    const /** @type {?} */ event = new MdTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n/**\n * Returns a unique id for each tab label element\n * @param {?} i\n * @return {?}\n */\n_getTabLabelId(i: number): string {\n    return `md-tab-label-${this._groupId}-${i}`;\n  }\n/**\n * Returns a unique id for each tab content element\n * @param {?} i\n * @return {?}\n */\n_getTabContentId(i: number): string {\n    return `md-tab-content-${this._groupId}-${i}`;\n  }\n/**\n * Sets the height of the body wrapper to the height of the activating tab if dynamic\n * height property is true.\n * @param {?} tabHeight\n * @return {?}\n */\n_setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n        this._tabBodyWrapperHeight + 'px');\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n          tabHeight + 'px');\n    }\n  }\n/**\n * Removes the height of the tab body wrapper.\n * @return {?}\n */\n_removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height', '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-group, mat-tab-group',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tabs': [{ type: ContentChildren, args: [MdTab, ] },],\n'_tabBodyWrapper': [{ type: ViewChild, args: ['tabBodyWrapper', ] },],\n'dynamicHeight': [{ type: Input },],\n'_dynamicHeightDeprecated': [{ type: Input, args: ['md-dynamic-height', ] },],\n'disableRipple': [{ type: Input },],\n'selectedIndex': [{ type: Input },],\n'headerPosition': [{ type: Input },],\n'selectedIndexChange': [{ type: Output },],\n'focusChange': [{ type: Output },],\n'selectChange': [{ type: Output },],\n};\n}\n\nfunction MdTabGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabGroup.ctorParameters;\n/** @type {?} */\nMdTabGroup.propDecorators;\n/** @type {?} */\nMdTabGroup.prototype._tabs;\n/** @type {?} */\nMdTabGroup.prototype._tabBodyWrapper;\n/**\n * Whether this component has been initialized.\n * @type {?}\n */\nMdTabGroup.prototype._isInitialized;\n/**\n * The tab index that should be selected after the content has been checked.\n * @type {?}\n */\nMdTabGroup.prototype._indexToSelect;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n * @type {?}\n */\nMdTabGroup.prototype._tabBodyWrapperHeight;\n/** @type {?} */\nMdTabGroup.prototype._dynamicHeight;\n/** @type {?} */\nMdTabGroup.prototype._disableRipple;\n/** @type {?} */\nMdTabGroup.prototype._selectedIndex;\n/**\n * Position of the tab header.\n * @type {?}\n */\nMdTabGroup.prototype.headerPosition;\n/**\n * Event emitted when focus has changed within a tab group.\n * @type {?}\n */\nMdTabGroup.prototype.focusChange;\n/**\n * Event emitted when the tab selection has changed.\n * @type {?}\n */\nMdTabGroup.prototype.selectChange;\n/** @type {?} */\nMdTabGroup.prototype._groupId;\n/** @type {?} */\nMdTabGroup.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {TemplatePortal} from '../core/portal/portal';\nimport {\n  ViewContainerRef, Input, TemplateRef, ViewChild, OnInit, ContentChild,\n  Component\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {MdTabLabel} from './tab-label';\n/**\n * \\@docs-private\n */\nexport class MdTabBase {}\nexport const /** @type {?} */ _MdTabMixinBase = mixinDisabled(MdTabBase);\nexport class MdTab extends _MdTabMixinBase implements OnInit, CanDisable {\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n */\ntemplateLabel: MdTabLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n */\n_content: TemplateRef<any>;\n/**\n * The plain text label for the tab, used when there is no template label.\n */\ntextLabel: string = '';\n/**\n * The portal that will be the hosted content of the tab\n */\nprivate _contentPortal: TemplatePortal | null = null;\n/**\n * @return {?}\n */\nget content(): TemplatePortal | null { return this._contentPortal; }\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n */\nposition: number | null = null;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n */\norigin: number | null = null;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab, mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'templateLabel': [{ type: ContentChild, args: [MdTabLabel, ] },],\n'_content': [{ type: ViewChild, args: [TemplateRef, ] },],\n'textLabel': [{ type: Input, args: ['label', ] },],\n};\n}\n\nfunction MdTab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTab.ctorParameters;\n/** @type {?} */\nMdTab.propDecorators;\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n * @type {?}\n */\nMdTab.prototype.templateLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n * @type {?}\n */\nMdTab.prototype._content;\n/**\n * The plain text label for the tab, used when there is no template label.\n * @type {?}\n */\nMdTab.prototype.textLabel;\n/**\n * The portal that will be the hosted content of the tab\n * @type {?}\n */\nMdTab.prototype._contentPortal;\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n * @type {?}\n */\nMdTab.prototype.position;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n * @type {?}\n */\nMdTab.prototype.origin;\n/** @type {?} */\nMdTab.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {TemplatePortalDirective} from '../core';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdTabLabelBaseClass = TemplatePortalDirective;\n/**\n * Used to flag tab labels for use with the portal directive\n */\nexport class MdTabLabel extends _MdTabLabelBaseClass {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label], [mat-tab-label], [mdTabLabel], [matTabLabel]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction MdTabLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabel.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {OverlayModule, PortalModule, MdCommonModule, LIVE_ANNOUNCER_PROVIDER} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdSnackBar} from './snack-bar';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nexport class MdSnackBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MdCommonModule,\n  ],\n  exports: [MdSnackBarContainer, MdCommonModule],\n  declarations: [MdSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MdSnackBarContainer, SimpleSnackBar],\n  providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSnackBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarModule.ctorParameters;\n}\n\n\n\nexport {MdSnackBar} from './snack-bar';\nexport {SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer} from './snack-bar-container';\nexport {MdSnackBarConfig} from './snack-bar-config';\nexport {MdSnackBarRef} from './snack-bar-ref';\nexport {SimpleSnackBar} from './simple-snack-bar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, ComponentRef, Optional, SkipSelf} from '@angular/core';\nimport {\n  ComponentType,\n  ComponentPortal,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  LiveAnnouncer,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {extendObject} from '../core/util/object-extend';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n */\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any> | null = null;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> | null {\n    let /** @type {?} */ parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\n * currently opened snack bars.\n * \n * @template T\n * @param {?} component Component to be instantiated.\n * @param {?=} config Extra configuration for the snack bar.\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\n    config = _applyConfigDefaults(config);\n    let /** @type {?} */ overlayRef = this._createOverlay(config);\n    let /** @type {?} */ snackBarContainer = this._attachSnackBarContainer(overlayRef, config);\n    let /** @type {?} */ snackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    // If a snack bar is already in view, dismiss it and enter the new snack bar after exit\n    // animation is complete.\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    // If no snack bar is in view, enter the new snack bar.\n    } else {\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => {\n        snackBarRef._dismissAfter( /** @type {?} */(( /** @type {?} */((config)).duration)));\n      });\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n/**\n * Opens a snackbar with a message and an optional action.\n * @param {?} message The message to show in the snackbar.\n * @param {?=} action The label for the snackbar action.\n * @param {?=} config Additional configuration options for the snackbar.\n * @return {?}\n */\nopen(message: string, action = '', config?: MdSnackBarConfig): MdSnackBarRef<SimpleSnackBar> {\n    let /** @type {?} */ _config = _applyConfigDefaults(config);\n    _config.announcementMessage = message;\n\n    let /** @type {?} */ simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, _config);\n    simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;\n    simpleSnackBarRef.instance.message = message;\n    simpleSnackBarRef.instance.action = action;\n    return simpleSnackBarRef;\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n\n    // The snackbar animation needs the content to be resolved in order to transform the bar\n    // out of the view initially (so it can slide in). To make the content resolve, we manually\n    // detect changes.\n    containerRef.changeDetectorRef.detectChanges();\n\n    return containerRef.instance;\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} container\n * @param {?} overlayRef\n * @return {?}\n */\nprivate _attachSnackbarContent<T>(component: ComponentType<T>,\n                                    container: MdSnackBarContainer,\n                                    overlayRef: OverlayRef): MdSnackBarRef<T> {\n    let /** @type {?} */ portal = new ComponentPortal(component);\n    let /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n    return new MdSnackBarRef(contentRef.instance, container, overlayRef);\n  }\n/**\n * Creates a new overlay and places it in the correct location.\n * @param {?} config The user-specified snack bar config.\n * @return {?}\n */\nprivate _createOverlay(config: MdSnackBarConfig): OverlayRef {\n    let /** @type {?} */ state = new OverlayState();\n    state.direction = config.direction;\n    state.positionStrategy = this._overlay.position().global().centerHorizontally().bottom('0');\n    return this._overlay.create(state);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param {?=} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MdSnackBarConfig): MdSnackBarConfig {\n  return extendObject(new MdSnackBarConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation} from '@angular/core';\nimport {MdSnackBarRef} from './snack-bar-ref';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport class SimpleSnackBar {\n/**\n * The message to be shown in the snack bar.\n */\nmessage: string;\n/**\n * The label for the button in the snack bar.\n */\naction: string;\n/**\n * The instance of the component making up the content of the snack bar.\n */\nsnackBarRef: MdSnackBarRef<SimpleSnackBar>;\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    this.snackBarRef._action();\n  }\n/**\n * If the action button should be shown.\n * @return {?}\n */\nget hasAction(): boolean {\n    return !!this.action;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SimpleSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSimpleSnackBar.ctorParameters;\n/**\n * The message to be shown in the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.message;\n/**\n * The label for the button in the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.action;\n/**\n * The instance of the component making up the content of the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.snackBarRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal,\n  PortalHostDirective,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {first} from '../core/rxjs/index';\n\n\n\nexport type SnackBarState = 'initial' | 'visible' | 'complete' | 'void';\n\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Subject for notifying that the snack bar has exited from view.\n */\nprivate onExit: Subject<any> = new Subject();\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n */\nprivate onEnter: Subject<any> = new Subject();\n/**\n * The state of the snack bar animations.\n */\nanimationState: SnackBarState = 'initial';\n/**\n * The snack bar configuration.\n */\nsnackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    if (this.snackBarConfig.extraClasses) {\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\n      // to pass in an array or a space-separated list.\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\n        this._renderer.addClass(this._elementRef.nativeElement, cssClass);\n      }\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @return {?}\n */\nattachTemplatePortal(): Map<string, any> {\n    throw Error('Not yet implemented');\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\n    if (event.toState === 'void' || event.toState === 'complete') {\n      this._completeExit();\n    }\n\n    if (event.toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const /** @type {?} */ onEnter = this.onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\n    this.animationState = 'visible';\n  }\n/**\n * Returns an observable resolving when the enter animation completes.\n * @return {?}\n */\n_onEnter(): Observable<void> {\n    this.animationState = 'visible';\n    return this.onEnter.asObservable();\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\n    this.animationState = 'complete';\n    return this._onExit();\n  }\n/**\n * Returns an observable that completes after the closing animation is done.\n * @return {?}\n */\n_onExit(): Observable<void> {\n    return this.onExit.asObservable();\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this._completeExit();\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\n * errors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\n    // Note: we shouldn't use `this` inside the zone callback,\n    // because it can cause a memory leak.\n    const /** @type {?} */ onExit = this.onExit;\n\n    first.call(this._ngZone.onMicrotaskEmpty).subscribe(() => {\n      onExit.next();\n      onExit.complete();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  host: {\n    'role': 'alert',\n    '[@state]': 'animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      state('initial', style({transform: 'translateY(100%)'})),\n      state('visible', style({transform: 'translateY(0%)'})),\n      state('complete', style({transform: 'translateY(100%)'})),\n      transition('visible => complete', animate(HIDE_ANIMATION)),\n      transition('initial => visible, void => visible', animate(SHOW_ANIMATION)),\n    ])\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype.animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\nprivate _instance: T;\n/**\n * The instance of the component making up the content of the snack bar.\n * @return {?}\n */\nget instance(): T {\n    return this._instance;\n  }\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n */\ncontainerInstance: MdSnackBarContainer;\n/**\n * Subject for notifying the user that the snack bar has closed.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n */\nprivate _afterOpened: Subject<any>;\n/**\n * Subject for notifying the user that the snack bar action was called.\n */\nprivate _onAction: Subject<any> = new Subject();\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n */\nprivate _durationTimeoutId: number;\n/**\n * @param {?} instance\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(instance: T,\n              containerInstance: MdSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\n    // Sets the readonly instance of the snack bar content component.\n    this._instance = instance;\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit().subscribe(() => this._finishDismiss());\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n/**\n * Dismisses the snack bar after some duration\n * @param {?} duration\n * @return {?}\n */\n_dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\n_action(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\n    this._overlayRef.dispose();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\n    return this.containerInstance._onEnter();\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\nfunction MdSnackBarRef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarRef.prototype._instance;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n * @type {?}\n */\nMdSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMdSnackBarRef.prototype._onAction;\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n * @type {?}\n */\nMdSnackBarRef.prototype._durationTimeoutId;\n/** @type {?} */\nMdSnackBarRef.prototype._overlayRef;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef} from '@angular/core';\nimport {AriaLivePoliteness, Direction} from '../core';\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MdSnackBarConfig {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n */\npoliteness?: AriaLivePoliteness = 'assertive';\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n */\nannouncementMessage?: string = '';\n/**\n * The view container to place the overlay for the snack bar into.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n */\nduration?: number = 0;\n/**\n * Extra CSS classes to be added to the snack bar container.\n */\nextraClasses?: string[];\n/**\n * Text layout direction for the snack bar.\n */\ndirection?: Direction = 'ltr';\n}\n\nfunction MdSnackBarConfig_tsickle_Closure_declarations() {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n * @type {?}\n */\nMdSnackBarConfig.prototype.politeness;\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n * @type {?}\n */\nMdSnackBarConfig.prototype.announcementMessage;\n/**\n * The view container to place the overlay for the snack bar into.\n * @type {?}\n */\nMdSnackBarConfig.prototype.viewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.duration;\n/**\n * Extra CSS classes to be added to the snack bar container.\n * @type {?}\n */\nMdSnackBarConfig.prototype.extraClasses;\n/**\n * Text layout direction for the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.direction;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {\n  MdErrorDirective,\n  MdHint,\n  MdInputContainer,\n  MdInputDirective,\n  MdPlaceholder,\n  MdPrefix,\n  MdSuffix\n} from './input-container';\nimport {MdTextareaAutosize} from './autosize';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {PlatformModule} from '../core/platform/index';\nexport class MdInputModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    PlatformModule,\n  ],\n  exports: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputModule.ctorParameters;\n}\n\n\n\nexport {MdTextareaAutosize} from './autosize';\nexport {MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer} from './input-container';\nexport {getMdInputContainerPlaceholderConflictError,getMdInputContainerUnsupportedTypeError,getMdInputContainerDuplicatedHintError,getMdInputContainerMissingMdInputError} from './input-container-errors';\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, AfterViewInit, Optional, Self} from '@angular/core';\nimport {NgControl} from '@angular/forms';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements AfterViewInit {\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n */\nprivate _previousValue: string;\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n/**\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n/**\n * @return {?}\n */\nget _matAutosizeMinRows() { return this.minRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMinRows(v) { this.minRows = v; }\n/**\n * @return {?}\n */\nget _matAutosizeMaxRows() { return this.maxRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMaxRows(v) { this.maxRows = v; }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n * @param {?} formControl\n */\nconstructor(private _elementRef: ElementRef,   formControl: NgControl) {\n    if (formControl && formControl.valueChanges) {\n      formControl.valueChanges.subscribe(() => this.resizeToFitContent());\n    }\n  }\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._cacheTextareaLineHeight();\n    this.resizeToFitContent();\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    textarea.style[property] = value;\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = ''; /** @type {?} */((\n\n    textarea.parentNode)).appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight; /** @type {?} */((\n    textarea.parentNode)).removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    if (textarea.value === this._previousValue) {\n      return;\n    }\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    textarea.style.height = 'auto';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n\n    this._previousValue = textarea.value;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'textarea[md-autosize], textarea[mdTextareaAutosize],' +\n            'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'mdTextareaAutosize',\n  host: {\n    '(input)': 'resizeToFitContent()',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input, args: ['mdAutosizeMinRows', ] },],\n'maxRows': [{ type: Input, args: ['mdAutosizeMaxRows', ] },],\n'_matAutosizeMinRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n'_matAutosizeMaxRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n * @type {?}\n */\nMdTextareaAutosize.prototype._previousValue;\n/** @type {?} */\nMdTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMdTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewChild,\n  ViewEncapsulation,\n  Inject\n} from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty, Platform} from '../core';\nimport {FormGroupDirective, NgControl, NgForm, FormControl} from '@angular/forms';\nimport {getSupportedInputTypes} from '../core/platform/features';\nimport {\n  getMdInputContainerDuplicatedHintError,\n  getMdInputContainerMissingMdInputError,\n  getMdInputContainerPlaceholderConflictError,\n  getMdInputContainerUnsupportedTypeError\n} from './input-container-errors';\nimport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS\n} from '../core/placeholder/placeholder-options';\nimport {\n  defaultErrorStateMatcher,\n  ErrorStateMatcher,\n  ErrorOptions,\n  MD_ERROR_GLOBAL_OPTIONS\n} from '../core/error/error-options';\n\n// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.\nconst /** @type {?} */ MD_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * The placeholder directive. The content can declare this to implement more\n * complex placeholders.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-placeholder, mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\n/**\n * Hint text to be shown underneath the input.\n */\nexport class MdHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the input.\n */\nid: string = `md-input-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-hint, mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMdHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the input.\n * @type {?}\n */\nMdHint.prototype.id;\n}\n\n/**\n * Single error message to be shown underneath the input.\n */\nexport class MdErrorDirective { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-error, mat-error',\n  host: {\n    'class': 'mat-input-error'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdErrorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdErrorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdErrorDirective.ctorParameters;\n}\n\n/**\n * Prefix to be placed the the front of the input.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdPrefix], [matPrefix], [md-prefix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\n/**\n * Suffix to be placed at the end of the input.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSuffix], [matSuffix], [md-suffix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\n/**\n * Marker for the input element that `MdInputContainer` is wrapping.\n */\nexport class MdInputDirective {\n/**\n * Variables used as cache for getters and setters.\n */\nprivate _type = 'text';\nprivate _placeholder: string = '';\nprivate _disabled = false;\nprivate _required = false;\nprivate _id: string;\nprivate _cachedUid: string;\nprivate _errorOptions: ErrorOptions;\n/**\n * Whether the element is focused or not.\n */\nfocused = false;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n */\nariaDescribedby: string;\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() {\n    return this._ngControl ? this._ngControl.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    if (this._placeholder !== value) {\n      this._placeholder = value;\n      this._placeholderChange.emit(this._placeholder);\n    }\n  }\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'type', this._type);\n    }\n  }\n/**\n * A function used to control when error messages are shown.\n */\nerrorStateMatcher: ErrorStateMatcher;\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) { this._elementRef.nativeElement.value = value; }\n/**\n * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n */\n_placeholderChange = new EventEmitter<string>();\n/**\n * Whether the input is empty.\n * @return {?}\n */\nget empty() {\n    return !this._isNeverEmpty() &&\n        (this.value == null || this.value === '') &&\n        // Check if the input contains bad input. If so, we know that it only appears empty because\n        // the value failed to parse. From the user's perspective it is not empty.\n        // TODO(mmalerba): Add e2e test for bad input case.\n        !this._isBadInput();\n  }\n/**\n * @return {?}\n */\nprivate get _uid() { return this._cachedUid = this._cachedUid || `md-input-${nextUniqueId++}`; }\nprivate _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _ngControl\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} errorOptions\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _platform: Platform,\npublic _ngControl: NgControl,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\n                errorOptions: ErrorOptions) {\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    this._errorOptions = errorOptions ? errorOptions : {};\n    this.errorStateMatcher = this._errorOptions.errorStateMatcher || defaultErrorStateMatcher;\n  }\n/**\n * Focuses the input element.\n * @return {?}\n */\nfocus() { this._elementRef.nativeElement.focus(); }\n/**\n * @return {?}\n */\n_onFocus() { this.focused = true; }\n/**\n * @return {?}\n */\n_onBlur() { this.focused = false; }\n/**\n * @return {?}\n */\n_onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n/**\n * Whether the input is in an error state.\n * @return {?}\n */\n_isErrorState(): boolean {\n    const /** @type {?} */ control = this._ngControl;\n    const /** @type {?} */ form = this._parentFormGroup || this._parentForm;\n    return control && this.errorStateMatcher( /** @type {?} */((control.control as FormControl)), form);\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprivate _validateType() {\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) !== -1) {\n      throw getMdInputContainerUnsupportedTypeError(this._type);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _isNeverEmpty() { return this._neverEmptyInputTypes.indexOf(this._type) !== -1; }\n/**\n * @return {?}\n */\nprivate _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let /** @type {?} */ validity = ( /** @type {?} */((this._elementRef.nativeElement as HTMLInputElement))).validity;\n    return validity && validity.badInput;\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprivate _isTextarea() {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let /** @type {?} */ nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\n  host: {\n    'class': 'mat-input-element',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.aria-describedby]': 'ariaDescribedby || null',\n    '[attr.aria-invalid]': '_isErrorState()',\n    '(blur)': '_onBlur()',\n    '(focus)': '_onFocus()',\n    '(input)': '_onInput()',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_ERROR_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'errorStateMatcher': [{ type: Input },],\n'_placeholderChange': [{ type: Output },],\n};\n}\n\nfunction MdInputDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputDirective.ctorParameters;\n/** @type {?} */\nMdInputDirective.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMdInputDirective.prototype._type;\n/** @type {?} */\nMdInputDirective.prototype._placeholder;\n/** @type {?} */\nMdInputDirective.prototype._disabled;\n/** @type {?} */\nMdInputDirective.prototype._required;\n/** @type {?} */\nMdInputDirective.prototype._id;\n/** @type {?} */\nMdInputDirective.prototype._cachedUid;\n/** @type {?} */\nMdInputDirective.prototype._errorOptions;\n/**\n * Whether the element is focused or not.\n * @type {?}\n */\nMdInputDirective.prototype.focused;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMdInputDirective.prototype.ariaDescribedby;\n/**\n * A function used to control when error messages are shown.\n * @type {?}\n */\nMdInputDirective.prototype.errorStateMatcher;\n/**\n * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n * @type {?}\n */\nMdInputDirective.prototype._placeholderChange;\n/** @type {?} */\nMdInputDirective.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMdInputDirective.prototype._elementRef;\n/** @type {?} */\nMdInputDirective.prototype._renderer;\n/** @type {?} */\nMdInputDirective.prototype._platform;\n/** @type {?} */\nMdInputDirective.prototype._ngControl;\n/** @type {?} */\nMdInputDirective.prototype._parentForm;\n/** @type {?} */\nMdInputDirective.prototype._parentFormGroup;\n}\n\n/**\n * Container for text inputs that applies Material Design styling and behavior.\n */\nexport class MdInputContainer implements AfterViewInit, AfterContentInit, AfterContentChecked {\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * Color of the input divider, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use color instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() { return this._floatPlaceholder === 'always'; }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the input hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `md-input-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Reference to the input's underline element.\n */\nunderlineRef: ElementRef;\n\n   _mdInputChild: MdInputDirective;\n\n   _placeholderChild: MdPlaceholder;\n\n   _errorChildren: QueryList<MdErrorDirective>;\n\n   _hintChildren: QueryList<MdHint>;\n\n   _prefixChildren: QueryList<MdPrefix>;\n\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} placeholderOptions\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\n      placeholderOptions: PlaceholderOptions) {\n      this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n      this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n    }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._validateInputChild();\n    this._processHints();\n    this._validatePlaceholders();\n\n    // Re-validate when things change.\n    this._hintChildren.changes.subscribe(() => this._processHints());\n    this._mdInputChild._placeholderChange.subscribe(() => this._validatePlaceholders());\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._validateInputChild();\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ control = this._mdInputChild ? this._mdInputChild._ngControl : null;\n    return control && ( /** @type {?} */((control as any)))[prop];\n  }\n/**\n * Whether the input has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() { return !!(this._mdInputChild.placeholder || this._placeholderChild); }\n/**\n * Focuses the underlying input.\n * @return {?}\n */\n_focusInput() { this._mdInputChild.focus(); }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    let /** @type {?} */ input = this._mdInputChild;\n    return (this._errorChildren.length > 0 && input._isErrorState()) ? 'error' : 'hint';\n  }\n/**\n * Ensure that there is only one placeholder (either `input` attribute or child element with the\n * `md-placeholder` attribute.\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._mdInputChild.placeholder && this._placeholderChild) {\n      throw getMdInputContainerPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncAriaDescribedby();\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MdHint;\n      let /** @type {?} */ endHint: MdHint;\n      this._hintChildren.forEach((hint: MdHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMdInputContainerDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMdInputContainerDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the child input's `aria-describedby` to a space-separated list of the ids\n * of the currently-specified hints, as well as a generated id for the hint label.\n * @return {?}\n */\nprivate _syncAriaDescribedby() {\n    if (this._mdInputChild) {\n      let /** @type {?} */ ids: string[] = [];\n      let /** @type {?} */ startHint = this._hintChildren ?\n          this._hintChildren.find(hint => hint.align === 'start') : null;\n      let /** @type {?} */ endHint = this._hintChildren ?\n          this._hintChildren.find(hint => hint.align === 'end') : null;\n\n      if (startHint) {\n        ids.push(startHint.id);\n      } else if (this._hintLabel) {\n        ids.push(this._hintLabelId);\n      }\n\n      if (endHint) {\n        ids.push(endHint.id);\n      }\n\n      this._mdInputChild.ariaDescribedby = ids.join(' ');\n    }\n  }\n/**\n * Throws an error if the container's input child was removed.\n * @return {?}\n */\nprivate _validateInputChild() {\n    if (!this._mdInputChild) {\n      throw getMdInputContainerMissingMdInputError();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-input-container, mat-input-container',\n  templateUrl: 'input-container.html',\n  styleUrls: ['input-container.css'],\n  animations: [\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n      ])\n    ])\n  ],\n  host: {\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n    'class': 'mat-input-container',\n    '[class.mat-input-invalid]': '_mdInputChild._isErrorState()',\n    '[class.mat-focused]': '_mdInputChild.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '(click)': '_focusInput()',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_mdInputChild': [{ type: ContentChild, args: [MdInputDirective, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdErrorDirective, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdInputContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputContainer.ctorParameters;\n/** @type {?} */\nMdInputContainer.propDecorators;\n/** @type {?} */\nMdInputContainer.prototype._placeholderOptions;\n/**\n * Color of the input divider, based on the theme.\n * @type {?}\n */\nMdInputContainer.prototype.color;\n/** @type {?} */\nMdInputContainer.prototype._hideRequiredMarker;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdInputContainer.prototype._subscriptAnimationState;\n/** @type {?} */\nMdInputContainer.prototype._hintLabel;\n/** @type {?} */\nMdInputContainer.prototype._hintLabelId;\n/** @type {?} */\nMdInputContainer.prototype._floatPlaceholder;\n/**\n * Reference to the input's underline element.\n * @type {?}\n */\nMdInputContainer.prototype.underlineRef;\n/** @type {?} */\nMdInputContainer.prototype._mdInputChild;\n/** @type {?} */\nMdInputContainer.prototype._placeholderChild;\n/** @type {?} */\nMdInputContainer.prototype._errorChildren;\n/** @type {?} */\nMdInputContainer.prototype._hintChildren;\n/** @type {?} */\nMdInputContainer.prototype._prefixChildren;\n/** @type {?} */\nMdInputContainer.prototype._suffixChildren;\n/** @type {?} */\nMdInputContainer.prototype._elementRef;\n/** @type {?} */\nMdInputContainer.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdInputContainerPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nexport function getMdInputContainerUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by md-input-container.`);\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMdInputContainerDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdInputContainerMissingMdInputError(): Error {\n  return Error('md-input-container must contain an mdInput directive. ' +\n                   'Did you forget to add mdInput to the native input or textarea element?');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\nimport {MdProgressBar} from './progress-bar';\nexport class MdProgressBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule],\n  exports: [MdProgressBar, MdCommonModule],\n  declarations: [MdProgressBar],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBarModule.ctorParameters;\n}\n\n\n\nexport {MdProgressBar} from './progress-bar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  HostBinding,\n  Input,\n} from '@angular/core';\n/**\n * <md-progress-bar> component.\n */\nexport class MdProgressBar {\n/**\n * Color of the progress bar.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\nprivate _value: number = 0;\n/**\n * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) { this._value = clamp(v || 0); }\nprivate _bufferValue: number = 0;\n/**\n * Buffer value of the progress bar. Defaults to zero.\n * @return {?}\n */\nget bufferValue() { return this._bufferValue; }\n/**\n * @param {?} v\n * @return {?}\n */\nset bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n */\nmode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n/**\n * Gets the current transform value for the progress bar's primary indicator.\n * @return {?}\n */\n_primaryTransform() {\n    let /** @type {?} */ scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n/**\n * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n * @return {?}\n */\n_bufferTransform() {\n    if (this.mode == 'buffer') {\n      let /** @type {?} */ scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-bar, mat-progress-bar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'bufferValue': [{ type: Input },],\n'mode': [{ type: Input },{ type: HostBinding, args: ['attr.mode', ] },],\n};\n}\n\nfunction MdProgressBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBar.ctorParameters;\n/** @type {?} */\nMdProgressBar.propDecorators;\n/**\n * Color of the progress bar.\n * @type {?}\n */\nMdProgressBar.prototype.color;\n/** @type {?} */\nMdProgressBar.prototype._value;\n/** @type {?} */\nMdProgressBar.prototype._bufferValue;\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n * @type {?}\n */\nMdProgressBar.prototype.mode;\n}\n\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {\n  MdProgressSpinner,\n  MdSpinner,\n  MdProgressSpinnerCssMatStyler,\n} from './progress-spinner';\nclass MdProgressSpinnerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdCommonModule,\n    MdProgressSpinnerCssMatStyler\n  ],\n  declarations: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdProgressSpinnerCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerModule.ctorParameters;\n}\n\n\nexport {MdProgressSpinnerModule};\nexport {PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner} from './progress-spinner';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  HostBinding,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone,\n  Renderer2,\n  Directive,\n  ViewChild,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * A single degree in radians.\n */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nconst startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nconst endIndeterminate = 80;\n/**\n * Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden.\n */\nconst MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nconst HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n/**\n * Default stroke width as a percentage of the viewBox.\n */\nexport const PROGRESS_SPINNER_STROKE_WIDTH = 10;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {'class': 'mat-progress-spinner'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdProgressSpinnerBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdProgressSpinnerBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerBase.prototype._renderer;\n/** @type {?} */\nMdProgressSpinnerBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdProgressSpinnerMixinBase = mixinColor(MdProgressSpinnerBase, 'primary');\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner extends _MdProgressSpinnerMixinBase\n    implements OnDestroy, CanColor {\n/**\n * The id of the last requested animation.\n */\nprivate _lastAnimationId: number = 0;\n/**\n * The id of the indeterminate interval.\n */\nprivate _interdeterminateInterval: number | null;\n/**\n * The SVG <path> node that is used to draw the circle.\n */\nprivate _path: ElementRef;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n */\nstrokeWidth: number = PROGRESS_SPINNER_STROKE_WIDTH;\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n * because voiceover does not report the progress indicator as indeterminate if the aria min\n * and/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number | null) {\n    if (this._interdeterminateInterval) {\n      clearInterval(this._interdeterminateInterval);\n    }\n\n    this._interdeterminateInterval = interval;\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n\n    return 0;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let /** @type {?} */ newValue = clamp(v);\n      this._animateCircle(this.value || 0, newValue);\n      this._value = newValue;\n    }\n  }\n/**\n * Mode of the progress circle\n * \n * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n * mode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() {\n    return this._mode;\n  }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\n    if (mode !== this._mode) {\n      if (mode === 'indeterminate') {\n        this._startIndeterminateAnimation();\n      } else {\n        this._cleanupIndeterminateAnimation();\n        this._animateCircle(0, this._value);\n      }\n      this._mode = mode;\n    }\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _ngZone\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _ngZone: NgZone) {\n    super(renderer, elementRef);\n  }\n/**\n * Animates the circle from one percentage value to another.\n * \n * @param {?} animateFrom The percentage of the circle filled starting the animation.\n * @param {?} animateTo The percentage of the circle filled ending the animation.\n * @param {?=} ease The easing function to manage the pace of change in the animation.\n * @param {?=} duration The length of time to show the animation, in milliseconds.\n * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n *    of the circle.\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\n                        duration = DURATION_DETERMINATE, rotation = 0) {\n\n    let /** @type {?} */ id = ++this._lastAnimationId;\n    let /** @type {?} */ startTime = Date.now();\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let /** @type {?} */ animation = () => {\n        // If there is no requestAnimationFrame, skip ahead to the end of the animation.\n        let /** @type {?} */ elapsedTime = HAS_RAF ?\n            Math.max(0, Math.min(Date.now() - startTime, duration)) :\n            duration;\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\n    let /** @type {?} */ rotationStartPoint = 0;\n    let /** @type {?} */ start = startIndeterminate;\n    let /** @type {?} */ end = endIndeterminate;\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\n    let /** @type {?} */ animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let /** @type {?} */ temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n * DOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\n    if (this._path) {\n      const /** @type {?} */ svgArc = getSvgArc(currentValue, rotation, this.strokeWidth);\n      this._renderer.setAttribute(this._path.nativeElement, 'd', svgArc);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    'role': 'progressbar',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax'\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_path': [{ type: ViewChild, args: ['path', ] },],\n'strokeWidth': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'mode': [{ type: HostBinding, args: ['attr.mode', ] },{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n * @type {?}\n */\nMdProgressSpinner.prototype.strokeWidth;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n}\n\n/**\n * <md-spinner> component.\n * \n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner implements OnDestroy {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n    super(renderer, elementRef, ngZone);\n    this.mode = 'indeterminate';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\n    // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\n    super.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-spinner, mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let /** @type {?} */ time = currentTime / duration;\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n * \n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @param {?} strokeWidth Stroke width of the progress spinner arc.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number, strokeWidth: number): string {\n  let /** @type {?} */ startPoint = rotation || 0;\n  let /** @type {?} */ radius = 50;\n  let /** @type {?} */ pathRadius = radius - strokeWidth;\n\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n  let /** @type {?} */ largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {MdIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\nexport class MdIconModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdIcon, MdCommonModule],\n  declarations: [MdIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconModule.ctorParameters;\n}\n\n\n\nexport {MdIconBase,_MdIconMixinBase,MdIcon} from './icon';\nexport {getMdIconNameNotFoundError,getMdIconNoHttpProviderError,getMdIconFailedToSanitizeError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER} from './icon-registry';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChange,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {MdIconRegistry} from './icon-registry';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {first} from '../core/rxjs/index';\n/**\n * \\@docs-private\n */\nexport class MdIconBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdIconBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconBase.prototype._renderer;\n/** @type {?} */\nMdIconBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdIconMixinBase = mixinColor(MdIconBase);\n/**\n * Component to display an icon. It can be used in the following ways:\n * - Specify the svgSrc input to load an SVG icon from a URL. The SVG content is directly inlined\n *   as a child of the <md-icon> component, so that CSS styles can easily be applied to it.\n *   The URL is loaded via an XMLHttpRequest, so it must be on the same domain as the page or its\n *   server must be configured to allow cross-domain requests.\n *   Example:\n *     <md-icon svgSrc=\"assets/arrow.svg\"></md-icon>\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <md-icon>home</md-icon>\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nexport class MdIcon extends _MdIconMixinBase implements OnChanges, OnInit, CanColor {\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _mdIconRegistry\n * @param {?} ariaHidden\n */\nconstructor(\n      renderer: Renderer2,\n      elementRef: ElementRef,\nprivate _mdIconRegistry: MdIconRegistry,\n       ariaHidden: string) {\n    super(renderer, elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws an error if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws Error)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1:\n        // Use default namespace.\n        return ['', parts[0]];\n      case 2:\n        return /** @type {?} */(( <[string, string]>parts));\n      default:\n        throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: {[propertyName: string]: SimpleChange}) {\n    const /** @type {?} */ changedInputs = Object.keys(changes);\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changedInputs.indexOf('svgIcon') != -1 || changedInputs.indexOf('svgSrc') != -1) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n        first.call(this._mdIconRegistry.getNamedSvgIcon(iconName, namespace)).subscribe(\n            svg => this._setSvgElement(svg),\n            (err: Error) => console.log(`Error retrieving icon: ${err.message}`));\n      }\n    }\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    // Remove existing child nodes and add the new SVG element.\n    // We would use renderer.detachView(Array.from(layoutElement.childNodes)) here,\n    // but it fails in IE11: https://github.com/angular/angular/issues/6327\n    layoutElement.innerHTML = '';\n    this._renderer.appendChild(layoutElement, svg);\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\n        this._mdIconRegistry.getDefaultFontSetClass();\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.removeClass(elem, this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        this._renderer.addClass(elem, fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.removeClass(elem, this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        this._renderer.addClass(elem, this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'md-icon, mat-icon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdIconRegistry, },\n{type: undefined, decorators: [{ type: Attribute, args: ['aria-hidden', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n};\n}\n\nfunction MdIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIcon.ctorParameters;\n/** @type {?} */\nMdIcon.propDecorators;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMdIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMdIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMdIcon.prototype.fontIcon;\n/** @type {?} */\nMdIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMdIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMdIcon.prototype._mdIconRegistry;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, SecurityContext, Optional, SkipSelf} from '@angular/core';\nimport {SafeResourceUrl, DomSanitizer} from '@angular/platform-browser';\nimport {Http} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {RxChain, map, doOperator, catchOperator, finallyOperator, share} from '../core/rxjs/index';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nexport function getMdIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<md-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdIconNoHttpProviderError(): Error {\n  return Error('Could not find Http provider for use with Angular Material icons. ' +\n               'Please include the HttpModule from @angular/http in your app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nexport function getMdIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MdIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Service to register and display icons used by the <md-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MdIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(\nprivate _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n/**\n * Registers an icon by URL in the specified namespace.\n * @param {?} namespace Namespace in which the icon should be registered.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n/**\n * Registers an icon set by URL in the default namespace.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\n * @param {?} namespace Namespace in which to register the icon set.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ config = new SvgIconConfig(url);\n    const /** @type {?} */ configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\n * component with the alias as the fontSet input will cause the class name to be applied\n * to the <md-icon> element.\n * \n * @param {?} alias Alias for the font.\n * @param {?=} className Class name override to be used instead of the alias.\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\n * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * \n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n * The response from the URL may be cached so this will not always cause an HTTP request, but\n * the produced element will always be a new copy of the originally fetched icon. (That is,\n * it will not contain any modifications made to elements previously returned).\n * \n * @param {?} safeUrl URL from which to fetch the SVG icon.\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMdIconFailedToSanitizeError(safeUrl);\n    }\n\n    let /** @type {?} */ cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return RxChain.from(this._loadSvgIconFromConfig(new SvgIconConfig(url)))\n      .call(doOperator, svg => this._cachedIconsByUrl.set( /** @type {?} */((url)), svg))\n      .call(map, svg => cloneSvg(svg))\n      .result();\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n * if not, the Observable will throw an error.\n * \n * @param {?} name Name of the icon to be retrieved.\n * @param {?=} namespace Namespace in which to look for the icon.\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const /** @type {?} */ key = iconKey(namespace, name);\n    const /** @type {?} */ config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMdIconNameNotFoundError(key));\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return RxChain.from(this._loadSvgIconFromConfig(config))\n          .call(doOperator, svg => config.svgElement = svg)\n          .call(map, svg => cloneSvg(svg))\n          .result();\n    }\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\n * First searches the available cached icons for a nested element with a matching name, and\n * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n * that have not been cached, and searches again after all fetches are completed.\n * The returned Observable produces the SVG element if possible, and throws\n * an error if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return RxChain.from(this._loadSvgIconSetFromConfig(iconSetConfig))\n          .call(catchOperator, (err: any): Observable<SVGElement | null> => {\n            let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n          .call(doOperator, svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n          .result();\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return map.call(forkJoin.call(Observable, iconSetFetchRequests), () => {\n      const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMdIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    });\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const /** @type {?} */ config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._createSvgElementForSingleIcon(svgText));\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n      // TODO: Document that icons should only be loaded from trusted sources.\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._svgElementFromString(svgText));\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n\n    if (!iconNode) {\n      return null;\n    }\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconNode.tagName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconNode.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconNode));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconNode.cloneNode(true));\n\n    return this._setSvgAttributes(svg);\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n    // creating an element from an HTML string.\n    const /** @type {?} */ div = document.createElement('DIV');\n    div.innerHTML = str;\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n/**\n * Converts an element into an SVG node by cloning all of its children.\n * @param {?} element\n * @return {?}\n */\nprivate _toSvgElement(element: Element): SVGElement {\n    let /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n\n    for (let /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\n * cached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._http) {\n      throw getMdIconNoHttpProviderError();\n    }\n\n    const /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMdIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const /** @type {?} */ inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const /** @type {?} */ req = RxChain.from(this._http.get(url))\n      .call(map, response => response.text())\n      .call(finallyOperator, () => this._inProgressUrlFetches.delete(url))\n      .call(share)\n      .result();\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Optional }, ]},\n{type: DomSanitizer, },\n];\n}\n\nfunction MdIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMdIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMdIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMdIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMdIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMdIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMdIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMdIconRegistry.prototype._http;\n/** @type {?} */\nMdIconRegistry.prototype._sanitizer;\n}\n\n/**\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MdIconRegistry, http: Http, sanitizer: DomSanitizer) {\n  return parentRegistry || new MdIconRegistry(http, sanitizer);\n}\n\nexport const /** @type {?} */ ICON_REGISTRY_PROVIDER = {\n  // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MdIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MdIconRegistry], [new Optional(), Http], DomSanitizer],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdChipList} from './chip-list';\nimport {MdChip, MdBasicChip} from './chip';\nexport class MdChipsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [],\n  exports: [MdChipList, MdChip, MdBasicChip],\n  declarations: [MdChipList, MdChip, MdBasicChip]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipsModule.ctorParameters;\n}\n\n\n\nexport {MdChipList} from './chip-list';\nexport {MdChipEvent,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip} from './chip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Input,\n  QueryList,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\n\nimport {MdChip} from './chip';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {SPACE, LEFT_ARROW, RIGHT_ARROW, TAB} from '../core/keyboard/keycodes';\nimport {coerceBooleanProperty} from '@angular/cdk';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n * \n * Example:\n * \n *     <md-chip-list>\n *       <md-chip>Chip 1<md-chip>\n *       <md-chip>Chip 2<md-chip>\n *     </md-chip-list>\n */\nexport class MdChipList implements AfterContentInit, OnDestroy {\n/**\n * Track which chips we're listening to for focus/destruction.\n */\nprivate _subscribed: WeakMap<MdChip, boolean> = new WeakMap();\n/**\n * Subscription to tabbing out from the chip list.\n */\nprivate _tabOutSubscription: Subscription;\n/**\n * Whether or not the chip is selectable.\n */\nprotected _selectable: boolean = true;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager;\n/**\n * The chip components contained within this chip list.\n */\nchips: QueryList<MdChip>;\n/**\n * Tab index for the chip list.\n */\n_tabIndex = 0;\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = 0);\n    });\n\n    // Go ahead and subscribe all of the initial chips\n    this._subscribeChips(this.chips);\n\n    // When the list changes, re-subscribe\n    this.chips.changes.subscribe((chips: QueryList<MdChip>) => {\n      this._subscribeChips(chips);\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._tabOutSubscription) {\n      this._tabOutSubscription.unsubscribe();\n    }\n  }\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\n * it's selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean { return this._selectable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n/**\n * Programmatically focus the chip list. This in turn focuses the first\n * non-disabled chip in this chip list.\n * @return {?}\n */\nfocus() {\n    // TODO: ARIA says this should focus the first `selected` chip.\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * Passes relevant key presses to our key manager.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager\n    if (target && target.classList.contains('mat-chip')) {\n      switch (event.keyCode) {\n        case SPACE:\n          // If we are selectable, toggle the focused chip\n          if (this.selectable) {\n            this._toggleSelectOnFocusedChip();\n          }\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n          break;\n        case LEFT_ARROW:\n          this._keyManager.setPreviousItemActive();\n          event.preventDefault();\n          break;\n        case RIGHT_ARROW:\n          this._keyManager.setNextItemActive();\n          event.preventDefault();\n          break;\n        default:\n          this._keyManager.onKeydown(event);\n      }\n    }\n  }\n/**\n * Toggles the selected state of the currently focused chip.\n * @return {?}\n */\nprotected _toggleSelectOnFocusedChip(): void {\n    // Allow disabling of chip selection\n    if (!this.selectable) {\n      return;\n    }\n\n    let /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n\n    if (typeof focusedIndex === 'number' && this._isValidIndex(focusedIndex)) {\n      let /** @type {?} */ focusedChip: MdChip = this.chips.toArray()[focusedIndex];\n\n      if (focusedChip) {\n        focusedChip.toggleSelected();\n      }\n    }\n  }\n/**\n * Iterate through the list of chips and add them to our list of\n * subscribed chips.\n * \n * @param {?} chips The list of chips to be subscribed.\n * @return {?}\n */\nprotected _subscribeChips(chips: QueryList<MdChip>): void {\n    chips.forEach(chip => this._addChip(chip));\n  }\n/**\n * Add a specific chip to our subscribed list. If the chip has\n * already been subscribed, this ensures it is only subscribed\n * once.\n * \n * @param {?} chip The chip to be subscribed (or checked for existing\n * subscription).\n * @return {?}\n */\nprotected _addChip(chip: MdChip) {\n    // If we've already been subscribed to a parent, do nothing\n    if (this._subscribed.has(chip)) {\n      return;\n    }\n\n    // Watch for focus events outside of the keyboard navigation\n    chip.onFocus.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n    });\n\n    // On destroy, remove the item from our list, and check focus\n    chip.destroy.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        // Check whether the chip is the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n\n      this._subscribed.delete(chip);\n      chip.destroy.unsubscribe();\n    });\n\n    this._subscribed.set(chip, true);\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of chips.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-chip-list, mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  host: {\n    // Properties\n    '[attr.tabindex]': '_tabIndex',\n    'role': 'listbox',\n    'class': 'mat-chip-list',\n\n    // Events\n    '(focus)': 'focus()',\n    '(keydown)': '_keydown($event)'\n  },\n  queries: {\n    chips: new ContentChildren(MdChip)\n  },\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selectable': [{ type: Input },],\n};\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/** @type {?} */\nMdChipList.propDecorators;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._subscribed;\n/**\n * Subscription to tabbing out from the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabOutSubscription;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChipList.prototype._selectable;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/**\n * Tab index for the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabIndex;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n} from '@angular/core';\n\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '@angular/cdk';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\n/**\n * \\@docs-private\n */\nexport class MdChipBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdChipBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipBase.prototype._renderer;\n/** @type {?} */\nMdChipBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdChipMixinBase = mixinColor(mixinDisabled(MdChipBase), 'primary');\n/**\n * Dummy directive to add CSS class to basic chips.\n * \\@docs-private\n */\nexport class MdBasicChip { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdBasicChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdBasicChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdBasicChip.ctorParameters;\n}\n\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip extends _MdChipMixinBase implements Focusable, OnDestroy, CanColor, CanDisable {\n/**\n * Whether the chip is selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    (this.selected ? this.select : this.deselect).emit({chip: this});\n  }\n  protected _selected: boolean = false;\n/**\n * Whether the chip has focus.\n */\n_hasFocus: boolean = false;\n/**\n * Emitted when the chip is focused.\n */\nonFocus = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is selected.\n */\nselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is deselected.\n */\ndeselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroy = new EventEmitter<MdChipEvent>();\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroy.emit({chip: this});\n  }\n/**\n * Toggles the current selected state of this chip.\n * @return {?} Whether the chip is selected.\n */\ntoggleSelected(): boolean {\n    this.selected = !this.selected;\n    return this.selected;\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n    this.onFocus.emit({chip: this});\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      this.focus();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  host: {\n    'class': 'mat-chip',\n    'tabindex': '-1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_handleClick($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_hasFocus = false',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selected': [{ type: Input },],\n'select': [{ type: Output },],\n'deselect': [{ type: Output },],\n'destroy': [{ type: Output },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/** @type {?} */\nMdChip.prototype._selected;\n/**\n * Whether the chip has focus.\n * @type {?}\n */\nMdChip.prototype._hasFocus;\n/**\n * Emitted when the chip is focused.\n * @type {?}\n */\nMdChip.prototype.onFocus;\n/**\n * Emitted when the chip is selected.\n * @type {?}\n */\nMdChip.prototype.select;\n/**\n * Emitted when the chip is deselected.\n * @type {?}\n */\nMdChip.prototype.deselect;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {\n  MdCard,\n  MdCardHeader,\n  MdCardTitleGroup,\n  MdCardContent,\n  MdCardTitle,\n  MdCardSubtitle,\n  MdCardActions,\n  MdCardFooter,\n  MdCardSmImage,\n  MdCardMdImage,\n  MdCardLgImage,\n  MdCardImage,\n  MdCardXlImage,\n  MdCardAvatar,\n} from './card';\nexport class MdCardModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdCard,\n    MdCardHeader,\n    MdCardTitleGroup,\n    MdCardContent,\n    MdCardTitle,\n    MdCardSubtitle,\n    MdCardActions,\n    MdCardFooter,\n    MdCardSmImage,\n    MdCardMdImage,\n    MdCardLgImage,\n    MdCardImage,\n    MdCardXlImage,\n    MdCardAvatar,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n    MdCardActions, MdCardFooter, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardImage,\n    MdCardXlImage, MdCardAvatar,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardModule.ctorParameters;\n}\n\n\n\nexport {MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardImage,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup} from './card';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive\n} from '@angular/core';\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardContent {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-content, mat-card-content',\n  host: {'class': 'mat-card-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardContent.ctorParameters;\n}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-title, mat-card-title, [md-card-title], [mat-card-title],' +\n  '[mdCardTitle], [matCardTitle]',\n  host: {\n    'class': 'mat-card-title '\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitle.ctorParameters;\n}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardSubtitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-subtitle, mat-card-subtitle, [md-card-subtitle], [mat-card-subtitle],' +\n  '[mdCardSubtitle], [matCardSubtitle]',\n  host: {\n    'class': 'mat-card-subtitle '\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSubtitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSubtitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSubtitle.ctorParameters;\n}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardActions {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-actions, mat-card-actions',\n  host: {'class': 'mat-card-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardActions.ctorParameters;\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardFooter {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-footer, mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardFooter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardFooter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardFooter.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-image], [mat-card-image], [mdCardImage], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardSmImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-sm-image], [mat-card-sm-image], [mdCardImageSmall], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSmImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSmImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSmImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardMdImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-md-image], [mat-card-md-image], [mdCardImageMedium], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardMdImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardMdImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardMdImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardLgImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-lg-image], [mat-card-lg-image], [mdCardImageLarge], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardLgImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardLgImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardLgImage.ctorParameters;\n}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardXlImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-xl-image], [mat-card-xl-image], [mdCardImageXLarge], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardXlImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardXlImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardXlImage.ctorParameters;\n}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardAvatar {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-avatar], [mat-card-avatar], [mdCardAvatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardAvatar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardAvatar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardAvatar.ctorParameters;\n}\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n * \n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - md-card-title\n * - md-card-subtitle\n * - md-card-content\n * - md-card-actions\n * - md-card-footer\n */\nexport class MdCard {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card, mat-card',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCard_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCard.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCard.ctorParameters;\n}\n\n/**\n * Component intended to be used within the `<md-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nexport class MdCardHeader {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-header, mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardHeader.ctorParameters;\n}\n\n/**\n * Component intended to be used within the <md-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nexport class MdCardTitleGroup {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-title-group, mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitleGroup.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdLineModule, MdCommonModule} from '../core';\nimport {\n  MdGridTile, MdGridTileText, MdGridTileFooterCssMatStyler,\n  MdGridTileHeaderCssMatStyler, MdGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MdGridList} from './grid-list';\nexport class MdGridListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdCommonModule],\n  exports: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdLineModule,\n    MdCommonModule,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridListModule.ctorParameters;\n}\n\n\n\nexport {MdGridList} from './grid-list';\nexport {MdGridTile} from './grid-tile';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer2,\n  ElementRef,\n  Optional,\n} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '../core';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst /** @type {?} */ MD_FIT_MODE = 'fit';\nexport class MdGridList implements OnInit, AfterContentChecked {\n/**\n * Number of columns being rendered.\n */\nprivate _cols: number;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n */\nprivate _rowHeight: string;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n */\nprivate _gutter: string = '1px';\n/**\n * Sets position and size styles for a tile\n */\nprivate _tileStyler: TileStyler;\n/**\n * Query list of tiles that are being rendered.\n */\n_tiles: QueryList<MdGridTile>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _dir\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _dir: Directionality) {}\n/**\n * Amount of columns in the grid list.\n * @return {?}\n */\nget cols() { return this._cols; }\n/**\n * @param {?} value\n * @return {?}\n */\nset cols(value: any) { this._cols = coerceToNumber(value); }\n/**\n * Size of the grid list's gutter in pixels.\n * @return {?}\n */\nget gutterSize() { return this._gutter; }\n/**\n * @param {?} value\n * @return {?}\n */\nset gutterSize(value: any) { this._gutter = coerceToString(value); }\n/**\n * Set internal representation of row height from the user-provided value.\n * @param {?} value\n * @return {?}\n */\nset rowHeight(value: string | number) {\n    this._rowHeight = coerceToString(value);\n    this._setTileStyler();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n/**\n * The layout calculation is fairly cheap if nothing changes, so there's little cost\n * to run it frequently.\n * @return {?}\n */\nngAfterContentChecked() {\n    this._layoutTiles();\n  }\n/**\n * Throw a friendly error if cols property is missing\n * @return {?}\n */\nprivate _checkCols() {\n    if (!this.cols) {\n      throw Error(`md-grid-list: must pass in number of columns. ` +\n                      `Example: <md-grid-list cols=\"3\">`);\n    }\n  }\n/**\n * Default to equal width:height if rowHeight property is missing\n * @return {?}\n */\nprivate _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._tileStyler = new RatioTileStyler('1:1');\n    }\n  }\n/**\n * Creates correct Tile Styler subtype based on rowHeight passed in by user\n * @return {?}\n */\nprivate _setTileStyler(): void {\n    if (this._rowHeight === MD_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(this._rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(this._rowHeight);\n    }\n  }\n/**\n * Computes and applies the size and position for all children grid tiles.\n * @return {?}\n */\nprivate _layoutTiles(): void {\n    let /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n    let /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      let /** @type {?} */ pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n/**\n * Sets style on the main grid-list element, given the style name and value.\n * @param {?} style\n * @return {?}\n */\n_setListStyle(style: [string, string] | null): void {\n    if (style) {\n      this._renderer.setStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-list, mat-grid-list',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'role': 'list',\n    'class': 'mat-grid-list',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tiles': [{ type: ContentChildren, args: [MdGridTile, ] },],\n'cols': [{ type: Input },],\n'gutterSize': [{ type: Input },],\n'rowHeight': [{ type: Input },],\n};\n}\n\nfunction MdGridList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridList.ctorParameters;\n/** @type {?} */\nMdGridList.propDecorators;\n/**\n * Number of columns being rendered.\n * @type {?}\n */\nMdGridList.prototype._cols;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n * @type {?}\n */\nMdGridList.prototype._rowHeight;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n * @type {?}\n */\nMdGridList.prototype._gutter;\n/**\n * Sets position and size styles for a tile\n * @type {?}\n */\nMdGridList.prototype._tileStyler;\n/**\n * Query list of tiles that are being rendered.\n * @type {?}\n */\nMdGridList.prototype._tiles;\n/** @type {?} */\nMdGridList.prototype._renderer;\n/** @type {?} */\nMdGridList.prototype._element;\n/** @type {?} */\nMdGridList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n/**\n * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n * because these properties haven't been calculated by that point.\n * \n * @param {?} gutterSize Size of the grid's gutter.\n * @param {?} tracker Instance of the TileCoordinator.\n * @param {?} cols Amount of columns in the grid.\n * @param {?} direction Layout direction of the grid.\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n/**\n * Computes the amount of space a single 1x1 tile would take up (width or height).\n * Used as a basis for other calculations.\n * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n */\ngetBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - ( ${this._gutterSize} * ${gutterFraction} ))`;\n  }\n/**\n * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} offset Number of tiles that have already been rendered in the row/column.\n * @return {?} Position of the tile as a CSS calc() expression.\n */\ngetTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n/**\n * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} span The tile's rowspan or colspan.\n * @return {?} Size of the tile as a CSS calc() expression.\n */\ngetTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n/**\n * Sets the style properties to be applied to a tile for the given row and column index.\n * @param {?} tile Tile to which to apply the styling.\n * @param {?} rowIndex Index of the tile's row.\n * @param {?} colIndex Index of the tile's column.\n * @return {?}\n */\nsetStyle(tile: MdGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n/**\n * Sets the horizontal placement of the tile in the list.\n * @param {?} tile\n * @param {?} colIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetColStyles(tile: MdGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n/**\n * Calculates the total size taken up by gutters across one axis of a list.\n * @return {?}\n */\ngetGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n/**\n * Calculates the total size taken up by tiles across one axis of a list.\n * @param {?} tileHeight Height of the tile.\n * @return {?}\n */\ngetTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n/**\n * Sets the vertical placement of the tile in the list.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @abstract\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number) {}\n/**\n * Calculates the computed height and returns the correct style property to set.\n * This method can be implemented by each type of TileStyler.\n * \\@docs-private\n * @return {?}\n */\ngetComputedHeight(): [string, string] | null { return null; }\n}\n\nfunction TileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nTileStyler.prototype._gutterSize;\n/** @type {?} */\nTileStyler.prototype._rows;\n/** @type {?} */\nTileStyler.prototype._rowspan;\n/** @type {?} */\nTileStyler.prototype._cols;\n/** @type {?} */\nTileStyler.prototype._direction;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n/**\n * @param {?} fixedRowHeight\n */\nconstructor(public fixedRowHeight: string) { super(); }\n/**\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n}\n\nfunction FixedTileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nFixedTileStyler.prototype.fixedRowHeight;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n/**\n * Ratio width:height given by user to determine row height.\n */\nrowHeightRatio: number;\n  baseTileHeight: string;\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use paddingTop and marginTop to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _parseRatio(value: string): void {\n    let /** @type {?} */ ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`md-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\nfunction RatioTileStyler_tsickle_Closure_declarations() {\n/**\n * Ratio width:height given by user to determine row height.\n * @type {?}\n */\nRatioTileStyler.prototype.rowHeightRatio;\n/** @type {?} */\nRatioTileStyler.prototype.baseTileHeight;\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n * \n * \\@docs-private\n */\nexport class FitTileStyler extends TileStyler {\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n * \n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n * \n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n * \n * \\@docs-private\n */\nexport class TileCoordinator {\n/**\n * Tracking array (see class description).\n */\ntracker: number[];\n/**\n * Index at which the search for the next gap will start.\n */\ncolumnIndex: number = 0;\n/**\n * The current row index.\n */\nrowIndex: number = 0;\n/**\n * Gets the total number of rows occupied by tiles\n * @return {?}\n */\nget rowCount(): number { return this.rowIndex + 1; }\n/**\n * Gets the total span of rows occupied by tiles.\n * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n * @return {?}\n */\nget rowspan() {\n    let /** @type {?} */ lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n/**\n * The computed (row, col) position of each tile (the output).\n */\npositions: TilePosition[];\n/**\n * @param {?} numColumns\n * @param {?} tiles\n */\nconstructor(numColumns: number, tiles: QueryList<MdGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n/**\n * Calculates the row and col position of a tile.\n * @param {?} tile\n * @return {?}\n */\nprivate _trackTile(tile: MdGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n/**\n * Finds the next available space large enough to fit the tile.\n * @param {?} tileCols\n * @return {?}\n */\nprivate _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`md-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let /** @type {?} */ gapStartIndex = -1;\n    let /** @type {?} */ gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n/**\n * Move \"down\" to the next row.\n * @return {?}\n */\nprivate _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n/**\n * Finds the end index (exclusive) of a gap given the index from which to start looking.\n * The gap ends when a non-zero value is found.\n * @param {?} gapStartIndex\n * @return {?}\n */\nprivate _findGapEndIndex(gapStartIndex: number): number {\n    for (let /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n/**\n * Update the tile tracker to account for the given tile in the given space.\n * @param {?} start\n * @param {?} tile\n * @return {?}\n */\nprivate _markTilePosition(start: number, tile: MdGridTile): void {\n    for (let /** @type {?} */ i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\nfunction TileCoordinator_tsickle_Closure_declarations() {\n/**\n * Tracking array (see class description).\n * @type {?}\n */\nTileCoordinator.prototype.tracker;\n/**\n * Index at which the search for the next gap will start.\n * @type {?}\n */\nTileCoordinator.prototype.columnIndex;\n/**\n * The current row index.\n * @type {?}\n */\nTileCoordinator.prototype.rowIndex;\n/**\n * The computed (row, col) position of each tile (the output).\n * @type {?}\n */\nTileCoordinator.prototype.positions;\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nexport class TilePosition {\n/**\n * @param {?} row\n * @param {?} col\n */\nconstructor(public row: number,\npublic col: number) {}\n}\n\nfunction TilePosition_tsickle_Closure_declarations() {\n/** @type {?} */\nTilePosition.prototype.row;\n/** @type {?} */\nTilePosition.prototype.col;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Renderer2,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit, Directive\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '../core';\nimport {coerceToNumber} from './grid-list-measure';\nexport class MdGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * Amount of rows that the grid tile takes up.\n * @return {?}\n */\nget rowspan() { return this._rowspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset rowspan(value) { this._rowspan = coerceToNumber(value); }\n/**\n * Amount of columns that the grid tile takes up.\n * @return {?}\n */\nget colspan() { return this._colspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset colspan(value) { this._colspan = coerceToNumber(value); }\n/**\n * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n * \"Changed after checked\" errors that would occur with HostBinding.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\n_setStyle(property: string, value: string): void {\n    this._renderer.setStyle(this._element.nativeElement, property, value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile, mat-grid-tile',\n  host: {\n    'role': 'listitem',\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'rowspan': [{ type: Input },],\n'colspan': [{ type: Input },],\n};\n}\n\nfunction MdGridTile_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTile.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTile.ctorParameters;\n/** @type {?} */\nMdGridTile.propDecorators;\n/** @type {?} */\nMdGridTile.prototype._rowspan;\n/** @type {?} */\nMdGridTile.prototype._colspan;\n/** @type {?} */\nMdGridTile.prototype._renderer;\n/** @type {?} */\nMdGridTile.prototype._element;\n}\n\nexport class MdGridTileText implements AfterContentInit {\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n */\n_lineSetter: MdLineSetter;\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n};\n}\n\nfunction MdGridTileText_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileText.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileText.ctorParameters;\n/** @type {?} */\nMdGridTileText.propDecorators;\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n * @type {?}\n */\nMdGridTileText.prototype._lineSetter;\n/** @type {?} */\nMdGridTileText.prototype._lines;\n/** @type {?} */\nMdGridTileText.prototype._renderer;\n/** @type {?} */\nMdGridTileText.prototype._element;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-grid-avatar], [mat-grid-avatar], [mdGridAvatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileHeaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-header, mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileHeaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileHeaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileHeaderCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileFooterCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-footer, mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileFooterCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileFooterCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileFooterCssMatStyler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdLineModule, MdRippleModule, MdCommonModule} from '../core';\nimport {\n  MdList,\n  MdListItem,\n  MdListDivider,\n  MdListAvatarCssMatStyler,\n  MdListIconCssMatStyler,\n  MdListCssMatStyler,\n  MdNavListCssMatStyler,\n  MdDividerCssMatStyler,\n  MdListSubheaderCssMatStyler,\n} from './list';\nexport class MdListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdRippleModule, MdCommonModule],\n  exports: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdLineModule,\n    MdCommonModule,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n  ],\n  declarations: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListModule.ctorParameters;\n}\n\n\n\nexport {MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem} from './list';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  Optional,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty, MdLine, MdLineSetter} from '../core';\nexport class MdListDivider {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {\n    'role': 'separator',\n    'aria-orientation': 'horizontal'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListDivider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListDivider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListDivider.ctorParameters;\n}\n\nexport class MdList {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect should be disabled on the list-items or not.\n * This flag only has an effect for `md-nav-list` components.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) { this._disableRipple = coerceBooleanProperty(value); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\n  host: {'role': 'list'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n};\n}\n\nfunction MdList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdList.ctorParameters;\n/** @type {?} */\nMdList.propDecorators;\n/** @type {?} */\nMdList.prototype._disableRipple;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-list, mat-list',\n  host: {'class': 'mat-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdNavListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-nav-list, mat-nav-list',\n  host: {'class': 'mat-nav-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNavListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNavListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNavListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdDividerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {'class': 'mat-divider'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDividerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDividerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDividerCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-avatar], [mat-list-avatar], [mdListAvatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListIconCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-icon], [mat-list-icon], [mdListIcon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListIconCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListIconCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListIconCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListSubheaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-subheader], [mat-subheader]',\n  host: {'class': 'mat-subheader'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListSubheaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListSubheaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListSubheaderCssMatStyler.ctorParameters;\n}\n\nexport class MdListItem implements AfterContentInit {\nprivate _lineSetter: MdLineSetter;\nprivate _disableRipple: boolean = false;\nprivate _isNavList: boolean = false;\n/**\n * Whether the ripple effect on click should be disabled. This applies only to list items that are\n * part of a nav list. The value of `disableRipple` on the `md-nav-list` overrides this flag.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) { this._disableRipple = coerceBooleanProperty(value); }\n\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} avatar\n * @return {?}\n */\nset _hasAvatar(avatar: MdListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-list-item-avatar');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-avatar');\n    }\n  }\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _list\n * @param {?} navList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _list: MdList,\n               navList: MdNavListCssMatStyler) {\n    this._isNavList = !!navList;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\nisRippleEnabled() {\n    return !this.disableRipple && this._isNavList && !this._list.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._renderer.addClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\n  host: {\n    'role': 'listitem',\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdList, decorators: [{ type: Optional }, ]},\n{type: MdNavListCssMatStyler, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'_hasAvatar': [{ type: ContentChild, args: [MdListAvatarCssMatStyler, ] },],\n};\n}\n\nfunction MdListItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListItem.ctorParameters;\n/** @type {?} */\nMdListItem.propDecorators;\n/** @type {?} */\nMdListItem.prototype._lineSetter;\n/** @type {?} */\nMdListItem.prototype._disableRipple;\n/** @type {?} */\nMdListItem.prototype._isNavList;\n/** @type {?} */\nMdListItem.prototype._lines;\n/** @type {?} */\nMdListItem.prototype._renderer;\n/** @type {?} */\nMdListItem.prototype._element;\n/** @type {?} */\nMdListItem.prototype._list;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\nimport {A11yModule} from '../core/a11y/index';\nimport {OverlayModule} from '../core/overlay/index';\nimport {MdSidenav, MdSidenavContainer} from './sidenav';\nexport class MdSidenavModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule, A11yModule, OverlayModule],\n  exports: [MdSidenavContainer, MdSidenav, MdCommonModule],\n  declarations: [MdSidenavContainer, MdSidenav],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavModule.ctorParameters;\n}\n\n\n\nexport {throwMdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer} from './sidenav';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Renderer2,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy,\n  Inject,\n} from '@angular/core';\nimport {Directionality, coerceBooleanProperty} from '../core';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {first} from '../core/rxjs/index';\nimport {DOCUMENT} from '@angular/platform-browser';\n/**\n * Throws an exception when two MdSidenav are matching the same side.\n * @param {?} align\n * @return {?}\n */\nexport function throwMdDuplicatedSidenavError(align: string) {\n  throw Error(`A sidenav was already declared for 'align=\"${align}\"'`);\n}\n/**\n * Sidenav toggle promise result.\n */\nexport class MdSidenavToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\n}\n\nfunction MdSidenavToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavToggleResult.prototype.type;\n/** @type {?} */\nMdSidenavToggleResult.prototype.animationFinished;\n}\n\n/**\n * <md-sidenav> component.\n * \n * This component corresponds to the drawer of the sidenav.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdSidenav implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\n/**\n * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n */\nprivate _align: 'start' | 'end' = 'start';\n/**\n * Direction which the sidenav is aligned in.\n * @return {?}\n */\nget align() { return this._align; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) {\n    // Make sure we have a valid value.\n    value = (value == 'end') ? 'end' : 'start';\n    if (value != this._align) {\n      this._align = value;\n      this.onAlignChanged.emit();\n    }\n  }\n/**\n * Mode of the sidenav; one of 'over', 'push' or 'side'.\n */\nmode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the sidenav can be closed with the escape key or not.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n/**\n * Whether the sidenav is opened.\n */\n_opened: boolean = false;\n/**\n * Event emitted when the sidenav is being opened. Use this to synchronize animations.\n */\nonOpenStart = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is fully opened.\n */\nonOpen = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is being closed. Use this to synchronize animations.\n */\nonCloseStart = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is fully closed.\n */\nonClose = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav alignment changes.\n */\nonAlignChanged = new EventEmitter<void>();\n/**\n * The current toggle animation promise. `null` if no animation is in progress.\n */\nprivate _toggleAnimationPromise: Promise<MdSidenavToggleResult> | null = null;\n/**\n * The current toggle animation promise resolution function.\n * `null` if no animation is in progress.\n */\nprivate _resolveToggleAnimationPromise: ((animationFinished: boolean) => void) | null = null;\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\n    // The focus trap is only enabled when the sidenav is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n/**\n * @param {?} _elementRef The DOM element reference. Used for transition and width calculation.\n *     If not available we do not hook on transitions.\n * @param {?} _focusTrapFactory\n * @param {?} _doc\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _doc: any) {\n    this.onOpen.subscribe(() => {\n      if (this._doc) {\n        this._elementFocusedBeforeSidenavWasOpened = this._doc.activeElement as HTMLElement;\n      }\n\n      if (this.isFocusTrapEnabled && this._focusTrap) {\n        this._focusTrap.focusInitialElementWhenReady();\n      }\n    });\n\n    this.onClose.subscribe(() => this._restoreFocus());\n  }\n/**\n * If focus is currently inside the sidenav, restores it to where it was before the sidenav\n * opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    let /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeSidenavWasOpened instanceof HTMLElement) {\n        this._elementFocusedBeforeSidenavWasOpened.focus();\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeSidenavWasOpened = null;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\n\n    // This can happen when the sidenav is set to opened in\n    // the template and the transition hasn't ended.\n    if (this._toggleAnimationPromise && this._resolveToggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(true);\n      this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Whether the sidenav is opened. We overload this because we trigger an event when it\n * starts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n/**\n * Open this sidenav, and return a Promise that will resolve when it's fully opened (or get\n * rejected if it didn't).\n * @return {?}\n */\nopen(): Promise<MdSidenavToggleResult> {\n    return this.toggle(true);\n  }\n/**\n * Close this sidenav, and return a Promise that will resolve when it's fully closed (or get\n * rejected if it didn't).\n * @return {?}\n */\nclose(): Promise<MdSidenavToggleResult> {\n    return this.toggle(false);\n  }\n/**\n * Toggle this sidenav. This is equivalent to calling open() when it's already opened, or\n * close() when it's closed.\n * @param {?=} isOpen Whether the sidenav should be open.\n * @return {?} Resolves with the result of whether the sidenav was opened or closed.\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MdSidenavToggleResult> {\n    // Shortcut it if we're already opened.\n    if (isOpen === this.opened) {\n      return this._toggleAnimationPromise ||\n          Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));\n    }\n\n    this._opened = isOpen;\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this.isFocusTrapEnabled;\n    }\n\n    if (isOpen) {\n      this.onOpenStart.emit();\n    } else {\n      this.onCloseStart.emit();\n    }\n\n    if (this._toggleAnimationPromise && this._resolveToggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(false);\n    }\n    this._toggleAnimationPromise = new Promise<MdSidenavToggleResult>(resolve => {\n      this._resolveToggleAnimationPromise = animationFinished =>\n          resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', animationFinished));\n    });\n    return this._toggleAnimationPromise;\n  }\n/**\n * Handles the keyboard events.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n/**\n * When transition has finished, set the internal state for classes and emit the proper event.\n * The event passed is actually of type TransitionEvent, but that type is not available in\n * Android so we use any.\n * @param {?} transitionEvent\n * @return {?}\n */\n_onTransitionEnd(transitionEvent: TransitionEvent) {\n    if (transitionEvent.target == this._elementRef.nativeElement\n        // Simpler version to check for prefixes.\n        && transitionEvent.propertyName.endsWith('transform')) {\n      if (this._opened) {\n        this.onOpen.emit();\n      } else {\n        this.onClose.emit();\n      }\n\n      if (this._toggleAnimationPromise && this._resolveToggleAnimationPromise) {\n        this._resolveToggleAnimationPromise(true);\n        this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n      }\n    }\n  }\n/**\n * @return {?}\n */\nget _isClosing() {\n    return !this._opened && !!this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isOpening() {\n    return this._opened && !!this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isClosed() {\n    return !this._opened && !this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isOpened() {\n    return this._opened && !this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isEnd() {\n    return this.align == 'end';\n  }\n/**\n * @return {?}\n */\nget _modeSide() {\n    return this.mode == 'side';\n  }\n/**\n * @return {?}\n */\nget _modeOver() {\n    return this.mode == 'over';\n  }\n/**\n * @return {?}\n */\nget _modePush() {\n    return this.mode == 'push';\n  }\n/**\n * @return {?}\n */\nget _width() {\n    if (this._elementRef.nativeElement) {\n      return this._elementRef.nativeElement.offsetWidth;\n    }\n    return 0;\n  }\nprivate _elementFocusedBeforeSidenavWasOpened: HTMLElement | null = null;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav, mat-sidenav',\n  // TODO(mmalerba): move template to separate file.\n  templateUrl: 'sidenav.html',\n  host: {\n    'class': 'mat-sidenav',\n    '(transitionend)': '_onTransitionEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-sidenav-closed]': '_isClosed',\n    '[class.mat-sidenav-closing]': '_isClosing',\n    '[class.mat-sidenav-end]': '_isEnd',\n    '[class.mat-sidenav-opened]': '_isOpened',\n    '[class.mat-sidenav-opening]': '_isOpening',\n    '[class.mat-sidenav-over]': '_modeOver',\n    '[class.mat-sidenav-push]': '_modePush',\n    '[class.mat-sidenav-side]': '_modeSide',\n    'tabIndex': '-1'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpenStart': [{ type: Output, args: ['open-start', ] },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onCloseStart': [{ type: Output, args: ['close-start', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MdSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenav.ctorParameters;\n/** @type {?} */\nMdSidenav.propDecorators;\n/** @type {?} */\nMdSidenav.prototype._focusTrap;\n/**\n * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n * @type {?}\n */\nMdSidenav.prototype._align;\n/**\n * Mode of the sidenav; one of 'over', 'push' or 'side'.\n * @type {?}\n */\nMdSidenav.prototype.mode;\n/** @type {?} */\nMdSidenav.prototype._disableClose;\n/**\n * Whether the sidenav is opened.\n * @type {?}\n */\nMdSidenav.prototype._opened;\n/**\n * Event emitted when the sidenav is being opened. Use this to synchronize animations.\n * @type {?}\n */\nMdSidenav.prototype.onOpenStart;\n/**\n * Event emitted when the sidenav is fully opened.\n * @type {?}\n */\nMdSidenav.prototype.onOpen;\n/**\n * Event emitted when the sidenav is being closed. Use this to synchronize animations.\n * @type {?}\n */\nMdSidenav.prototype.onCloseStart;\n/**\n * Event emitted when the sidenav is fully closed.\n * @type {?}\n */\nMdSidenav.prototype.onClose;\n/**\n * Event emitted when the sidenav alignment changes.\n * @type {?}\n */\nMdSidenav.prototype.onAlignChanged;\n/**\n * The current toggle animation promise. `null` if no animation is in progress.\n * @type {?}\n */\nMdSidenav.prototype._toggleAnimationPromise;\n/**\n * The current toggle animation promise resolution function.\n * `null` if no animation is in progress.\n * @type {?}\n */\nMdSidenav.prototype._resolveToggleAnimationPromise;\n/** @type {?} */\nMdSidenav.prototype._elementFocusedBeforeSidenavWasOpened;\n/** @type {?} */\nMdSidenav.prototype._elementRef;\n/** @type {?} */\nMdSidenav.prototype._focusTrapFactory;\n/** @type {?} */\nMdSidenav.prototype._doc;\n}\n\n/**\n * <md-sidenav-container> component.\n * \n * This is the parent component to one or two <md-sidenav>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport class MdSidenavContainer implements AfterContentInit {\n   _sidenavs: QueryList<MdSidenav>;\n/**\n * The sidenav child with the `start` alignment.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The sidenav child with the `end` alignment.\n * @return {?}\n */\nget end() { return this._end; }\n/**\n * Event emitted when the sidenav backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * The sidenav at the start/end alignment, independent of direction.\n */\nprivate _start: MdSidenav | null;\nprivate _end: MdSidenav | null;\n/**\n * The sidenav at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n */\nprivate _left: MdSidenav | null;\nprivate _right: MdSidenav | null;\n/**\n * Whether to enable open/close trantions.\n */\n_enableTransitions = false;\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _ngZone: NgZone) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      _dir.change.subscribe(() => this._validateDrawers());\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    // On changes, assert on consistency.\n    this._sidenavs.changes.subscribe(() => this._validateDrawers());\n    this._sidenavs.forEach((sidenav: MdSidenav) => {\n      this._watchSidenavToggle(sidenav);\n      this._watchSidenavAlign(sidenav);\n    });\n    this._validateDrawers();\n\n    // Give the view a chance to render the initial state, then enable transitions.\n    first.call(this._ngZone.onMicrotaskEmpty).subscribe(() => this._enableTransitions = true);\n  }\n/**\n * Calls `open` of both start and end sidenavs\n * @return {?}\n */\npublic open() {\n    return Promise.all([this._start, this._end]\n      .filter(sidenav => sidenav)\n      .map(sidenav => /** @type {?} */(( sidenav)).open()));\n  }\n/**\n * Calls `close` of both start and end sidenavs\n * @return {?}\n */\npublic close() {\n    return Promise.all([this._start, this._end]\n      .filter(sidenav => sidenav)\n      .map(sidenav => /** @type {?} */(( sidenav)).close()));\n  }\n/**\n * Subscribes to sidenav events in order to set a class on the main container element when the\n * sidenav is open and the backdrop is visible. This ensures any overflow on the container element\n * is properly hidden.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavToggle(sidenav: MdSidenav): void {\n    if (!sidenav || sidenav.mode === 'side') { return; }\n    sidenav.onOpen.subscribe(() => this._setContainerClass(true));\n    sidenav.onClose.subscribe(() => this._setContainerClass(false));\n  }\n/**\n * Subscribes to sidenav onAlignChanged event in order to re-validate drawers when the align\n * changes.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavAlign(sidenav: MdSidenav): void {\n    if (!sidenav) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping sides at the same time.\n    sidenav.onAlignChanged.subscribe(() =>\n        first.call(this._ngZone.onMicrotaskEmpty).subscribe(() => this._validateDrawers()));\n  }\n/**\n * Toggles the 'mat-sidenav-opened' class on the main 'md-sidenav-container' element.\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-sidenav-opened');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-sidenav-opened');\n    }\n  }\n/**\n * Validate the state of the sidenav children components.\n * @return {?}\n */\nprivate _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end sidenav.\n    // NOTE: We must call toArray on _sidenavs even though it's iterable\n    // (see https://github.com/Microsoft/TypeScript/issues/3164).\n    for (let /** @type {?} */ sidenav of this._sidenavs.toArray()) {\n      if (sidenav.align == 'end') {\n        if (this._end != null) {\n          throwMdDuplicatedSidenavError('end');\n        }\n        this._end = sidenav;\n      } else {\n        if (this._start != null) {\n          throwMdDuplicatedSidenavError('start');\n        }\n        this._start = sidenav;\n      }\n    }\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalSidenav();\n  }\n/**\n * @return {?}\n */\n_closeModalSidenav() {\n    // Close all open sidenav's where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(sidenav => sidenav && !sidenav.disableClose && sidenav.mode !== 'side')\n      .forEach(sidenav => /** @type {?} */(( sidenav)).close());\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\n    return (this._isSidenavOpen(this._start) && /** @type {?} */(( this._start)).mode != 'side')\n        || (this._isSidenavOpen(this._end) && /** @type {?} */(( this._end)).mode != 'side');\n  }\n/**\n * @param {?} side\n * @return {?}\n */\nprivate _isSidenavOpen(side: MdSidenav | null): boolean {\n    return side != null && side.opened;\n  }\n/**\n * Return the width of the sidenav, if it's in the proper mode and opened.\n * This may relayout the view, so do not call this often.\n * @param {?} sidenav\n * @param {?} mode\n * @return {?}\n */\nprivate _getSidenavEffectiveWidth(sidenav: MdSidenav, mode: string): number {\n    return (this._isSidenavOpen(sidenav) && sidenav.mode == mode) ? sidenav._width : 0;\n  }\n/**\n * @return {?}\n */\n_getMarginLeft() {\n    return this._left ? this._getSidenavEffectiveWidth(this._left, 'side') : 0;\n  }\n/**\n * @return {?}\n */\n_getMarginRight() {\n    return this._right ? this._getSidenavEffectiveWidth(this._right, 'side') : 0;\n  }\n/**\n * @return {?}\n */\n_getPositionLeft() {\n    return this._left ? this._getSidenavEffectiveWidth(this._left, 'push') : 0;\n  }\n/**\n * @return {?}\n */\n_getPositionRight() {\n    return this._right ? this._getSidenavEffectiveWidth(this._right, 'push') : 0;\n  }\n/**\n * Returns the horizontal offset for the content area.  There should never be a value for both\n * left and right, so by subtracting the right value from the left value, we should always get\n * the appropriate offset.\n * @return {?}\n */\n_getPositionOffset() {\n    return this._getPositionLeft() - this._getPositionRight();\n  }\n/**\n * This is using [ngStyle] rather than separate [style...] properties because [style.transform]\n * doesn't seem to work right now.\n * @return {?}\n */\n_getStyles() {\n    return {\n      marginLeft: `${this._getMarginLeft()}px`,\n      marginRight: `${this._getMarginRight()}px`,\n      transform: `translate3d(${this._getPositionOffset()}px, 0, 0)`\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav-container, mat-sidenav-container',\n  // Do not use ChangeDetectionStrategy.OnPush. It does not work for this component because\n  // technically it is a sibling of MdSidenav (on the content tree) and isn't updated when MdSidenav\n  // changes its state.\n  templateUrl: 'sidenav-container.html',\n  styleUrls: [\n    'sidenav.css',\n    'sidenav-transitions.css',\n  ],\n  host: {\n    'class': 'mat-sidenav-container',\n    '[class.mat-sidenav-transition]': '_enableTransitions',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_sidenavs': [{ type: ContentChildren, args: [MdSidenav, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MdSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContainer.ctorParameters;\n/** @type {?} */\nMdSidenavContainer.propDecorators;\n/** @type {?} */\nMdSidenavContainer.prototype._sidenavs;\n/**\n * Event emitted when the sidenav backdrop is clicked.\n * @type {?}\n */\nMdSidenavContainer.prototype.backdropClick;\n/**\n * The sidenav at the start/end alignment, independent of direction.\n * @type {?}\n */\nMdSidenavContainer.prototype._start;\n/** @type {?} */\nMdSidenavContainer.prototype._end;\n/**\n * The sidenav at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMdSidenavContainer.prototype._left;\n/** @type {?} */\nMdSidenavContainer.prototype._right;\n/**\n * Whether to enable open/close trantions.\n * @type {?}\n */\nMdSidenavContainer.prototype._enableTransitions;\n/** @type {?} */\nMdSidenavContainer.prototype._dir;\n/** @type {?} */\nMdSidenavContainer.prototype._element;\n/** @type {?} */\nMdSidenavContainer.prototype._renderer;\n/** @type {?} */\nMdSidenavContainer.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {MdCommonModule, GestureConfig, StyleModule} from '../core';\nimport {MdSlider} from './slider';\nimport {BidiModule} from '../core/bidi/index';\nexport class MdSliderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, FormsModule, MdCommonModule, StyleModule, BidiModule],\n  exports: [MdSlider, MdCommonModule],\n  declarations: [MdSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSliderModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,SliderRenderer} from './slider';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty, coerceNumberProperty, HammerInput} from '../core';\nimport {Directionality} from '../core/bidi/index';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {FocusOrigin, FocusOriginMonitor} from '../core/style/focus-origin-monitor';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n/**\n * The MdSlider that changed.\n */\nsource: MdSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number | null;\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSliderBase { }\nexport const /** @type {?} */ _MdSliderMixinBase = mixinDisabled(MdSliderBase);\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider extends _MdSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable {\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) { this._invert = coerceBooleanProperty(value); }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() {\n    return this._max;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() {\n    return this._min;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = /** @type {?} */(( this._step.toString().split('.').pop())).length;\n    }\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number | null) {\n    this._value = coerceNumberProperty(v, this._value || 0);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _value: number | null = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) { this._vertical = coerceBooleanProperty(value); }\nprivate _vertical = false;\n\n   color: 'primary' | 'accent' | 'warn' = 'accent';\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MdSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n */\nprivate _renderer: SliderRenderer;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect | null = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * The last value for which a change event was emitted.\n */\nprivate _lastChangeValue: number | null;\n/**\n * The last value for which an input event was emitted.\n */\nprivate _lastInputValue: number | null;\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} _dir\n */\nconstructor(renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _dir: Directionality) {\n    super();\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, renderer, true)\n        .subscribe((origin: FocusOrigin) => this._isActive = !!origin && origin !== 'keyboard');\n    this._renderer = new SliderRenderer(this._elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    this._isSliding = false;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emits a change and input event if the value changed. */\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    this._emitInputEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    event.preventDefault();\n    this._isSliding = true;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n    this._emitValueIfChanged();\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitValueIfChanged() {\n    if (this.value != this._lastChangeValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastChangeValue = this.value;\n      this._controlValueAccessorChangeFn(this.value);\n      this.change.emit(event);\n    }\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    if (this.value != this._lastInputValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastInputValue = this.value;\n      this.input.emit(event);\n    }\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\n    let /** @type {?} */ event = new MdSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slider, mat-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color != \"primary\" && color != \"warn\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'color': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/** @type {?} */\nMdSlider.prototype.color;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._renderer;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * The last value for which a change event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastChangeValue;\n/**\n * The last value for which an input event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastInputValue;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/** @type {?} */\nMdSlider.prototype._elementRef;\n/** @type {?} */\nMdSlider.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\n/**\n * Renderer class in order to keep all dom manipulation in one place and outside of the main class.\n * \\@docs-private\n */\nexport class SliderRenderer {\nprivate _sliderElement: HTMLElement;\n/**\n * @param {?} elementRef\n */\nconstructor(elementRef: ElementRef) {\n    this._sliderElement = elementRef.nativeElement;\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\ngetSliderDimensions() {\n    let /** @type {?} */ wrapperElement = this._sliderElement.querySelector('.mat-slider-wrapper');\n    return wrapperElement ? wrapperElement.getBoundingClientRect() : null;\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\naddFocus() {\n    this._sliderElement.focus();\n  }\n}\n\nfunction SliderRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderRenderer.prototype._sliderElement;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MdSlideToggle} from './slide-toggle';\nimport {\n  FOCUS_ORIGIN_MONITOR_PROVIDER,\n  GestureConfig,\n  MdCommonModule,\n  MdRippleModule,\n  PlatformModule,\n} from '../core';\nexport class MdSlideToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [FormsModule, MdRippleModule, MdCommonModule, PlatformModule],\n  exports: [MdSlideToggle, MdCommonModule],\n  declarations: [MdSlideToggle],\n  providers: [\n    FOCUS_ORIGIN_MONITOR_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSlideToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggleModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle} from './slide-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  applyCssTransform,\n  coerceBooleanProperty,\n  FocusOrigin,\n  FocusOriginMonitor,\n  HammerInput,\n  MdRipple,\n  RippleRef,\n  Platform,\n} from '../core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n\n\nexport const /** @type {?} */ MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlideToggle),\n  multi: true\n};\nexport class MdSlideToggleChange {\n  source: MdSlideToggle;\n  checked: boolean;\n}\n\nfunction MdSlideToggleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleChange.prototype.source;\n/** @type {?} */\nMdSlideToggleChange.prototype.checked;\n}\n\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet /** @type {?} */ nextId = 0;\n/**\n * \\@docs-private\n */\nexport class MdSlideToggleBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSlideToggleBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleBase.prototype._renderer;\n/** @type {?} */\nMdSlideToggleBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSlideToggleMixinBase = mixinColor(mixinDisabled(MdSlideToggleBase), 'accent');\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nexport class MdSlideToggle extends _MdSlideToggleMixinBase\n    implements OnDestroy, AfterContentInit, ControlValueAccessor, CanDisable, CanColor {\nprivate onChange = (_: any) => {};\nprivate onTouched = () => {};\nprivate _uniqueId = `md-slide-toggle-${++nextId}`;\nprivate _checked: boolean = false;\nprivate _slideRenderer: SlideToggleRenderer;\nprivate _required: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Reference to the focus state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Used to set the aria-label attribute on the underlying input element.\n */\nariaLabel: string | null = null;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n */\nariaLabelledby: string | null = null;\n/**\n * Whether the slide-toggle is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the ripple effect for this slide-toggle is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n */\nchange: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Reference to the underlying input element.\n */\n_inputElement: ElementRef;\n/**\n * Reference to the ripple directive on the thumb container.\n */\n_ripple: MdRipple;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _platform\n * @param {?} _focusOriginMonitor\n * @param {?} _changeDetectorRef\n */\nconstructor(elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _platform: Platform,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * The onChangeEvent method will be also called on click.\n * This is because everything for the slide-toggle is wrapped inside of a label,\n * which triggers a onChange event on click.\n * @param {?} event\n * @return {?}\n */\n_onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Once a drag is currently in progress, we do not want to toggle the slide-toggle on a click.\n    if (!this.disabled && !this._slideRenderer.dragging) {\n      this.toggle();\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    this.onTouched();\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.checked = value;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n/**\n * Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the slide-toggle.\n * @return {?}\n */\nfocus() {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Whether the slide-toggle is checked.\n * @return {?}\n */\nget checked() { return !!this._checked; }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value) {\n    if (this.checked !== !!value) {\n      this._checked = value;\n      this.onChange(this._checked);\n    }\n  }\n/**\n * Toggles the checked state of the slide-toggle.\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n/**\n * Emits the change event to the `change` output EventEmitter\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n/**\n * @return {?}\n */\n_onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      let /** @type {?} */ _previousChecked = this.checked;\n      this.checked = this._slideRenderer.dragPercentage > 50;\n\n      if (_previousChecked !== this.checked) {\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slide-toggle, mat-slide-toggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: FocusOriginMonitor, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'id': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'required': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'change': [{ type: Output },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n};\n}\n\nfunction MdSlideToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggle.ctorParameters;\n/** @type {?} */\nMdSlideToggle.propDecorators;\n/** @type {?} */\nMdSlideToggle.prototype.onChange;\n/** @type {?} */\nMdSlideToggle.prototype.onTouched;\n/** @type {?} */\nMdSlideToggle.prototype._uniqueId;\n/** @type {?} */\nMdSlideToggle.prototype._checked;\n/** @type {?} */\nMdSlideToggle.prototype._slideRenderer;\n/** @type {?} */\nMdSlideToggle.prototype._required;\n/** @type {?} */\nMdSlideToggle.prototype._disableRipple;\n/**\n * Reference to the focus state ripple.\n * @type {?}\n */\nMdSlideToggle.prototype._focusRipple;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdSlideToggle.prototype.name;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdSlideToggle.prototype.id;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.tabIndex;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n * @type {?}\n */\nMdSlideToggle.prototype.labelPosition;\n/**\n * Used to set the aria-label attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabel;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabelledby;\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n * @type {?}\n */\nMdSlideToggle.prototype.change;\n/**\n * Reference to the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype._inputElement;\n/**\n * Reference to the ripple directive on the thumb container.\n * @type {?}\n */\nMdSlideToggle.prototype._ripple;\n/** @type {?} */\nMdSlideToggle.prototype._platform;\n/** @type {?} */\nMdSlideToggle.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlideToggle.prototype._changeDetectorRef;\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n/**\n * Reference to the thumb HTMLElement.\n */\nprivate _thumbEl: HTMLElement;\n/**\n * Reference to the thumb bar HTMLElement.\n */\nprivate _thumbBarEl: HTMLElement;\n/**\n * Width of the thumb bar of the slide-toggle.\n */\nprivate _thumbBarWidth: number;\n/**\n * Previous checked state before drag started.\n */\nprivate _previousChecked: boolean;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n */\ndragPercentage: number;\n/**\n * Whether the thumb is currently being dragged.\n */\ndragging: boolean = false;\n/**\n * @param {?} _elementRef\n * @param {?} platform\n */\nconstructor(private _elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n/**\n * Initializes the drag of the slide-toggle.\n * @param {?} checked\n * @return {?}\n */\nstartThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n/**\n * Resets the current drag and returns the new checked value.\n * @return {?}\n */\nstopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n/**\n * Updates the thumb containers position from the specified distance.\n * @param {?} distance\n * @return {?}\n */\nupdateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n/**\n * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n * @param {?} distance\n * @return {?}\n */\nprivate _getDragPercentage(distance: number) {\n    let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n\nfunction SlideToggleRenderer_tsickle_Closure_declarations() {\n/**\n * Reference to the thumb HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbEl;\n/**\n * Reference to the thumb bar HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarEl;\n/**\n * Width of the thumb bar of the slide-toggle.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarWidth;\n/**\n * Previous checked state before drag started.\n * @type {?}\n */\nSlideToggleRenderer.prototype._previousChecked;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragPercentage;\n/**\n * Whether the thumb is currently being dragged.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragging;\n/** @type {?} */\nSlideToggleRenderer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdSelect} from './select';\nimport {MdCommonModule, OverlayModule, MdOptionModule} from '../core';\nexport class MdSelectModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdOptionModule,\n    MdCommonModule,\n  ],\n  exports: [MdSelect, MdOptionModule, MdCommonModule],\n  declarations: [MdSelect],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectModule.ctorParameters;\n}\n\n\n\nexport {SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelect} from './select';\nexport {fadeInContent, transformPanel, transformPlaceholder} from './select-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n  ViewChild,\n  ChangeDetectorRef,\n  Attribute,\n  OnInit,\n  Inject\n} from '@angular/core';\nimport {MdOption, MdOptionSelectionChange, MdOptgroup} from '../core/option/index';\nimport {ENTER, SPACE, UP_ARROW, DOWN_ARROW, HOME, END} from '../core/keyboard/keycodes';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {Directionality} from '../core/bidi/index';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformPlaceholder, transformPanel, fadeInContent} from './select-animations';\nimport {ControlValueAccessor, NgControl} from '@angular/forms';\nimport {coerceBooleanProperty} from '@angular/cdk';\nimport {ConnectedOverlayDirective} from '../core/overlay/overlay-directives';\nimport {ViewportRuler} from '../core/overlay/position/viewport-ruler';\nimport {SelectionModel} from '../core/selection/selection';\nimport {getMdSelectDynamicMultipleError, getMdSelectNonArrayValueError} from './select-errors';\nimport {startWith, filter} from '../core/rxjs/index';\nimport {merge} from 'rxjs/observable/merge';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS\n} from '../core/placeholder/placeholder-options';\n/**\n * The fixed height of every option element (option, group header etc.).\n */\nexport const SELECT_ITEM_HEIGHT = 48;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The max number of options visible at once in the select panel.\n */\nexport const SELECT_MAX_OPTIONS_DISPLAYED =\n    Math.floor(SELECT_PANEL_MAX_HEIGHT / SELECT_ITEM_HEIGHT);\n/**\n * The fixed height of the select's trigger element.\n */\nexport const SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n */\nexport const SELECT_OPTION_HEIGHT_ADJUSTMENT = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n * \n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nexport const SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSelectBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSelectBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectBase.prototype._renderer;\n/** @type {?} */\nMdSelectBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSelectMixinBase = mixinColor(mixinDisabled(MdSelectBase), 'primary');\nexport class MdSelect extends _MdSelectMixinBase implements AfterContentInit, OnDestroy, OnInit,\n    ControlValueAccessor, CanColor, CanDisable {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription: Subscription | null;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription: Subscription;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MdOption>;\n/**\n * The animation state of the placeholder.\n */\nprivate _placeholderState = '';\n/**\n * Tab index for the element.\n */\nprivate _tabIndex: number;\n/**\n * Deals with configuring placeholder options\n */\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n */\n_triggerWidth: number;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n */\n_selectedValueWidth: number;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n */\n_positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MdOption>;\n/**\n * All of the defined groups of options.\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n */\npanelClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n\n    // Must wait to record the trigger width to ensure placeholder width is included.\n    Promise.resolve(null).then(() => this._setTriggerWidth());\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMdSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * Whether to float the placeholder text.\n * @return {?}\n */\nget floatPlaceholder(): FloatPlaceholderType { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Tab index for the select element.\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    if (typeof value !== 'undefined') {\n      this._tabIndex = value;\n    }\n  }\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\n    return merge(...this.options.map(option => option.onSelectionChange));\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _control\n * @param {?} tabIndex\n * @param {?} placeholderOptions\n */\nconstructor(\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\n    renderer: Renderer2,\n    elementRef: ElementRef,\nprivate _dir: Directionality,\npublic _control: NgControl,\n     tabIndex: string,\n      placeholderOptions: PlaceholderOptions) {\n    super(renderer, elementRef);\n\n    if (this._control) {\n      this._control.valueAccessor = this;\n    }\n\n    this._tabIndex = parseInt(tabIndex) || 0;\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, undefined, false);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = startWith.call(this.options.changes, null).subscribe(() => {\n      this._resetOptions();\n\n      if (this._control) {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve(null).then(() => this._setSelectionByValue(this._control.value));\n      }\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    if (!this._triggerWidth) {\n      this._setTriggerWidth();\n    }\n\n    this._calculateOverlayPosition();\n    this._placeholderState = this._floatPlaceholderState();\n    this._panelOpen = true;\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      if (this._selectionModel.isEmpty()) {\n        this._placeholderState = '';\n      }\n\n      this.focus();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (this._multiple) {\n      let /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Sets the width of the trigger element. This is necessary to match\n * the overlay width to the trigger width.\n * @return {?}\n */\nprivate _setTriggerWidth(): void {\n    this._triggerWidth = this._getTriggerRect().width;\n  }\n/**\n * Handles the keyboard interactions of a closed select.\n * @param {?} event\n * @return {?}\n */\n_handleClosedKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      if (event.keyCode === ENTER || event.keyCode === SPACE) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this._handleArrowKey(event);\n      }\n    }\n  }\n/**\n * Handles keypresses inside the panel.\n * @param {?} event\n * @return {?}\n */\n_handlePanelKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === HOME || event.keyCode === END) {\n      event.preventDefault();\n      event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                               this._keyManager.setLastItemActive();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.panelOpen) {\n      this._onTouched();\n    }\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\n    this._calculateOverlayOffsetX();\n    this._setScrollTop();\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel'); /** @type {?} */((\n    scrollContainer)).scrollTop = this._scrollTop;\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw getMdSelectNonArrayValueError();\n    }\n\n    this._clearSelection();\n\n    if (isArray) {\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._selectValue(value, isUserInput);\n    }\n\n    this._setValueWidth();\n\n    if (this._selectionModel.isEmpty()) {\n      this._placeholderState = '';\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput = false): MdOption | undefined {\n    let /** @type {?} */ optionsArray = this.options.toArray();\n    let /** @type {?} */ correspondingOption = optionsArray.find(option => {\n      return option.value != null && option.value === value;\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this._keyManager.setActiveItem(optionsArray.indexOf(correspondingOption));\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getTriggerRect(): ClientRect {\n    return this.trigger.nativeElement.getBoundingClientRect();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager(this.options);\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = filter.call(this.optionSelectionChanges,\n      event => event.isUserInput).subscribe(event => {\n        this._onSelect(event.source);\n        this._setValueWidth();\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    if (this._optionSubscription) {\n      this._optionSubscription.unsubscribe();\n      this._optionSubscription = null;\n    }\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._onChange(valueToEmit);\n    this.change.emit(new MdSelectChange(this, valueToEmit));\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Must set the width of the selected option's value programmatically\n * because it is absolutely positioned and otherwise will not clip\n * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n * @return {?}\n */\nprivate _setValueWidth() {\n    this._selectedValueWidth =  this._triggerWidth - 13;\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem( /** @type {?} */((this._getOptionIndex(this._selectionModel.selected[0]))));\n    }\n  }\n/**\n * Focuses the select element.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number | undefined {\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    const /** @type {?} */ items = this._getItemCount();\n    const /** @type {?} */ panelHeight = Math.min(items * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = items * SELECT_ITEM_HEIGHT;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    if (this._selectionModel.hasValue()) {\n      let /** @type {?} */ selectedOptionOffset = /** @type {?} */(( this._getOptionIndex(this._selectionModel.selected[0])));\n\n      selectedOptionOffset += this._getLabelCountBeforeOption(selectedOptionOffset);\n\n      // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n      const /** @type {?} */ scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n    } else {\n      // If no option is selected, the panel centers on the first option. In this case,\n      // we must only adjust for the height difference between the option element\n      // and the trigger element, then multiply it by -1 to ensure the panel moves\n      // in the correct direction up the page.\n      this._offsetY = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1 -\n          (this._getLabelCountBeforeOption(0) * SELECT_ITEM_HEIGHT);\n    }\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ optionOffsetFromScrollTop = SELECT_ITEM_HEIGHT * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = SELECT_ITEM_HEIGHT / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Figures out the appropriate animation state for the placeholder.\n * @return {?}\n */\n_getPlaceholderAnimationState(): string {\n    if (this.floatPlaceholder === 'never') {\n      return '';\n    }\n\n    if (this.floatPlaceholder === 'always') {\n      return this._floatPlaceholderState();\n    }\n\n    return this._placeholderState;\n  }\n/**\n * Determines the CSS `opacity` of the placeholder element.\n * @return {?}\n */\n_getPlaceholderOpacity(): string {\n    return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ?\n        '1' : '0';\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n * can't be calculated until the panel has been attached, because we need to know the\n * content width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ isRtl = this._isRtl();\n    const /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let /** @type {?} */ offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let /** @type {?} */ selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * SELECT_ITEM_HEIGHT;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this._getItemCount() - SELECT_MAX_OPTIONS_DISPLAYED;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop =\n          selectedDisplayIndex * SELECT_ITEM_HEIGHT + SELECT_PANEL_PADDING_Y;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - SELECT_ITEM_HEIGHT / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ triggerRect = this._getTriggerRect();\n\n    const /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this._getItemCount() * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    const /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    const /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ originY =\n        Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_ITEM_HEIGHT / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Figures out the floating placeholder state value.\n * @return {?}\n */\nprivate _floatPlaceholderState(): string {\n    return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n  }\n/**\n * Handles the user pressing the arrow keys on a closed select.\n * @param {?} event\n * @return {?}\n */\nprivate _handleArrowKey(event: KeyboardEvent): void {\n    if (this._multiple) {\n      event.preventDefault();\n      this.open();\n    } else {\n      const /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\n\n      // Cycle though the select options even when the select is closed,\n      // matching the behavior of the native select element.\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\n      // however the key manager only supports up/down at the moment.\n      this._keyManager.onKeydown(event);\n\n      const /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MdOption));\n\n      if (currentActiveItem !== prevActiveItem) {\n        this._clearSelection();\n        this._setSelectionByValue(currentActiveItem.value, true);\n        this._propagateChanges();\n      }\n    }\n  }\n/**\n * Calculates the amount of items in the select. This includes options and group labels.\n * @return {?}\n */\nprivate _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n/**\n * Calculates the amount of option group labels that precede the specified option.\n * Useful when positioning the panel, because the labels will offset the index of the\n * currently-selected option.\n * @param {?} optionIndex\n * @return {?}\n */\nprivate _getLabelCountBeforeOption(optionIndex: number): number {\n    if (this.optionGroups.length) {\n      let /** @type {?} */ options = this.options.toArray();\n      let /** @type {?} */ groups = this.optionGroups.toArray();\n      let /** @type {?} */ groupCounter = 0;\n\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\n        if (options[i].group && options[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-select, mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['color', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': '_control?.invalid || \"false\"',\n    '[attr.aria-owns]': '_optionIds',\n    '[class.mat-select-disabled]': 'disabled',\n    'class': 'mat-select',\n    '(keydown)': '_handleClosedKeydown($event)',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'mdSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'panelClass': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * The animation state of the placeholder.\n * @type {?}\n */\nMdSelect.prototype._placeholderState;\n/**\n * Tab index for the element.\n * @type {?}\n */\nMdSelect.prototype._tabIndex;\n/**\n * Deals with configuring placeholder options\n * @type {?}\n */\nMdSelect.prototype._placeholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n * @type {?}\n */\nMdSelect.prototype._triggerWidth;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n * @type {?}\n */\nMdSelect.prototype._selectedValueWidth;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/**\n * All of the defined groups of options.\n * @type {?}\n */\nMdSelect.prototype.optionGroups;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nMdSelect.prototype.panelClass;\n/** @type {?} */\nMdSelect.prototype._floatPlaceholder;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._control;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Returns an exception to be thrown when attempting to change a s\n * elect's `multiple` option after initialization.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectNonArrayValueError(): Error {\n  return Error('Cannot assign truthy non-array value to select in `multiple` mode.');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n/**\n * This animation shrinks the placeholder text to 75% of its normal size and translates\n * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,\n * depending on the text direction of the application.\n */\nexport const transformPlaceholder: AnimationTriggerMetadata = trigger('transformPlaceholder', [\n  state('floating-ltr', style({\n    top: '-22px',\n    left: '-2px',\n    transform: 'scale(0.75)'\n  })),\n  state('floating-rtl', style({\n    top: '-22px',\n    left: '2px',\n    transform: 'scale(0.75)'\n  })),\n  transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n]);\n/**\n * This animation transforms the select's overlay panel on and off the page.\n * \n * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n * \n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })),\n  state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: 'scaleY(0)'\n    }),\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself and whether or not it is currently disabled.\n */\nexport interface Focusable extends CanDisable {\n  focus(): void;\n}\nexport class FocusKeyManager extends ListKeyManager<Focusable> {\n/**\n * @param {?} items\n */\nconstructor(items: QueryList<Focusable>) {\n    super(items);\n  }\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds focuses the newly active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.focus();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\nimport {\n  MdRippleModule,\n  MdCommonModule,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  FocusOriginMonitor,\n} from '../core';\nimport {MdRadioGroup, MdRadioButton} from './radio';\nexport class MdRadioModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule],\n  exports: [MdRadioGroup, MdRadioButton, MdCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER, FocusOriginMonitor],\n  declarations: [MdRadioGroup, MdRadioButton],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRadioModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioModule.ctorParameters;\n}\n\n\n\nexport {MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton} from './radio';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  OnDestroy,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {\n  RippleRef,\n  UniqueSelectionDispatcher,\n  MdRipple,\n  FocusOriginMonitor,\n  FocusOrigin,\n} from '../core';\nimport {coerceBooleanProperty} from '@angular/cdk';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdRadioGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nexport class MdRadioChange {\n/**\n * The MdRadioButton that emits the change event.\n */\nsource: MdRadioButton | null;\n/**\n * The value of the MdRadioButton.\n */\nvalue: any;\n}\n\nfunction MdRadioChange_tsickle_Closure_declarations() {\n/**\n * The MdRadioButton that emits the change event.\n * @type {?}\n */\nMdRadioChange.prototype.source;\n/**\n * The value of the MdRadioButton.\n * @type {?}\n */\nMdRadioChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioGroupBase { }\nexport const /** @type {?} */ _MdRadioGroupMixinBase = mixinDisabled(MdRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nexport class MdRadioGroup extends _MdRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n */\nprivate _name: string = `md-radio-group-${_uniqueIdCounter++}`;\n/**\n * The currently selected radio button. Should match value.\n */\nprivate _selected: MdRadioButton | null = null;\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n */\nprivate _labelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio group is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * The method to be called in order to update ngModel\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n */\nonTouched: () => any = () => {};\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * Child radio buttons.\n */\n_radios: QueryList<MdRadioButton>;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @return {?}\n */\nget labelPosition() {\n    return this._labelPosition;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n/**\n * Whether the radio group is diabled\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = value;\n    this._markRadiosForCheck();\n  }\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * Initialize properties once content children are available.\n * This allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\n    this._isInitialized = true;\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n * radio buttons upon their blur.\n * @return {?}\n */\n_touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    if (this._isInitialized) {\n      let /** @type {?} */ event = new MdRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n/**\n * @return {?}\n */\n_markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the control should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-radio-group, mat-radio-group',\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MdRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioGroup.ctorParameters;\n/** @type {?} */\nMdRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n * @type {?}\n */\nMdRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMdRadioGroup.prototype._name;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMdRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMdRadioGroup.prototype._isInitialized;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMdRadioGroup.prototype._labelPosition;\n/**\n * Whether the radio group is disabled.\n * @type {?}\n */\nMdRadioGroup.prototype._disabled;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMdRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n * @type {?}\n */\nMdRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMdRadioGroup.prototype._radios;\n/** @type {?} */\nMdRadioGroup.prototype._changeDetector;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdRadioButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButtonBase.prototype._renderer;\n/** @type {?} */\nMdRadioButtonBase.prototype._elementRef;\n}\n\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const /** @type {?} */ _MdRadioButtonMixinBase = mixinColor(MdRadioButtonBase, 'accent');\n/**\n * A radio-button. May be inside of\n */\nexport class MdRadioButton extends _MdRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor {\n/**\n * The unique ID for the radio button.\n */\nid: string = `md-radio-${_uniqueIdCounter++}`;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n */\nariaLabel: string;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n */\nariaLabelledby: string;\n/**\n * Whether the ripple effect for this radio button is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\n    this._labelPosition = value;\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * The parent radio group. May or may not be present.\n */\nradioGroup: MdRadioGroup;\n/**\n * ID of the native input element inside `<md-radio-button>`\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * Whether this radio is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Whether this radio is disabled.\n */\nprivate _disabled: boolean;\n/**\n * Value assigned to this radio.\n */\nprivate _value: any = null;\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean;\n/**\n * The child ripple instance.\n */\n_ripple: MdRipple;\n/**\n * Reference to the current focus ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Unregister function for _radioDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * The native `<input type=radio>` element\n */\n_inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _changeDetector\n * @param {?} _focusOriginMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MdRadioGroup,\n              elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _changeDetector: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\n    super(renderer, elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Marks the radio button as needing checking for change detection.\n * This method is exposed because the parent radio group will directly\n * update bound properties of the radio button.\n * @return {?}\n */\n_markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\n * Clicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    let /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-radio-button, mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'disableRipple': [{ type: Input },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MdRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioButton.ctorParameters;\n/** @type {?} */\nMdRadioButton.propDecorators;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMdRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMdRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMdRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMdRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disabled;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMdRadioButton.prototype._value;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disableRipple;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMdRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMdRadioButton.prototype._focusRipple;\n/**\n * Unregister function for _radioDispatcher *\n * @type {?}\n */\nMdRadioButton.prototype._removeUniqueSelectionListener;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMdRadioButton.prototype._inputElement;\n/** @type {?} */\nMdRadioButton.prototype._changeDetector;\n/** @type {?} */\nMdRadioButton.prototype._focusOriginMonitor;\n/** @type {?} */\nMdRadioButton.prototype._radioDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserveContentModule} from '@angular/cdk';\nimport {MdRippleModule, MdCommonModule, FocusOriginMonitor} from '../core';\nimport {MdCheckbox} from './checkbox';\nexport class MdCheckboxModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule, ObserveContentModule],\n  exports: [MdCheckbox, MdCommonModule],\n  declarations: [MdCheckbox],\n  providers: [FocusOriginMonitor]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox} from './checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty} from '@angular/cdk';\nimport {FocusOrigin, FocusOriginMonitor, MdRipple, RippleRef} from '../core';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * Monotonically increasing integer used to auto-generate unique ids for checkbox components.\n */\nlet nextId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdCheckbox),\n  multi: true\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MdCheckbox.\n */\nexport class MdCheckboxChange {\n/**\n * The source MdCheckbox of the event.\n */\nsource: MdCheckbox;\n/**\n * The new `checked` value of the checkbox.\n */\nchecked: boolean;\n}\n\nfunction MdCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MdCheckbox of the event.\n * @type {?}\n */\nMdCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMdCheckboxChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxBase.prototype._renderer;\n/** @type {?} */\nMdCheckboxBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdCheckboxMixinBase = mixinColor(mixinDisabled(MdCheckboxBase), 'accent');\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MdCheckbox extends _MdCheckboxMixinBase\n    implements ControlValueAccessor, AfterViewInit, OnDestroy, CanColor, CanDisable {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\n/**\n * A unique id for the checkbox. If one is not supplied, it is auto-generated.\n */\nid: string = `md-checkbox-${++nextId}`;\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean;\n/**\n * Whether the ripple effect for this checkbox is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * ID of the native input element inside `<md-checkbox>`\n * @return {?}\n */\nget inputId(): string {\n    return `input-${this.id}`;\n  }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Tabindex value that is passed to the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n */\nchange: EventEmitter<MdCheckboxChange> = new EventEmitter<MdCheckboxChange>();\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n */\nindeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n/**\n * The value attribute of the native input element\n */\nvalue: string ;\n/**\n * The native `<input type=\"checkbox\"> element\n */\n_inputElement: ElementRef;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n */\n_ripple: MdRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Reference to the focused state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusOriginMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Whether the checkbox is checked.\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n * set to false.\n * @return {?}\n */\nget indeterminate() {\n    return this._indeterminate;\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.checked = !!value;\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Function to be called on change.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be triggered when the checkbox is touched.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the checkbox should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\n    let /** @type {?} */ oldState = this._currentCheckState;\n    let /** @type {?} */ renderer = this._renderer;\n    let /** @type {?} */ elementRef = this._elementRef;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      renderer.removeClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      renderer.addClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Event handler for checkbox input element.\n * Toggles checked state if element is not disabled.\n * Do not toggle on (change) event since IE doesn't fire change event when\n *   indeterminate checkbox is clicked.\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    this._removeFocusRipple();\n\n    if (!this.disabled) {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this._indeterminate) {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let /** @type {?} */ animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n/**\n * Fades out the focus state ripple.\n * @return {?}\n */\nprivate _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-checkbox, mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-checkbox',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n};\n}\n\nfunction MdCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckbox.ctorParameters;\n/** @type {?} */\nMdCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabelledby;\n/**\n * A unique id for the checkbox. If one is not supplied, it is auto-generated.\n * @type {?}\n */\nMdCheckbox.prototype.id;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdCheckbox.prototype._disableRipple;\n/** @type {?} */\nMdCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdCheckbox.prototype.labelPosition;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMdCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMdCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMdCheckbox.prototype._inputElement;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * @type {?}\n */\nMdCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nMdCheckbox.prototype.onTouched;\n/** @type {?} */\nMdCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMdCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMdCheckbox.prototype._checked;\n/** @type {?} */\nMdCheckbox.prototype._indeterminate;\n/** @type {?} */\nMdCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMdCheckbox.prototype._focusRipple;\n/** @type {?} */\nMdCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMdCheckbox.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule, MdRippleModule, StyleModule} from '../core';\nimport {\n  MdAnchor,\n  MdButton,\n  MdMiniFab,\n  MdButtonCssMatStyler,\n  MdFab,\n  MdIconButtonCssMatStyler,\n  MdRaisedButtonCssMatStyler\n} from './button';\n\n\nexport {MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor} from './button';\nexport class MdButtonModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n    StyleModule,\n  ],\n  exports: [\n    MdButton,\n    MdAnchor,\n    MdMiniFab,\n    MdFab,\n    MdCommonModule,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MdButton,\n    MdAnchor,\n    MdMiniFab,\n    MdFab,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n  Inject\n} from '@angular/core';\nimport {coerceBooleanProperty, FocusOriginMonitor, Platform} from '../core';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * Default color palette for round buttons (md-fab and md-mini-fab)\n */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-button], button[mat-button], a[md-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdRaisedButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-raised-button], button[mat-raised-button], ' +\n      'a[md-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRaisedButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRaisedButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdIconButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-icon-button], button[mat-icon-button], a[md-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\n                 anchor: MdAnchor) {\n    // Set the default color palette for the md-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-fab], button[mat-fab], a[md-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFab.ctorParameters;\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * \\@docs-private\n */\nexport class MdMiniFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\n                 anchor: MdAnchor) {\n    // Set the default color palette for the md-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-mini-fab], button[mat-mini-fab], a[md-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdMiniFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMiniFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMiniFab.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonBase.prototype._renderer;\n/** @type {?} */\nMdButtonBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdButtonMixinBase = mixinColor(mixinDisabled(MdButtonBase));\n/**\n * Material design button.\n */\nexport class MdButton extends _MdButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n/**\n * Whether the button is round.\n */\n_isRoundButton: boolean = this._hasAttributeWithPrefix('fab', 'mini-fab');\n/**\n * Whether the button is icon button.\n */\n_isIconButton: boolean = this._hasAttributeWithPrefix('icon-button');\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect for this button is disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableRipple(v) { this._disableRipple = coerceBooleanProperty(v); }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _platform\n * @param {?} _focusOriginMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _platform: Platform,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super(renderer, elementRef);\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\n_getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Gets whether the button has one of the given attributes\n * with either an 'md-' or 'mat-' prefix.\n * @param {...?} unprefixedAttributeNames\n * @return {?}\n */\n_hasAttributeWithPrefix(...unprefixedAttributeNames: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return unprefixedAttributeNames.some(suffix => {\n      const /** @type {?} */ el = this._getHostElement();\n\n      return el.hasAttribute('md-' + suffix) || el.hasAttribute('mat-' + suffix);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'button[md-button], button[md-raised-button], button[md-icon-button],' +\n            'button[md-fab], button[md-mini-fab],' +\n            'button[mat-button], button[mat-raised-button], button[mat-icon-button],' +\n            'button[mat-fab], button[mat-mini-fab]',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Platform, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n};\n}\n\nfunction MdButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButton.ctorParameters;\n/** @type {?} */\nMdButton.propDecorators;\n/**\n * Whether the button is round.\n * @type {?}\n */\nMdButton.prototype._isRoundButton;\n/**\n * Whether the button is icon button.\n * @type {?}\n */\nMdButton.prototype._isIconButton;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdButton.prototype._disableRipple;\n/** @type {?} */\nMdButton.prototype._platform;\n/** @type {?} */\nMdButton.prototype._focusOriginMonitor;\n}\n\n/**\n * Raised Material design button.\n */\nexport class MdAnchor extends MdButton {\n/**\n * @param {?} platform\n * @param {?} focusOriginMonitor\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(\n      platform: Platform,\n      focusOriginMonitor: FocusOriginMonitor,\n      elementRef: ElementRef,\n      renderer: Renderer2) {\n    super(renderer, elementRef, platform, focusOriginMonitor);\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget tabIndex(): number {\n    return this.disabled ? -1 : 0;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: FocusOriginMonitor, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tabIndex': [{ type: HostBinding, args: ['tabIndex', ] },],\n};\n}\n\nfunction MdAnchor_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAnchor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAnchor.ctorParameters;\n/** @type {?} */\nMdAnchor.propDecorators;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle} from './button-toggle';\nimport {\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  MdCommonModule,\n  StyleModule,\n} from '../core';\nexport class MdButtonToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [FormsModule, MdCommonModule, StyleModule],\n  exports: [\n    MdButtonToggleGroup,\n    MdButtonToggleGroupMultiple,\n    MdButtonToggle,\n    MdCommonModule,\n  ],\n  declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleModule.ctorParameters;\n}\n\n\n\nexport {ToggleType,MdButtonToggleGroupBase,_MdButtonToggleGroupMixinBase,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle} from './button-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {UniqueSelectionDispatcher, coerceBooleanProperty, FocusOriginMonitor} from '../core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * \\@docs-private\n */\nexport class MdButtonToggleGroupBase {}\nexport const /** @type {?} */ _MdButtonToggleGroupMixinBase = mixinDisabled(MdButtonToggleGroupBase);\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdButtonToggleGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nexport class MdButtonToggleChange {\n/**\n * The MdButtonToggle that emits the event.\n */\nsource: MdButtonToggle | null;\n/**\n * The value assigned to the MdButtonToggle.\n */\nvalue: any;\n}\n\nfunction MdButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MdButtonToggle that emits the event.\n * @type {?}\n */\nMdButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MdButtonToggle.\n * @type {?}\n */\nMdButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MdButtonToggleGroup extends _MdButtonToggleGroupMixinBase implements AfterViewInit,\n    ControlValueAccessor, CanDisable {\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to toggles in this group.\n */\nprivate _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * The currently selected button toggle, should match the value.\n */\nprivate _selected: MdButtonToggle | null = null;\n/**\n * Whether the button toggle group is initialized or not.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n */\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * Child button toggle buttons.\n */\n_buttonToggles: QueryList<MdButtonToggle>;\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._isInitialized = true;\n  }\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\n    return this._name;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n\n      // Only emit a change event if the view is completely initialized.\n      // We don't want to emit a change event for the initial values.\n      if (this._isInitialized) {\n        this._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\n    return this._selected;\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n/**\n * Event emitted when the group's value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On change callback function.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On touch callback function.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled Whether the component should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'mdButtonToggleGroup',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MdButtonToggle), ] },],\n'name': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._name;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._selected;\n/**\n * Whether the button toggle group is initialized or not.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._isInitialized;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._buttonToggles;\n/**\n * Event emitted when the group's value changes.\n * @type {?}\n */\nMdButtonToggleGroup.prototype.change;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MdButtonToggleGroupMultiple extends _MdButtonToggleGroupMixinBase\n    implements CanDisable {\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\n  exportAs: 'mdButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MdButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroupMultiple.propDecorators;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MdButtonToggle implements OnInit, OnDestroy {\n/**\n * Whether or not this button toggle is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n */\n_type: ToggleType;\n/**\n * Whether or not this button toggle is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Value assigned to this button toggle.\n */\nprivate _value: any = null;\n/**\n * Whether or not the button toggle is a single selection.\n */\nprivate _isSingleSelector: boolean = false;\n/**\n * Unregister function for _buttonToggleDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n\n   _inputElement: ElementRef;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n */\nbuttonToggleGroup: MdButtonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n */\nbuttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * The unique ID for this button toggle.\n */\nid: string;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._isSingleSelector) {\n      if (newCheckedState) {\n        // Notify all button toggles with the same name (in the same group) to un-check.\n        this._buttonToggleDispatcher.notify(this.id, this.name);\n      }\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n/**\n * MdButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the group value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n */\nconstructor( toggleGroup: MdButtonToggleGroup,\n               toggleGroupMultiple: MdButtonToggleGroupMultiple,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    this.buttonToggleGroup = toggleGroup;\n\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.id == null) {\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\n    this._inputElement.nativeElement.focus();\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-button-toggle, mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    'class': 'mat-button-toggle'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: UniqueSelectionDispatcher, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: HostBinding },{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: HostBinding, args: ['class.mat-button-toggle-checked', ] },{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: HostBinding, args: ['class.mat-button-toggle-disabled', ] },{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggle.ctorParameters;\n/** @type {?} */\nMdButtonToggle.propDecorators;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMdButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMdButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMdButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMdButtonToggle.prototype._isSingleSelector;\n/**\n * Unregister function for _buttonToggleDispatcher *\n * @type {?}\n */\nMdButtonToggle.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nMdButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMdButtonToggle.prototype.change;\n/** @type {?} */\nMdButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMdButtonToggle.prototype._renderer;\n/** @type {?} */\nMdButtonToggle.prototype._elementRef;\n/** @type {?} */\nMdButtonToggle.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {ObserveContentModule} from '@angular/cdk';\nimport {MdLineModule} from './line/line';\nimport {BidiModule} from './bidi/index';\nimport {MdOptionModule} from './option/index';\nimport {PortalModule} from './portal/portal-directives';\nimport {OverlayModule} from './overlay/index';\nimport {A11yModule} from './a11y/index';\nimport {MdSelectionModule} from './selection/index';\nimport {MdRippleModule} from './ripple/index';\n\n// Re-exports of the CDK to avoid breaking changes.\nexport {\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  ObserveContentModule,\n  ObserveContent\n} from '@angular/cdk';\n\n// RTL\nexport {Dir, Direction, Directionality, BidiModule} from './bidi/index';\n\nexport {MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './option/index';\n\n// Portals\nexport {\n  Portal,\n  PortalHost,\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal\n} from './portal/portal';\nexport {\n  PortalHostDirective,\n  TemplatePortalDirective,\n  PortalModule,\n} from './portal/portal-directives';\nexport {DomPortalHost} from './portal/dom-portal-host';\n\n// Platform\nexport {PlatformModule,Platform,getSupportedInputTypes} from './platform/index';\n\n// Overlay\nexport {OVERLAY_PROVIDERS,OverlayModule,Overlay,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule} from './overlay/index';\n\n// Gestures\nexport {GestureConfig} from './gestures/gesture-config';\n// Explicitly specify the interfaces which should be re-exported, because if everything\n// is re-exported, module bundlers may run into issues with treeshaking.\nexport {HammerInput, HammerManager} from './gestures/gesture-annotations';\n\n// Ripple\nexport {MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule} from './ripple/index';\n\n// a11y\nexport {\n  AriaLivePoliteness,\n  LiveAnnouncer,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_PROVIDER,\n} from './a11y/live-announcer';\n\n// Selection\nexport {SelectionModel,SelectionChange} from './selection/selection';\n\nexport {FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective} from './a11y/focus-trap';\nexport {InteractivityChecker} from './a11y/interactivity-checker';\nexport {isFakeMousedownFromScreenReader} from './a11y/fake-mousedown';\n\nexport {A11yModule} from './a11y/index';\n\nexport {\n  UniqueSelectionDispatcher,\n  UniqueSelectionDispatcherListener,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n} from './coordination/unique-selection-dispatcher';\n\nexport {MdLineModule, MdLine, MdLineSetter} from './line/line';\n\n// Style\nexport {StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform} from './style/index';\n\n// Misc\nexport {ComponentType} from './overlay/generic-component-type';\n\n// Keybindings\nexport {UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE} from './keyboard/keycodes';\n\nexport {MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector} from './compatibility/compatibility';\n\n// Animation\nexport {AnimationCurves,AnimationDurations} from './animation/animation';\n\n// Selection\nexport {MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckboxBase,_MdPseudoCheckboxBase,MdPseudoCheckbox} from './selection/index';\n\n// Compatibility\nexport {CompatibilityModule, NoConflictStyleCompatibilityMode} from './compatibility/compatibility';\n\n// Common material module\nexport {MdCommonModule, MATERIAL_SANITY_CHECKS} from './common-behaviors/common-module';\n\n// Datetime\nexport {NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS} from './datetime/index';\n\n// Placeholder\nexport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS\n} from './placeholder/placeholder-options';\n\n// Error\nexport {\n  ErrorStateMatcher,\n  ErrorOptions,\n  MD_ERROR_GLOBAL_OPTIONS,\n  defaultErrorStateMatcher,\n  showOnDirtyErrorStateMatcher\n} from './error/error-options';\nexport class MdCoreModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MdLineModule,\n    BidiModule,\n    MdRippleModule,\n    ObserveContentModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n  exports: [\n    MdLineModule,\n    BidiModule,\n    MdRippleModule,\n    ObserveContentModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCoreModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCoreModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCoreModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\nimport {FormControl, FormGroupDirective, Form, NgForm} from '@angular/forms';\n/**\n * Injection token that can be used to specify the global error options.\n */\nexport const MD_ERROR_GLOBAL_OPTIONS = new InjectionToken<ErrorOptions>('md-error-global-options');\n\nexport type ErrorStateMatcher =\n    (control: FormControl, form: FormGroupDirective | NgForm) => boolean;\n\nexport interface ErrorOptions {\n  errorStateMatcher?: ErrorStateMatcher;\n}\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function defaultErrorStateMatcher(control: FormControl, form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.touched || isSubmitted));\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function showOnDirtyErrorStateMatcher(control: FormControl,\n    form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.dirty || isSubmitted));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport { InjectionToken } from '@angular/core';\n/**\n * InjectionToken that can be used to specify the global placeholder options.\n */\nexport const MD_PLACEHOLDER_GLOBAL_OPTIONS =\n  new InjectionToken<PlaceholderOptions>('md-placeholder-global-options');\n\n/** Type for the available floatPlaceholder values. */\nexport type FloatPlaceholderType = 'always' | 'never' | 'auto';\n\nexport interface PlaceholderOptions {\n  float?: FloatPlaceholderType;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MD_DATE_FORMATS} from './date-formats';\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\n\n\nexport {DateAdapter} from './date-adapter';\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\nexport {NativeDateAdapter} from './native-date-adapter';\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{provide: DateAdapter, useClass: NativeDateAdapter}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [NativeDateModule],\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdDateFormats} from './date-formats';\n\n\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MdDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const /** @type {?} */ MD_DATE_FORMATS = new InjectionToken<MdDateFormats>('md-date-formats');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {DateAdapter} from './date-adapter';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    let /** @type {?} */ timestamp = typeof value == 'number' ? value : Date.parse(value);\n    return isNaN(timestamp) ? null : new Date(timestamp);\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetISODateString(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} str The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date, or null if date could not be parsed.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to parse.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The parsed date, or null if date could not be parsed.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible date string (https://tools.ietf.org/html/rfc3339)  for the given\n * date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ngetISODateString(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n}\n\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus, FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nimport {PlatformModule} from '../platform/index';\nexport class StyleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  declarations: [CdkMonitorFocus],\n  exports: [CdkMonitorFocus],\n  providers: [FOCUS_ORIGIN_MONITOR_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StyleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStyleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStyleModule.ctorParameters;\n}\n\n\n\nexport {TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nexport {applyCssTransform} from './apply-transform';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let /** @type {?} */ value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  SkipSelf,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Platform} from '../platform/platform';\nimport {of as observableOf} from 'rxjs/observable/of';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const /** @type {?} */ TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n\ntype MonitoredElementInfo = {\n  unlisten: Function,\n  checkChildren: boolean,\n  renderer: Renderer2,\n  subject: Subject<FocusOrigin>\n};\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nexport class FocusOriginMonitor {\n/**\n * The focus origin that the next focus event is a result of.\n */\nprivate _origin: FocusOrigin = null;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n */\nprivate _lastFocusOrigin: FocusOrigin;\n/**\n * Whether the window has just been focused.\n */\nprivate _windowFocused = false;\n/**\n * The target of the last touch event.\n */\nprivate _lastTouchTarget: EventTarget | null;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n */\nprivate _touchTimeout: number;\n/**\n * Weak map of elements being monitored to their info.\n */\nprivate _elementInfo = new WeakMap<Element, MonitoredElementInfo>();\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) {\n    this._ngZone.runOutsideAngular(() => this._registerDocumentEvents());\n  }\n/**\n * Monitors focus on an element and applies appropriate CSS classes.\n * @param {?} element The element to monitor\n * @param {?} renderer The renderer to use to apply CSS classes to the element.\n * @param {?} checkChildren Whether to count the element as focused when its children are focused.\n * @return {?} An observable that emits when the focus state of the element changes.\n *     When the element is blurred, null will be emitted.\n */\nmonitor(\n      element: HTMLElement,\n      renderer: Renderer2,\n      checkChildren: boolean): Observable<FocusOrigin> {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return observableOf(null);\n    }\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(element)) {\n      let /** @type {?} */ info = this._elementInfo.get(element); /** @type {?} */((\n      info)).checkChildren = checkChildren;\n      return /** @type {?} */(( info)).subject.asObservable();\n    }\n\n    // Create monitored element info.\n    let /** @type {?} */ info: MonitoredElementInfo = {\n      unlisten: () => {},\n      checkChildren: checkChildren,\n      renderer: renderer,\n      subject: new Subject<FocusOrigin>()\n    };\n    this._elementInfo.set(element, info);\n\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    let /** @type {?} */ focusListener = (event: FocusEvent) => this._onFocus(event, element);\n    let /** @type {?} */ blurListener = (event: FocusEvent) => this._onBlur(event, element);\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('focus', focusListener, true);\n      element.addEventListener('blur', blurListener, true);\n    });\n\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      element.removeEventListener('focus', focusListener, true);\n      element.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n/**\n * Stops monitoring an element and removes all focus classes.\n * @param {?} element The element to stop monitoring.\n * @return {?}\n */\nstopMonitoring(element: HTMLElement): void {\n    let /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(element);\n      this._elementInfo.delete(element);\n    }\n  }\n/**\n * Focuses the element via the specified focus origin.\n * @param {?} element The element to focus.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nfocusVia(element: HTMLElement, origin: FocusOrigin): void {\n    this._setOriginForCurrentEventQueue(origin);\n    element.focus();\n  }\n/**\n * Register necessary event listeners on the document and window.\n * @return {?}\n */\nprivate _registerDocumentEvents() {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n\n    // On keydown record the origin and clear any touch event that may be in progress.\n    document.addEventListener('keydown', () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    }, true);\n\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\n    // happen as a result of a touch event.\n    document.addEventListener('mousedown', () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    }, true);\n\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n    // see if a focus happens.\n    document.addEventListener('touchstart', (event: Event) => {\n      if (this._touchTimeout != null) {\n        clearTimeout(this._touchTimeout);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeout = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    }, true);\n\n    // Make a note of when the window regains focus, so we can restore the origin info for the\n    // focused element.\n    window.addEventListener('focus', () => {\n      this._windowFocused = true;\n      setTimeout(() => this._windowFocused = false, 0);\n    });\n  }\n/**\n * Sets the focus classes on the element based on the given focus origin.\n * @param {?} element The element to update the classes on.\n * @param {?=} origin The focus origin.\n * @return {?}\n */\nprivate _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      const /** @type {?} */ toggleClass = (className: string, shouldSet: boolean) => {\n        shouldSet ? elementInfo.renderer.addClass(element, className) :\n                    elementInfo.renderer.removeClass(element, className);\n      };\n\n      toggleClass('cdk-focused', !!origin);\n      toggleClass('cdk-touch-focused', origin === 'touch');\n      toggleClass('cdk-keyboard-focused', origin === 'keyboard');\n      toggleClass('cdk-mouse-focused', origin === 'mouse');\n      toggleClass('cdk-program-focused', origin === 'program');\n    }\n  }\n/**\n * Sets the origin and schedules an async function to clear it at the end of the event queue.\n * @param {?} origin The origin to set.\n * @return {?}\n */\nprivate _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._origin = origin;\n    setTimeout(() => this._origin = null, 0);\n  }\n/**\n * Checks whether the given focus event was caused by a touchstart event.\n * @param {?} event The focus event to check.\n * @return {?} Whether the event was caused by a touch.\n */\nprivate _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, renderer,  'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    let /** @type {?} */ focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n/**\n * Handles focus events on a registered element.\n * @param {?} event The focus event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n      return;\n    }\n\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (!this._origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        this._origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        this._origin = 'touch';\n      } else {\n        this._origin = 'program';\n      }\n    }\n\n    this._setClasses(element, this._origin);\n    elementInfo.subject.next(this._origin);\n    this._lastFocusOrigin = this._origin;\n    this._origin = null;\n  }\n/**\n * Handles blur events on a registered element.\n * @param {?} event The blur event.\n * @param {?} element The monitored element.\n * @return {?}\n */\n_onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget))) {\n      return;\n    }\n\n    this._setClasses(element);\n    elementInfo.subject.next(null);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction FocusOriginMonitor_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusOriginMonitor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusOriginMonitor.ctorParameters;\n/**\n * The focus origin that the next focus event is a result of.\n * @type {?}\n */\nFocusOriginMonitor.prototype._origin;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastFocusOrigin;\n/**\n * Whether the window has just been focused.\n * @type {?}\n */\nFocusOriginMonitor.prototype._windowFocused;\n/**\n * The target of the last touch event.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastTouchTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n * @type {?}\n */\nFocusOriginMonitor.prototype._touchTimeout;\n/**\n * Weak map of elements being monitored to their info.\n * @type {?}\n */\nFocusOriginMonitor.prototype._elementInfo;\n/** @type {?} */\nFocusOriginMonitor.prototype._ngZone;\n/** @type {?} */\nFocusOriginMonitor.prototype._platform;\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n * \n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nexport class CdkMonitorFocus implements OnDestroy {\nprivate _monitorSubscription: Subscription;\n   cdkFocusChange = new EventEmitter<FocusOrigin>();\n/**\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\n              renderer: Renderer2) {\n    this._monitorSubscription = this._focusOriginMonitor.monitor(\n        this._elementRef.nativeElement, renderer,\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._monitorSubscription.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cdkFocusChange': [{ type: Output },],\n};\n}\n\nfunction CdkMonitorFocus_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkMonitorFocus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkMonitorFocus.ctorParameters;\n/** @type {?} */\nCdkMonitorFocus.propDecorators;\n/** @type {?} */\nCdkMonitorFocus.prototype._monitorSubscription;\n/** @type {?} */\nCdkMonitorFocus.prototype.cdkFocusChange;\n/** @type {?} */\nCdkMonitorFocus.prototype._elementRef;\n/** @type {?} */\nCdkMonitorFocus.prototype._focusOriginMonitor;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY(\n    parentDispatcher: FocusOriginMonitor, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new FocusOriginMonitor(ngZone, platform);\n}\n\n\nexport const /** @type {?} */ FOCUS_ORIGIN_MONITOR_PROVIDER = {\n  // If there is already a FocusOriginMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusOriginMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusOriginMonitor], NgZone, Platform],\n  useFactory: FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?} Function used to deregister listener\n * \n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n\nexport const /** @type {?} */ UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subject} from 'rxjs/Subject';\n/**\n * Class to be used to power selecting one or more options from a list.\n * \\@docs-private\n */\nexport class SelectionModel<T> {\n/**\n * Currently-selected values.\n */\nprivate _selection: Set<T> = new Set();\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n */\nprivate _deselectedToEmit: T[] = [];\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n */\nprivate _selectedToEmit: T[] = [];\n/**\n * Cache for the array value of the selected items.\n */\nprivate _selected: T[] | null;\n/**\n * Selected value(s).\n * @return {?}\n */\nget selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n/**\n * Event emitted when the value has changed.\n */\nonChange: Subject<SelectionChange<T>> | null = this._emitChanges ? new Subject() : null;\n/**\n * @param {?=} _isMulti\n * @param {?=} initiallySelectedValues\n * @param {?=} _emitChanges\n */\nconstructor(\nprivate _isMulti = false,\n    initiallySelectedValues?: T[],\nprivate _emitChanges = true) {\n\n    if (initiallySelectedValues) {\n      if (_isMulti) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n/**\n * Selects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\nselect(value: T): void {\n    this._markSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Deselects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\ndeselect(value: T): void {\n    this._unmarkSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Toggles a value between selected and deselected.\n * @param {?} value\n * @return {?}\n */\ntoggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n/**\n * Clears all of the selected values.\n * @return {?}\n */\nclear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n/**\n * Determines whether a value is selected.\n * @param {?} value\n * @return {?}\n */\nisSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n/**\n * Determines whether the model does not have a value.\n * @return {?}\n */\nisEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n/**\n * Determines whether the model has a value.\n * @return {?}\n */\nhasValue(): boolean {\n    return !this.isEmpty();\n  }\n/**\n * Sorts the selected values based on a predicate function.\n * @param {?=} predicate\n * @return {?}\n */\nsort(predicate?: (a: T, b: T) => number): void {\n    if (this._isMulti && this._selected) {\n      this._selected.sort(predicate);\n    }\n  }\n/**\n * Emits a change event and clears the records of selected and deselected values.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      let /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n\n      if (this.onChange) {\n        this.onChange.next(eventData);\n      }\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n\n    this._selected = null;\n  }\n/**\n * Selects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._isMulti) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Deselects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Clears out the selected values.\n * @return {?}\n */\nprivate _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n}\n\nfunction SelectionModel_tsickle_Closure_declarations() {\n/**\n * Currently-selected values.\n * @type {?}\n */\nSelectionModel.prototype._selection;\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._deselectedToEmit;\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._selectedToEmit;\n/**\n * Cache for the array value of the selected items.\n * @type {?}\n */\nSelectionModel.prototype._selected;\n/**\n * Event emitted when the value has changed.\n * @type {?}\n */\nSelectionModel.prototype.onChange;\n/** @type {?} */\nSelectionModel.prototype._isMulti;\n/** @type {?} */\nSelectionModel.prototype._emitChanges;\n}\n\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nexport class SelectionChange<T> {\n/**\n * @param {?=} added\n * @param {?=} removed\n */\nconstructor(public added?: T[],\npublic removed?: T[]) { }\n}\n\nfunction SelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectionChange.prototype.added;\n/** @type {?} */\nSelectionChange.prototype.removed;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, Provider} from '@angular/core';\nimport {Overlay} from './overlay';\nimport {ScrollDispatchModule} from './scroll/index';\nimport {PortalModule} from '../portal/portal-directives';\nimport {ConnectedOverlayDirective, OverlayOrigin} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {VIEWPORT_RULER_PROVIDER} from './position/viewport-ruler';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\n\n\nexport const /** @type {?} */ OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n];\nexport class OverlayModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PortalModule, ScrollDispatchModule],\n  exports: [ConnectedOverlayDirective, OverlayOrigin, ScrollDispatchModule],\n  declarations: [ConnectedOverlayDirective, OverlayOrigin],\n  providers: [OVERLAY_PROVIDERS],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayModule.ctorParameters;\n}\n\n\n\nexport {Overlay} from './overlay';\nexport {OverlayContainer} from './overlay-container';\nexport {FullscreenOverlayContainer} from './fullscreen-overlay-container';\nexport {OverlayRef} from './overlay-ref';\nexport {OverlayState} from './overlay-state';\nexport {ConnectedOverlayDirective, OverlayOrigin} from './overlay-directives';\nexport {ViewportRuler} from './position/viewport-ruler';\n\nexport {HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange} from './position/connected-position';\nexport {Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule} from './scroll/index';\n\n// Export pre-defined position strategies and interface to build custom ones.\nexport {PositionStrategy} from './position/position-strategy';\nexport {GlobalPositionStrategy} from './position/global-position-strategy';\nexport {ConnectedPositionStrategy} from './position/connected-position-strategy';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\n/**\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\n * that supports correct displaying of overlay elements in Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n * It should be provided in the root component that way:\n * providers: [\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\n * ],\n */\nexport class FullscreenOverlayContainer extends OverlayContainer {\n/**\n * @return {?}\n */\nprotected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n/**\n * @return {?}\n */\nprivate _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n    let /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n    let /** @type {?} */ parent = fullscreenElement || document.body;\n    parent.appendChild(this._containerElement);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nprivate _addFullscreenChangeListener(fn: () => void) {\n    if (document.fullscreenEnabled) {\n      document.addEventListener('fullscreenchange', fn);\n    } else if (document.webkitFullscreenEnabled) {\n      document.addEventListener('webkitfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).mozFullScreenEnabled) {\n      document.addEventListener('mozfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).msFullscreenEnabled) {\n      document.addEventListener('MSFullscreenChange', fn);\n    }\n  }\n/**\n * When the page is put into fullscreen mode, a specific element is specified.\n * Only that element and its children are visible when in fullscreen mode.\n * @return {?}\n */\ngetFullscreenElement(): Element {\n    return document.fullscreenElement ||\n        document.webkitFullscreenElement ||\n        ( /** @type {?} */((document as any))).mozFullScreenElement ||\n        ( /** @type {?} */((document as any))).msFullscreenElement ||\n        null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FullscreenOverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nFullscreenOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFullscreenOverlayContainer.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    Directive,\n    EventEmitter,\n    TemplateRef,\n    ViewContainerRef,\n    Optional,\n    Input,\n    OnDestroy,\n    Output,\n    ElementRef,\n    Renderer2,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport {Overlay} from './overlay';\nimport {OverlayRef} from './overlay-ref';\nimport {TemplatePortal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {\n    ConnectionPositionPair,\n    ConnectedOverlayPositionChange\n} from './position/connected-position';\nimport {ConnectedPositionStrategy} from './position/connected-position-strategy';\nimport {Directionality, Direction} from '../bidi/index';\nimport {Scrollable} from './scroll/scrollable';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {coerceBooleanProperty} from '@angular/cdk';\nimport {ESCAPE} from '../keyboard/keycodes';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n */\nlet defaultPositionList = [\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'bottom'},\n      {overlayX: 'start', overlayY: 'top'}),\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'top'},\n      {overlayX: 'start', overlayY: 'bottom'}),\n];\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nexport class OverlayOrigin {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction OverlayOrigin_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayOrigin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayOrigin.ctorParameters;\n/** @type {?} */\nOverlayOrigin.prototype.elementRef;\n}\n\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nexport class ConnectedOverlayDirective implements OnDestroy, OnChanges {\nprivate _overlayRef: OverlayRef;\nprivate _templatePortal: TemplatePortal;\nprivate _hasBackdrop = false;\nprivate _backdropSubscription: Subscription | null;\nprivate _positionSubscription: Subscription;\nprivate _offsetX: number = 0;\nprivate _offsetY: number = 0;\nprivate _position: ConnectedPositionStrategy;\nprivate _escapeListener: Function;\n/**\n * Origin for the connected overlay.\n */\norigin: OverlayOrigin;\n/**\n * Registered connected position pairs.\n */\npositions: ConnectionPositionPair[];\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @return {?}\n */\nget offsetX(): number {\n    return this._offsetX;\n  }\n/**\n * @param {?} offsetX\n * @return {?}\n */\nset offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n    if (this._position) {\n      this._position.withOffsetX(offsetX);\n    }\n  }\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @return {?}\n */\nget offsetY() {\n    return this._offsetY;\n  }\n/**\n * @param {?} offsetY\n * @return {?}\n */\nset offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n    if (this._position) {\n      this._position.withOffsetY(offsetY);\n    }\n  }\n/**\n * The width of the overlay panel.\n */\nwidth: number | string;\n/**\n * The height of the overlay panel.\n */\nheight: number | string;\n/**\n * The min width of the overlay panel.\n */\nminWidth: number | string;\n/**\n * The min height of the overlay panel.\n */\nminHeight: number | string;\n/**\n * The custom class to be set on the backdrop element.\n */\nbackdropClass: string;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy: ScrollStrategy = this._overlay.scrollStrategies.reposition();\n/**\n * Whether the overlay is open.\n */\nopen: boolean = false;\n/**\n * Whether or not the overlay should attach a backdrop.\n * @return {?}\n */\nget hasBackdrop() {\n    return this._hasBackdrop;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset hasBackdrop(value: any) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * Event emitted when the position has changed.\n */\npositionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n/**\n * Event emitted when the overlay has been attached.\n */\nattach = new EventEmitter<void>();\n/**\n * Event emitted when the overlay has been detached.\n */\ndetach = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _renderer\n * @param {?} templateRef\n * @param {?} viewContainerRef\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _renderer: Renderer2,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\nprivate _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n/**\n * The associated overlay reference.\n * @return {?}\n */\nget overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n/**\n * The element's layout direction.\n * @return {?}\n */\nget dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyOverlay();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n/**\n * Creates an overlay\n * @return {?}\n */\nprivate _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n/**\n * Builds the overlay config based on the directive's inputs\n * @return {?}\n */\nprivate _buildConfig(): OverlayState {\n    let /** @type {?} */ overlayConfig = new OverlayState();\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    overlayConfig.hasBackdrop = this.hasBackdrop;\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    this._position = /** @type {?} */(( this._createPositionStrategy() as ConnectedPositionStrategy));\n    overlayConfig.positionStrategy = this._position;\n    overlayConfig.scrollStrategy = this.scrollStrategy;\n\n    return overlayConfig;\n  }\n/**\n * Returns the position strategy of the overlay to be set on the overlay config\n * @return {?}\n */\nprivate _createPositionStrategy(): ConnectedPositionStrategy {\n    const /** @type {?} */ pos = this.positions[0];\n    const /** @type {?} */ originPoint = {originX: pos.originX, originY: pos.originY};\n    const /** @type {?} */ overlayPoint = {overlayX: pos.overlayX, overlayY: pos.overlayY};\n\n    const /** @type {?} */ strategy = this._overlay.position()\n      .connectedTo(this.origin.elementRef, originPoint, overlayPoint)\n      .withOffsetX(this.offsetX)\n      .withOffsetY(this.offsetY);\n\n    this._handlePositionChanges(strategy);\n\n    return strategy;\n  }\n/**\n * @param {?} strategy\n * @return {?}\n */\nprivate _handlePositionChanges(strategy: ConnectedPositionStrategy): void {\n    for (let /** @type {?} */ i = 1; i < this.positions.length; i++) {\n      strategy.withFallbackPosition(\n          {originX: this.positions[i].originX, originY: this.positions[i].originY},\n          {overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY}\n      );\n    }\n\n    this._positionSubscription =\n        strategy.onPositionChange.subscribe(pos => this.positionChange.emit(pos));\n  }\n/**\n * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    }\n\n    this._position.withDirection(this.dir);\n    this._overlayRef.getState().direction = this.dir;\n    this._initEscapeListener();\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n        this.backdropClick.emit();\n      });\n    }\n  }\n/**\n * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n      this._backdropSubscription = null;\n    }\n\n    if (this._escapeListener) {\n      this._escapeListener();\n    }\n  }\n/**\n * Destroys the overlay created by this directive.\n * @return {?}\n */\nprivate _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n\n    if (this._escapeListener) {\n      this._escapeListener();\n    }\n  }\n/**\n * Sets the event listener that closes the overlay when pressing Escape.\n * @return {?}\n */\nprivate _initEscapeListener() {\n    this._escapeListener = this._renderer.listen('document', 'keydown', (event: KeyboardEvent) => {\n      if (event.keyCode === ESCAPE) {\n        this._detachOverlay();\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Renderer2, },\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'origin': [{ type: Input },],\n'positions': [{ type: Input },],\n'offsetX': [{ type: Input },],\n'offsetY': [{ type: Input },],\n'width': [{ type: Input },],\n'height': [{ type: Input },],\n'minWidth': [{ type: Input },],\n'minHeight': [{ type: Input },],\n'backdropClass': [{ type: Input },],\n'scrollStrategy': [{ type: Input },],\n'open': [{ type: Input },],\n'hasBackdrop': [{ type: Input },],\n'backdropClick': [{ type: Output },],\n'positionChange': [{ type: Output },],\n'attach': [{ type: Output },],\n'detach': [{ type: Output },],\n};\n}\n\nfunction ConnectedOverlayDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedOverlayDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayDirective.ctorParameters;\n/** @type {?} */\nConnectedOverlayDirective.propDecorators;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlayRef;\n/** @type {?} */\nConnectedOverlayDirective.prototype._templatePortal;\n/** @type {?} */\nConnectedOverlayDirective.prototype._hasBackdrop;\n/** @type {?} */\nConnectedOverlayDirective.prototype._backdropSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._positionSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetX;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetY;\n/** @type {?} */\nConnectedOverlayDirective.prototype._position;\n/** @type {?} */\nConnectedOverlayDirective.prototype._escapeListener;\n/**\n * Origin for the connected overlay.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.origin;\n/**\n * Registered connected position pairs.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positions;\n/**\n * The width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.width;\n/**\n * The height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.height;\n/**\n * The min width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minWidth;\n/**\n * The min height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minHeight;\n/**\n * The custom class to be set on the backdrop element.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClass;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.scrollStrategy;\n/**\n * Whether the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.open;\n/**\n * Event emitted when the backdrop is clicked.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClick;\n/**\n * Event emitted when the position has changed.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positionChange;\n/**\n * Event emitted when the overlay has been attached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.attach;\n/**\n * Event emitted when the overlay has been detached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.detach;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlay;\n/** @type {?} */\nConnectedOverlayDirective.prototype._renderer;\n/** @type {?} */\nConnectedOverlayDirective.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ComponentFactoryResolver,\n  Injectable,\n  ApplicationRef,\n  Injector,\n  NgZone,\n} from '@angular/core';\nimport {OverlayState} from './overlay-state';\nimport {DomPortalHost} from '../portal/dom-portal-host';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {OverlayContainer} from './overlay-container';\nimport {ScrollStrategy, ScrollStrategyOptions} from './scroll/index';\n/**\n * Next overlay unique ID.\n */\nlet nextUniqueId = 0;\n/**\n * The default state for newly created overlays.\n */\nlet defaultState = new OverlayState();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n * \n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nexport class Overlay {\n/**\n * @param {?} scrollStrategies\n * @param {?} _overlayContainer\n * @param {?} _componentFactoryResolver\n * @param {?} _positionBuilder\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n */\nconstructor(public scrollStrategies: ScrollStrategyOptions,\nprivate _overlayContainer: OverlayContainer,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _positionBuilder: OverlayPositionBuilder,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone) { }\n/**\n * Creates an overlay.\n * @param {?=} state State to apply to the overlay.\n * @return {?} Reference to the created overlay.\n */\ncreate(state: OverlayState = defaultState): OverlayRef {\n    return this._createOverlayRef(this._createPaneElement(), state);\n  }\n/**\n * Returns a position builder that can be used, via fluent API,\n * to construct and configure a position strategy.\n * @return {?}\n */\nposition(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n/**\n * Creates the DOM element for an overlay and appends it to the overlay container.\n * @return {?} Newly-created pane element\n */\nprivate _createPaneElement(): HTMLElement {\n    let /** @type {?} */ pane = document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    this._overlayContainer.getContainerElement().appendChild(pane);\n\n    return pane;\n  }\n/**\n * Create a DomPortalHost into which the overlay content can be loaded.\n * @param {?} pane The DOM element to turn into a portal host.\n * @return {?} A portal host for the given DOM element.\n */\nprivate _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n/**\n * Creates an OverlayRef for an overlay in the given DOM element.\n * @param {?} pane DOM element for the overlay\n * @param {?} state\n * @return {?}\n */\nprivate _createOverlayRef(pane: HTMLElement, state: OverlayState): OverlayRef {\n    let /** @type {?} */ scrollStrategy = state.scrollStrategy || this.scrollStrategies.noop();\n    let /** @type {?} */ portalHost = this._createPortalHost(pane);\n    return new OverlayRef(portalHost, pane, state, scrollStrategy, this._ngZone);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollStrategyOptions, },\n{type: OverlayContainer, },\n{type: ComponentFactoryResolver, },\n{type: OverlayPositionBuilder, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nfunction Overlay_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlay.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlay.ctorParameters;\n/** @type {?} */\nOverlay.prototype.scrollStrategies;\n/** @type {?} */\nOverlay.prototype._overlayContainer;\n/** @type {?} */\nOverlay.prototype._componentFactoryResolver;\n/** @type {?} */\nOverlay.prototype._positionBuilder;\n/** @type {?} */\nOverlay.prototype._appRef;\n/** @type {?} */\nOverlay.prototype._injector;\n/** @type {?} */\nOverlay.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\n  protected _containerElement: HTMLElement;\nprivate _themeClass: string;\n/**\n * Base theme to be applied to all overlay-based components.\n * @return {?}\n */\nget themeClass(): string { return this._themeClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset themeClass(value: string) {\n    if (this._containerElement) {\n      this._containerElement.classList.remove(this._themeClass);\n\n      if (value) {\n        this._containerElement.classList.add(value);\n      }\n    }\n\n    this._themeClass = value;\n  }\n/**\n * This method returns the overlay container element.  It will lazily\n * create the element the first time  it is called to facilitate using\n * the container in non-browser environments.\n * @return {?} the container element\n */\ngetContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n/**\n * Create the overlay container element, which is simply a div\n * with the 'cdk-overlay-container' class on the document body.\n * @return {?}\n */\nprotected _createContainer(): void {\n    let /** @type {?} */ container = document.createElement('div');\n    container.classList.add('cdk-overlay-container');\n\n    if (this._themeClass) {\n      container.classList.add(this._themeClass);\n    }\n\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayContainer.ctorParameters;\n/** @type {?} */\nOverlayContainer.prototype._containerElement;\n/** @type {?} */\nOverlayContainer.prototype._themeClass;\n}\n\n/**\n * @param {?} parentContainer\n * @return {?}\n */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer) {\n  return parentContainer || new OverlayContainer();\n}\n\nexport const /** @type {?} */ OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewportRuler} from './viewport-ruler';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {ElementRef, Injectable} from '@angular/core';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {OverlayConnectionPosition, OriginConnectionPosition} from './connected-position';\n/**\n * Builder for overlay position strategy.\n */\nexport class OverlayPositionBuilder {\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * Creates a global position strategy.\n * @return {?}\n */\nglobal(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n/**\n * Creates a relative position strategy.\n * @param {?} elementRef\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nconnectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n];\n}\n\nfunction OverlayPositionBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayPositionBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayPositionBuilder.ctorParameters;\n/** @type {?} */\nOverlayPositionBuilder.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position-strategy';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\nprivate _cssPosition: string = 'static';\nprivate _topOffset: string = '';\nprivate _bottomOffset: string = '';\nprivate _leftOffset: string = '';\nprivate _rightOffset: string = '';\nprivate _alignItems: string = '';\nprivate _justifyContent: string = '';\nprivate _width: string = '';\nprivate _height: string = '';\nprivate _wrapper: HTMLElement | null = null;\n/**\n * Sets the top position of the overlay. Clears any previously set vertical position.\n * @param {?=} value New top offset.\n * @return {?}\n */\ntop(value = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n/**\n * Sets the left position of the overlay. Clears any previously set horizontal position.\n * @param {?=} value New left offset.\n * @return {?}\n */\nleft(value = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n/**\n * Sets the bottom position of the overlay. Clears any previously set vertical position.\n * @param {?=} value New bottom offset.\n * @return {?}\n */\nbottom(value = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n/**\n * Sets the right position of the overlay. Clears any previously set horizontal position.\n * @param {?=} value New right offset.\n * @return {?}\n */\nright(value = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n/**\n * Sets the overlay width and clears any previously set width.\n * @param {?=} value New width for the overlay\n * @return {?}\n */\nwidth(value = ''): this {\n    this._width = value;\n\n    // When the width is 100%, we should reset the `left` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.left('0px');\n    }\n\n    return this;\n  }\n/**\n * Sets the overlay height and clears any previously set height.\n * @param {?=} value New height for the overlay\n * @return {?}\n */\nheight(value = ''): this {\n    this._height = value;\n\n    // When the height is 100%, we should reset the `top` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.top('0px');\n    }\n\n    return this;\n  }\n/**\n * Centers the overlay horizontally with an optional offset.\n * Clears any previously set horizontal position.\n * \n * @param {?=} offset Overlay offset from the horizontal center.\n * @return {?}\n */\ncenterHorizontally(offset = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n/**\n * Centers the overlay vertically with an optional offset.\n * Clears any previously set vertical position.\n * \n * @param {?=} offset Overlay offset from the vertical center.\n * @return {?}\n */\ncenterVertically(offset = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n/**\n * Apply the position to the element.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS.\n * @return {?} Resolved when the styles have been applied.\n */\napply(element: HTMLElement): void {\n    if (!this._wrapper && element.parentNode) {\n      this._wrapper = document.createElement('div');\n      this._wrapper.classList.add('cdk-global-overlay-wrapper');\n      element.parentNode.insertBefore(this._wrapper, element);\n      this._wrapper.appendChild(element);\n    }\n\n    let /** @type {?} */ styles = element.style;\n    let /** @type {?} */ parentStyles = ( /** @type {?} */((element.parentNode as HTMLElement))).style;\n\n    styles.position = this._cssPosition;\n    styles.marginTop = this._topOffset;\n    styles.marginLeft = this._leftOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n    styles.width = this._width;\n    styles.height = this._height;\n\n    parentStyles.justifyContent = this._justifyContent;\n    parentStyles.alignItems = this._alignItems;\n  }\n/**\n * Removes the wrapper element from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._wrapper && this._wrapper.parentNode) {\n      this._wrapper.parentNode.removeChild(this._wrapper);\n      this._wrapper = null;\n    }\n  }\n}\n\nfunction GlobalPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nGlobalPositionStrategy.prototype._cssPosition;\n/** @type {?} */\nGlobalPositionStrategy.prototype._topOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._bottomOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._leftOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._rightOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._alignItems;\n/** @type {?} */\nGlobalPositionStrategy.prototype._justifyContent;\n/** @type {?} */\nGlobalPositionStrategy.prototype._width;\n/** @type {?} */\nGlobalPositionStrategy.prototype._height;\n/** @type {?} */\nGlobalPositionStrategy.prototype._wrapper;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler} from './viewport-ruler';\nimport {\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n  ConnectedOverlayPositionChange, ScrollableViewProperties\n} from './connected-position';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Scrollable} from '../scroll/scrollable';\n\n/**\n * Container to hold the bounding positions of a particular element with respect to the viewport,\n * where top and bottom are the y-axis coordinates of the bounding rectangle and left and right are\n * the x-axis coordinates.\n */\ntype ElementBoundingPositions = {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n};\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\nprivate _dir = 'ltr';\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n */\nprivate _offsetX: number = 0;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n */\nprivate _offsetY: number = 0;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n */\nprivate scrollables: Scrollable[] = [];\n/**\n * Whether the we're dealing with an RTL context\n * @return {?}\n */\nget _isRtl() {\n    return this._dir === 'rtl';\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n */\n_preferredPositions: ConnectionPositionPair[] = [];\n/**\n * The origin element against which the overlay will be positioned.\n */\nprivate _origin: HTMLElement;\n/**\n * The overlay pane element.\n */\nprivate _pane: HTMLElement;\n/**\n * The last position to have been calculated as the best fit position.\n */\nprivate _lastConnectedPosition: ConnectionPositionPair;\n\n  _onPositionChange:\n      Subject<ConnectedOverlayPositionChange> = new Subject<ConnectedOverlayPositionChange>();\n/**\n * Emits an event when the connection point changes.\n * @return {?}\n */\nget onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._onPositionChange.asObservable();\n  }\n/**\n * @param {?} _connectedTo\n * @param {?} _originPos\n * @param {?} _overlayPos\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _connectedTo: ElementRef,\nprivate _originPos: OriginConnectionPosition,\nprivate _overlayPos: OverlayConnectionPosition,\nprivate _viewportRuler: ViewportRuler) {\n    this._origin = this._connectedTo.nativeElement;\n    this.withFallbackPosition(_originPos, _overlayPos);\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @return {?}\n */\nget positions() {\n    return this._preferredPositions;\n  }\n/**\n * To be used to for any cleanup after the element gets destroyed.\n * @return {?}\n */\ndispose() { }\n/**\n * Updates the position of the overlay element, using whichever preferred position relative\n * to the origin fits on-screen.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS styles.\n * @return {?} Resolves when the styles have been applied.\n */\napply(element: HTMLElement): void {\n    // Cache the overlay pane element in case re-calculating position is necessary\n    this._pane = element;\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = element.getBoundingClientRect();\n\n    // We use the viewport rect to determine whether a position would go off-screen.\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n\n    // Fallback point if none of the fallbacks fit into the viewport.\n    let /** @type {?} */ fallbackPoint: OverlayPoint | undefined;\n    let /** @type {?} */ fallbackPosition: ConnectionPositionPair | undefined;\n\n    // We want to place the overlay in the first of the preferred positions such that the\n    // overlay fits on-screen.\n    for (let /** @type {?} */ pos of this._preferredPositions) {\n      // Get the (x, y) point of connection on the origin, and then use that to get the\n      // (top, left) coordinate for the overlay at `pos`.\n      let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, pos);\n      let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay in the calculated position fits on-screen, put it there and we're done.\n      if (overlayPoint.fitsInViewport) {\n        this._setElementPosition(element, overlayRect, overlayPoint, pos);\n\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastConnectedPosition = pos;\n\n        // Notify that the position has been changed along with its change properties.\n        const /** @type {?} */ scrollableViewProperties = this.getScrollableViewProperties(element);\n        const /** @type {?} */ positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);\n        this._onPositionChange.next(positionChange);\n\n        return;\n      } else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {\n        fallbackPoint = overlayPoint;\n        fallbackPosition = pos;\n      }\n    }\n\n    // If none of the preferred positions were in the viewport, take the one\n    // with the largest visible area.\n    this._setElementPosition(element, overlayRect, /** @type {?} */(( fallbackPoint)), /** @type {?} */(( fallbackPosition)));\n  }\n/**\n * This re-aligns the overlay element with the trigger in its last calculated position,\n * even if a position higher in the \"preferred positions\" list would now fit. This\n * allows one to re-align the panel without changing the orientation of the panel.\n * @return {?}\n */\nrecalculateLastPosition(): void {\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = this._pane.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ lastPosition = this._lastConnectedPosition || this._preferredPositions[0];\n\n    let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, lastPosition);\n    let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, lastPosition);\n    this._setElementPosition(this._pane, overlayRect, overlayPoint, lastPosition);\n  }\n/**\n * Sets the list of Scrollable containers that host the origin element so that\n * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n * Scrollable must be an ancestor element of the strategy's origin element.\n * @param {?} scrollables\n * @return {?}\n */\nwithScrollableContainers(scrollables: Scrollable[]) {\n    this.scrollables = scrollables;\n  }\n/**\n * Adds a new preferred fallback position.\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nwithFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): this {\n    this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));\n    return this;\n  }\n/**\n * Sets the layout direction so the overlay's position can be adjusted to match.\n * @param {?} dir New layout direction.\n * @return {?}\n */\nwithDirection(dir: 'ltr' | 'rtl'): this {\n    this._dir = dir;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the x-axis\n * @param {?} offset New offset in the X axis.\n * @return {?}\n */\nwithOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the y-axis\n * @param {?} offset New offset in the Y axis.\n * @return {?}\n */\nwithOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n/**\n * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getStartX(rect: ClientRect): number {\n    return this._isRtl ? rect.right : rect.left;\n  }\n/**\n * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getEndX(rect: ClientRect): number {\n    return this._isRtl ? rect.left : rect.right;\n  }\n/**\n * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n * @param {?} originRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOriginConnectionPoint(originRect: ClientRect, pos: ConnectionPositionPair): Point {\n    const /** @type {?} */ originStartX = this._getStartX(originRect);\n    const /** @type {?} */ originEndX = this._getEndX(originRect);\n\n    let /** @type {?} */ x: number;\n    if (pos.originX == 'center') {\n      x = originStartX + (originRect.width / 2);\n    } else {\n      x = pos.originX == 'start' ? originStartX : originEndX;\n    }\n\n    let /** @type {?} */ y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n/**\n * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n * origin point to which the overlay should be connected, as well as how much of the element\n * would be inside the viewport at that position.\n * @param {?} originPoint\n * @param {?} overlayRect\n * @param {?} viewportRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      viewportRect: ClientRect,\n      pos: ConnectionPositionPair): OverlayPoint {\n    // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\n    // relative to the origin point.\n    let /** @type {?} */ overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl ? 0 : -overlayRect.width;\n    }\n\n    let /** @type {?} */ overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    let /** @type {?} */ x = originPoint.x + overlayStartX + this._offsetX;\n    let /** @type {?} */ y = originPoint.y + overlayStartY + this._offsetY;\n\n    // How much the overlay would overflow at this position, on each side.\n    let /** @type {?} */ leftOverflow = 0 - x;\n    let /** @type {?} */ rightOverflow = (x + overlayRect.width) - viewportRect.width;\n    let /** @type {?} */ topOverflow = 0 - y;\n    let /** @type {?} */ bottomOverflow = (y + overlayRect.height) - viewportRect.height;\n\n    // Visible parts of the element on each axis.\n    let /** @type {?} */ visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);\n    let /** @type {?} */ visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);\n\n    // The area of the element that's within the viewport.\n    let /** @type {?} */ visibleArea = visibleWidth * visibleHeight;\n    let /** @type {?} */ fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;\n\n    return {x, y, fitsInViewport, visibleArea};\n  }\n/**\n * Gets the view properties of the trigger and overlay, including whether they are clipped\n * or completely outside the view of any of the strategy's scrollables.\n * @param {?} overlay\n * @return {?}\n */\nprivate getScrollableViewProperties(overlay: HTMLElement): ScrollableViewProperties {\n    const /** @type {?} */ originBounds = this._getElementBounds(this._origin);\n    const /** @type {?} */ overlayBounds = this._getElementBounds(overlay);\n    const /** @type {?} */ scrollContainerBounds = this.scrollables.map((scrollable: Scrollable) => {\n      return this._getElementBounds(scrollable.getElementRef().nativeElement);\n    });\n\n    return {\n      isOriginClipped: this.isElementClipped(originBounds, scrollContainerBounds),\n      isOriginOutsideView: this.isElementOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: this.isElementClipped(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: this.isElementOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n/**\n * Whether the element is completely out of the view of any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementOutsideView(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ outsideAbove = elementBounds.bottom < containerBounds.top;\n      const /** @type {?} */ outsideBelow = elementBounds.top > containerBounds.bottom;\n      const /** @type {?} */ outsideLeft = elementBounds.right < containerBounds.left;\n      const /** @type {?} */ outsideRight = elementBounds.left > containerBounds.right;\n\n      return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n  }\n/**\n * Whether the element is clipped by any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementClipped(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ clippedAbove = elementBounds.top < containerBounds.top;\n      const /** @type {?} */ clippedBelow = elementBounds.bottom > containerBounds.bottom;\n      const /** @type {?} */ clippedLeft = elementBounds.left < containerBounds.left;\n      const /** @type {?} */ clippedRight = elementBounds.right > containerBounds.right;\n\n      return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n  }\n/**\n * Physically positions the overlay element to the given coordinate.\n * @param {?} element\n * @param {?} overlayRect\n * @param {?} overlayPoint\n * @param {?} pos\n * @return {?}\n */\nprivate _setElementPosition(\n      element: HTMLElement,\n      overlayRect: ClientRect,\n      overlayPoint: Point,\n      pos: ConnectionPositionPair) {\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear above\n    // or below the origin and the direction in which the element will expand.\n    let /** @type {?} */ verticalStyleProperty = pos.overlayY === 'bottom' ? 'bottom' : 'top';\n\n    // When using `bottom`, we adjust the y position such that it is the distance\n    // from the bottom of the viewport rather than the top.\n    let /** @type {?} */ y = verticalStyleProperty === 'top' ?\n        overlayPoint.y :\n        document.documentElement.clientHeight - (overlayPoint.y + overlayRect.height);\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let /** @type {?} */ horizontalStyleProperty: string;\n    if (this._dir === 'rtl') {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    let /** @type {?} */ x = horizontalStyleProperty === 'left' ?\n      overlayPoint.x :\n      document.documentElement.clientWidth - (overlayPoint.x + overlayRect.width);\n\n\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    ['top', 'bottom', 'left', 'right'].forEach(p => element.style[p] = null);\n\n    element.style[verticalStyleProperty] = `${y}px`;\n    element.style[horizontalStyleProperty] = `${x}px`;\n  }\n/**\n * Returns the bounding positions of the provided element with respect to the viewport.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementBounds(element: HTMLElement): ElementBoundingPositions {\n    const /** @type {?} */ boundingClientRect = element.getBoundingClientRect();\n    return {\n      top: boundingClientRect.top,\n      right: boundingClientRect.left + boundingClientRect.width,\n      bottom: boundingClientRect.top + boundingClientRect.height,\n      left: boundingClientRect.left\n    };\n  }\n/**\n * Subtracts the amount that an element is overflowing on an axis from it's length.\n * @param {?} length\n * @param {...?} overflows\n * @return {?}\n */\nprivate _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n}\n\nfunction ConnectedPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedPositionStrategy.prototype._dir;\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetX;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetY;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n * @type {?}\n */\nConnectedPositionStrategy.prototype.scrollables;\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._preferredPositions;\n/**\n * The origin element against which the overlay will be positioned.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._origin;\n/**\n * The overlay pane element.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._pane;\n/**\n * The last position to have been calculated as the best fit position.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._lastConnectedPosition;\n/** @type {?} */\nConnectedPositionStrategy.prototype._onPositionChange;\n/** @type {?} */\nConnectedPositionStrategy.prototype._connectedTo;\n/** @type {?} */\nConnectedPositionStrategy.prototype._originPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._overlayPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._viewportRuler;\n}\n\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Expands the simple (x, y) coordinate by adding info about whether the\n * element would fit inside the viewport at that position, as well as\n * how much of the element would be visible.\n */\ninterface OverlayPoint extends Point {\n  visibleArea: number;\n  fitsInViewport: boolean;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\n\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n/**\n * The points of the origin element and the overlay element to connect.\n */\nexport class ConnectionPositionPair {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n/**\n * @param {?} origin\n * @param {?} overlay\n */\nconstructor(origin: OriginConnectionPosition, overlay: OverlayConnectionPosition) {\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\nfunction ConnectionPositionPair_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectionPositionPair.prototype.originX;\n/** @type {?} */\nConnectionPositionPair.prototype.originY;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayX;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayY;\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n * \n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n * \n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n * \n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n */\nexport class ScrollableViewProperties {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\nfunction ScrollableViewProperties_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginOutsideView;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayOutsideView;\n}\n\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nexport class ConnectedOverlayPositionChange {\n/**\n * @param {?} connectionPair\n * @param {?} scrollableViewProperties\n */\nconstructor(public connectionPair: ConnectionPositionPair,\npublic scrollableViewProperties: ScrollableViewProperties) {}\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionPositionPair, },\n{type: ScrollableViewProperties, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction ConnectedOverlayPositionChange_tsickle_Closure_declarations() {\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayPositionChange.ctorParameters;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.connectionPair;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.scrollableViewProperties;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgZone} from '@angular/core';\nimport {PortalHost, Portal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalHost {\nprivate _backdropElement: HTMLElement | null = null;\nprivate _backdropClick: Subject<any> = new Subject();\nprivate _attachments = new Subject<void>();\nprivate _detachments = new Subject<void>();\n/**\n * @param {?} _portalHost\n * @param {?} _pane\n * @param {?} _state\n * @param {?} _scrollStrategy\n * @param {?} _ngZone\n */\nconstructor(\nprivate _portalHost: PortalHost,\nprivate _pane: HTMLElement,\nprivate _state: OverlayState,\nprivate _scrollStrategy: ScrollStrategy,\nprivate _ngZone: NgZone) {\n\n    _scrollStrategy.attach(this);\n  }\n/**\n * The overlay's HTML element\n * @return {?}\n */\nget overlayElement(): HTMLElement {\n    return this._pane;\n  }\n/**\n * Attaches the overlay to a portal instance and adds the backdrop.\n * @param {?} portal Portal instance to which to attach the overlay.\n * @return {?} The portal attachment result.\n */\nattach(portal: Portal<any>): any {\n    let /** @type {?} */ attachResult = this._portalHost.attach(portal);\n\n    // Update the pane element with the given state configuration.\n    this._updateStackingOrder();\n    this.updateSize();\n    this.updateDirection();\n    this.updatePosition();\n    this._scrollStrategy.enable();\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._state.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._state.panelClass) {\n      this._pane.classList.add(this._state.panelClass);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    return attachResult;\n  }\n/**\n * Detaches an overlay from a portal.\n * @return {?} Resolves when the overlay has been detached.\n */\ndetach(): Promise<any> {\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n    this._scrollStrategy.disable();\n\n    let /** @type {?} */ detachmentResult = this._portalHost.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    return detachmentResult;\n  }\n/**\n * Cleans up the overlay from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.dispose();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n\n    this.detachBackdrop();\n    this._portalHost.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._detachments.next();\n    this._detachments.complete();\n  }\n/**\n * Checks whether the overlay has been attached.\n * @return {?}\n */\nhasAttached(): boolean {\n    return this._portalHost.hasAttached();\n  }\n/**\n * Returns an observable that emits when the backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._backdropClick.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been attached.\n * @return {?}\n */\nattachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been detached.\n * @return {?}\n */\ndetachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n/**\n * Gets the current state config of the overlay.\n * @return {?}\n */\ngetState(): OverlayState {\n    return this._state;\n  }\n/**\n * Updates the position of the overlay based on the position strategy.\n * @return {?}\n */\nupdatePosition() {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.apply(this._pane);\n    }\n  }\n/**\n * Updates the text direction of the overlay panel.\n * @return {?}\n */\nprivate updateDirection() {\n    this._pane.setAttribute('dir', /** @type {?} */(( this._state.direction)));\n  }\n/**\n * Updates the size of the overlay based on the overlay config.\n * @return {?}\n */\nupdateSize() {\n    if (this._state.width || this._state.width === 0) {\n      this._pane.style.width = formatCssUnit(this._state.width);\n    }\n\n    if (this._state.height || this._state.height === 0) {\n      this._pane.style.height = formatCssUnit(this._state.height);\n    }\n\n    if (this._state.minWidth || this._state.minWidth === 0) {\n      this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\n    }\n\n    if (this._state.minHeight || this._state.minHeight === 0) {\n      this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\n    }\n  }\n/**\n * Toggles the pointer events for the overlay pane element.\n * @param {?} enablePointer\n * @return {?}\n */\nprivate _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n/**\n * Attaches a backdrop for this overlay.\n * @return {?}\n */\nprivate _attachBackdrop() {\n    this._backdropElement = document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._state.backdropClass) {\n      this._backdropElement.classList.add(this._state.backdropClass);\n    } /** @type {?} */((\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._pane.parentElement)).insertBefore(this._backdropElement, this._pane);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', () => this._backdropClick.next(null));\n\n    // Add class to fade-in the backdrop after one frame.\n    requestAnimationFrame(() => {\n      if (this._backdropElement) {\n        this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\n      }\n    });\n  }\n/**\n * Updates the stacking order of the element, moving it to the top if necessary.\n * This is required in cases where one overlay was detached, while another one,\n * that should be behind it, was destroyed. The next time both of them are opened,\n * the stacking will be wrong, because the detached element's pane will still be\n * in its original DOM position.\n * @return {?}\n */\nprivate _updateStackingOrder() {\n    if (this._pane.nextSibling) { /** @type {?} */((\n      this._pane.parentNode)).appendChild(this._pane);\n    }\n  }\n/**\n * Detaches the backdrop (if any) associated with the overlay.\n * @return {?}\n */\ndetachBackdrop(): void {\n    let /** @type {?} */ backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let /** @type {?} */ finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n      if (this._state.backdropClass) {\n        backdropToDetach.classList.remove(this._state.backdropClass);\n      }\n\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(finishDetach, 500);\n      });\n    }\n  }\n}\n\nfunction OverlayRef_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayRef.prototype._backdropElement;\n/** @type {?} */\nOverlayRef.prototype._backdropClick;\n/** @type {?} */\nOverlayRef.prototype._attachments;\n/** @type {?} */\nOverlayRef.prototype._detachments;\n/** @type {?} */\nOverlayRef.prototype._portalHost;\n/** @type {?} */\nOverlayRef.prototype._pane;\n/** @type {?} */\nOverlayRef.prototype._state;\n/** @type {?} */\nOverlayRef.prototype._scrollStrategy;\n/** @type {?} */\nOverlayRef.prototype._ngZone;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction formatCssUnit(value: number | string) {\n  return typeof value === 'string' ? /** @type {?} */(( value as string)) : `${value}px`;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction} from '../bidi/index';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\n/**\n * OverlayState is a bag of values for either the initial configuration or current state of an\n * overlay.\n */\nexport class OverlayState {\n/**\n * Strategy with which to position the overlay.\n */\npositionStrategy: PositionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy: ScrollStrategy;\n/**\n * Custom class to add to the overlay pane.\n */\npanelClass?: string = '';\n/**\n * Whether the overlay has a backdrop.\n */\nhasBackdrop?: boolean = false;\n/**\n * Custom class to add to the backdrop\n */\nbackdropClass?: string = 'cdk-overlay-dark-backdrop';\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nwidth?: number | string;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nheight?: number | string;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminWidth?: number | string;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminHeight?: number | string;\n/**\n * The direction of the text in the overlay panel.\n */\ndirection?: Direction = 'ltr';\n\n  // TODO(jelbourn): configuration still to add\n  // - focus trap\n  // - disable pointer events\n  // - z-index\n}\n\nfunction OverlayState_tsickle_Closure_declarations() {\n/**\n * Strategy with which to position the overlay.\n * @type {?}\n */\nOverlayState.prototype.positionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nOverlayState.prototype.scrollStrategy;\n/**\n * Custom class to add to the overlay pane.\n * @type {?}\n */\nOverlayState.prototype.panelClass;\n/**\n * Whether the overlay has a backdrop.\n * @type {?}\n */\nOverlayState.prototype.hasBackdrop;\n/**\n * Custom class to add to the backdrop\n * @type {?}\n */\nOverlayState.prototype.backdropClass;\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.width;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.height;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minWidth;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minHeight;\n/**\n * The direction of the text in the overlay panel.\n * @type {?}\n */\nOverlayState.prototype.direction;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdSelectionModule} from '../selection/index';\nimport {MdOption} from './option';\nimport {MdOptgroup} from './optgroup';\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdSelectionModule],\n  exports: [MdOption, MdOptgroup],\n  declarations: [MdOption, MdOptgroup]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\n\nexport {MdOptionSelectionChange,MdOption} from './option';\nexport {MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './optgroup';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  NgModule,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '@angular/cdk';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../../core/compatibility/compatibility';\nimport {MdOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n */\nmultiple: boolean = false;\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} group\n * @param {?} _isCompatibilityMode\n */\nconstructor(\nprivate _element: ElementRef,\npublic readonly group: MdOptgroup,\npublic _isCompatibilityMode: boolean) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    this._active = true;\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    this._active = false;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Fetches the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MdOptgroup, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @type {?}\n */\nMdOption.prototype.multiple;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype.group;\n/** @type {?} */\nMdOption.prototype._isCompatibilityMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, ContentChildren, QueryList, Input} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdOptgroupBase { }\nexport const /** @type {?} */ _MdOptgroupMixinBase = mixinDisabled(MdOptgroupBase);\n\n// Counter for unique group ids.\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `md-option`.\n */\nexport class MdOptgroup extends _MdOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-optgroup, mat-optgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MdOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptgroup.ctorParameters;\n/** @type {?} */\nMdOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMdOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMdOptgroup.prototype._labelId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\nprivate _disabled: boolean = false;\n/**\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdSelectionModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MdPseudoCheckbox],\n  declarations: [MdPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectionModule.ctorParameters;\n}\n\n\n\nexport {MdPseudoCheckboxState,MdPseudoCheckboxBase,_MdPseudoCheckboxBase,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../../common-behaviors/color';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * \\@docs-private\n */\nexport class MdPseudoCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdPseudoCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckboxBase.prototype._renderer;\n/** @type {?} */\nMdPseudoCheckboxBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdPseudoCheckboxBase = mixinColor(MdPseudoCheckboxBase, 'accent');\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox extends _MdPseudoCheckboxBase implements CanColor {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, renderer: Renderer2) {\n    super(renderer, elementRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  inputs: ['color'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {ElementRef, Renderer2} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasRenderer {\n  _renderer: Renderer2;\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\n    : Constructor<CanColor> & T {\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\n      const /** @type {?} */ colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdRipple} from './ripple';\nimport {MdCommonModule} from '../common-behaviors/common-module';\nimport {VIEWPORT_RULER_PROVIDER} from '../overlay/position/viewport-ruler';\nimport {ScrollDispatchModule} from '../overlay/scroll/index';\nimport {PlatformModule} from '../platform/index';\n\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\n  exports: [MdRipple, MdCommonModule],\n  declarations: [MdRipple],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {SCROLL_DISPATCHER_PROVIDER} from './scroll-dispatcher';\nimport {Scrollable} from './scrollable';\nimport {PlatformModule} from '../../platform/index';\nimport {ScrollStrategyOptions} from './scroll-strategy-options';\n\nexport {Scrollable} from './scrollable';\nexport {ScrollDispatcher} from './scroll-dispatcher';\n\n// Export pre-defined scroll strategies and interface to build custom ones.\nexport {ScrollStrategy} from './scroll-strategy';\nexport {ScrollStrategyOptions} from './scroll-strategy-options';\nexport {RepositionScrollStrategy} from './reposition-scroll-strategy';\nexport {CloseScrollStrategy} from './close-scroll-strategy';\nexport {NoopScrollStrategy} from './noop-scroll-strategy';\nexport {BlockScrollStrategy} from './block-scroll-strategy';\nexport class ScrollDispatchModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  exports: [Scrollable],\n  declarations: [Scrollable],\n  providers: [SCROLL_DISPATCHER_PROVIDER, ScrollStrategyOptions],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollDispatchModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatchModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatchModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {ScrollStrategy} from './scroll-strategy';\nimport {CloseScrollStrategy} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {ViewportRuler} from '../position/viewport-ruler';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n/**\n * Options for how an overlay will handle scrolling.\n * \n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nexport class ScrollStrategyOptions {\n/**\n * @param {?} _scrollDispatcher\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewportRuler: ViewportRuler) { }\n/**\n * Do nothing on scroll.\n */\nnoop = () => new NoopScrollStrategy();\n/**\n * Close the overlay as soon as the user scrolls.\n */\nclose = () => new CloseScrollStrategy(this._scrollDispatcher);\n/**\n * Block scrolling.\n */\nblock = () => new BlockScrollStrategy(this._viewportRuler);\n/**\n * Update the overlay's position on scroll.\n * @param config Configuration to be used inside the scroll strategy.\n * Allows debouncing the reposition calls.\n */\nreposition = (config?: RepositionScrollStrategyConfig) =>\n      new RepositionScrollStrategy(this._scrollDispatcher, config)\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n{type: ViewportRuler, },\n];\n}\n\nfunction ScrollStrategyOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollStrategyOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollStrategyOptions.ctorParameters;\n/**\n * Do nothing on scroll.\n * @type {?}\n */\nScrollStrategyOptions.prototype.noop;\n/**\n * Close the overlay as soon as the user scrolls.\n * @type {?}\n */\nScrollStrategyOptions.prototype.close;\n/**\n * Block scrolling.\n * @type {?}\n */\nScrollStrategyOptions.prototype.block;\n/**\n * Update the overlay's position on scroll.\n * \\@param config Configuration to be used inside the scroll strategy.\n * Allows debouncing the reposition calls.\n * @type {?}\n */\nScrollStrategyOptions.prototype.reposition;\n/** @type {?} */\nScrollStrategyOptions.prototype._scrollDispatcher;\n/** @type {?} */\nScrollStrategyOptions.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  scrollThrottle?: number;\n}\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n * @param {?=} _config\n */\nconstructor(\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _config?: RepositionScrollStrategyConfig) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      let /** @type {?} */ throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle, () => {\n        this._overlayRef.updatePosition();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction RepositionScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nRepositionScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollDispatcher;\n/** @type {?} */\nRepositionScrollStrategy.prototype._config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '../position/viewport-ruler';\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\nprivate _previousHTMLStyles = { top: '', left: '' };\nprivate _previousScrollPosition: { top: number, left: number };\nprivate _isEnabled = false;\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * @return {?}\n */\nattach() { }\n/**\n * @return {?}\n */\nenable() {\n    if (this._canBeEnabled()) {\n      const /** @type {?} */ root = document.documentElement;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = `${-this._previousScrollPosition.left}px`;\n      root.style.top = `${-this._previousScrollPosition.top}px`;\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._isEnabled) {\n      this._isEnabled = false;\n      document.documentElement.style.left = this._previousHTMLStyles.left;\n      document.documentElement.style.top = this._previousHTMLStyles.top;\n      document.documentElement.classList.remove('cdk-global-scrollblock');\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    if (document.documentElement.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const /** @type {?} */ body = document.body;\n    const /** @type {?} */ viewport = this._viewportRuler.getViewportRect();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n\nfunction BlockScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nBlockScrollStrategy.prototype._previousHTMLStyles;\n/** @type {?} */\nBlockScrollStrategy.prototype._previousScrollPosition;\n/** @type {?} */\nBlockScrollStrategy.prototype._isEnabled;\n/** @type {?} */\nBlockScrollStrategy.prototype._viewportRuler;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy} from './scroll-strategy';\n/**\n * Scroll strategy that doesn't do anything.\n */\nexport class NoopScrollStrategy implements ScrollStrategy {\n/**\n * @return {?}\n */\nenable() { }\n/**\n * @return {?}\n */\ndisable() { }\n/**\n * @return {?}\n */\nattach() { }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n */\nconstructor(private _scrollDispatcher: ScrollDispatcher) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      this._scrollSubscription = this._scrollDispatcher.scrolled(0, () => {\n        if (this._overlayRef.hasAttached()) {\n          this._overlayRef.detach();\n        }\n\n        this.disable();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction CloseScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nCloseScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollDispatcher;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '../overlay-ref';\n\n/**\n * Describes a strategy that will be used by an overlay\n * to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  enable: () => void;\n  disable: () => void;\n  attach: (overlayRef: OverlayRef) => void;\n}\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nexport function getMdScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, OnInit, OnDestroy, NgZone, Renderer2} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nexport class Scrollable implements OnInit, OnDestroy {\nprivate _elementScrolled: Subject<Event> = new Subject();\nprivate _scrollListener: Function | null;\n/**\n * @param {?} _elementRef\n * @param {?} _scroll\n * @param {?} _ngZone\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _scroll: ScrollDispatcher,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    this._scrollListener = this._ngZone.runOutsideAngular(() => {\n      return this._renderer.listen(this.getElementRef().nativeElement, 'scroll', (event: Event) => {\n        this._elementScrolled.next(event);\n      });\n    });\n\n    this._scroll.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._scroll.deregister(this);\n\n    if (this._scrollListener) {\n      this._scrollListener();\n      this._scrollListener = null;\n    }\n  }\n/**\n * Returns observable that emits when a scroll event is fired on the host element.\n * @return {?}\n */\nelementScrolled(): Observable<any> {\n    return this._elementScrolled.asObservable();\n  }\n/**\n * @return {?}\n */\ngetElementRef(): ElementRef {\n    return this._elementRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-scrollable], [cdkScrollable]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction Scrollable_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollable.ctorParameters;\n/** @type {?} */\nScrollable.prototype._elementScrolled;\n/** @type {?} */\nScrollable.prototype._scrollListener;\n/** @type {?} */\nScrollable.prototype._elementRef;\n/** @type {?} */\nScrollable.prototype._scroll;\n/** @type {?} */\nScrollable.prototype._ngZone;\n/** @type {?} */\nScrollable.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {Platform} from '../platform/platform';\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    platform: Platform,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['trigger'] && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\nprivate _updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n  exportAs: 'mdRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {ScrollDispatcher} from '../scroll/scroll-dispatcher';\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nexport class ViewportRuler {\n/**\n * Cached document client rectangle.\n */\nprivate _documentRect?: ClientRect;\n/**\n * @param {?} scrollDispatcher\n */\nconstructor(scrollDispatcher: ScrollDispatcher) {\n    // Subscribe to scroll and resize events and update the document rectangle on changes.\n    scrollDispatcher.scrolled(0, () => this._cacheViewportGeometry());\n  }\n/**\n * Gets a ClientRect for the viewport's bounds.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportRect(documentRect = this._documentRect): ClientRect {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);\n    const /** @type {?} */ height = window.innerHeight;\n    const /** @type {?} */ width = window.innerWidth;\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n/**\n * Gets the (top, left) scroll position of the viewport.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportScrollPosition(documentRect = this._documentRect) {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const /** @type {?} */ top = - /** @type {?} */((documentRect)).top || document.body.scrollTop || window.scrollY ||\n                  document.documentElement.scrollTop || 0;\n\n    const /** @type {?} */ left = - /** @type {?} */((documentRect)).left || document.body.scrollLeft || window.scrollX ||\n                  document.documentElement.scrollLeft || 0;\n\n    return {top, left};\n  }\n/**\n * Caches the latest client rectangle of the document element.\n * @return {?}\n */\n_cacheViewportGeometry() {\n    this._documentRect = document.documentElement.getBoundingClientRect();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n];\n}\n\nfunction ViewportRuler_tsickle_Closure_declarations() {\n/** @type {?} */\nViewportRuler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nViewportRuler.ctorParameters;\n/**\n * Cached document client rectangle.\n * @type {?}\n */\nViewportRuler.prototype._documentRect;\n}\n\n/**\n * @param {?} parentRuler\n * @param {?} scrollDispatcher\n * @return {?}\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                scrollDispatcher: ScrollDispatcher) {\n  return parentRuler || new ViewportRuler(scrollDispatcher);\n}\n\nexport const /** @type {?} */ VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], ScrollDispatcher],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, Injectable, NgZone, Optional, SkipSelf} from '@angular/core';\nimport {Platform} from '../../platform/index';\nimport {Scrollable} from './scrollable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {auditTime} from '../../rxjs/index';\n/**\n * Time in ms to throttle the scrolling events by default.\n */\nexport const DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nexport class ScrollDispatcher {\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) { }\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n */\n_scrolled: Subject<void> = new Subject<void>();\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n */\n_globalSubscription: Subscription | null = null;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n */\nprivate _scrolledCount = 0;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n */\nscrollableReferences: Map<Scrollable, Subscription> = new Map();\n/**\n * Registers a Scrollable with the service and listens for its scrolled events. When the\n * scrollable is scrolled, the service emits the event in its scrolled observable.\n * @param {?} scrollable Scrollable instance to be registered.\n * @return {?}\n */\nregister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());\n\n    this.scrollableReferences.set(scrollable, scrollSubscription);\n  }\n/**\n * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n * @param {?} scrollable Scrollable instance to be deregistered.\n * @return {?}\n */\nderegister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollableReference = this.scrollableReferences.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollableReferences.delete(scrollable);\n    }\n  }\n/**\n * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n * to override the default \"throttle\" time.\n * @param {?=} auditTimeInMs\n * @param {?=} callback\n * @return {?}\n */\nscrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME, callback: () => any): Subscription {\n    // Scroll events can only happen on the browser, so do nothing if we're not on the browser.\n    if (!this._platform.isBrowser) {\n      return Subscription.EMPTY;\n    }\n\n    // In the case of a 0ms delay, use an observable without auditTime\n    // since it does add a perceptible delay in processing overhead.\n    let /** @type {?} */ observable = auditTimeInMs > 0 ?\n      auditTime.call(this._scrolled.asObservable(), auditTimeInMs) :\n      this._scrolled.asObservable();\n\n    this._scrolledCount++;\n\n    if (!this._globalSubscription) {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        return merge(\n          fromEvent(window.document, 'scroll'),\n          fromEvent(window, 'resize')\n        ).subscribe(() => this._notify());\n      });\n    }\n\n    // Note that we need to do the subscribing from here, in order to be able to remove\n    // the global event listeners once there are no more subscriptions.\n    let /** @type {?} */ subscription = observable.subscribe(callback);\n\n    subscription.add(() => {\n      this._scrolledCount--;\n\n      if (this._globalSubscription && !this.scrollableReferences.size && !this._scrolledCount) {\n        this._globalSubscription.unsubscribe();\n        this._globalSubscription = null;\n      }\n    });\n\n    return subscription;\n  }\n/**\n * Returns all registered Scrollables that contain the provided element.\n * @param {?} elementRef\n * @return {?}\n */\ngetScrollContainers(elementRef: ElementRef): Scrollable[] {\n    const /** @type {?} */ scrollingContainers: Scrollable[] = [];\n\n    this.scrollableReferences.forEach((_subscription: Subscription, scrollable: Scrollable) => {\n      if (this.scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n/**\n * Returns true if the element is contained within the provided Scrollable.\n * @param {?} scrollable\n * @param {?} elementRef\n * @return {?}\n */\nscrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean {\n    let /** @type {?} */ element = elementRef.nativeElement;\n    let /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element.parentElement);\n\n    return false;\n  }\n/**\n * Sends a notification that a scroll event has been fired.\n * @return {?}\n */\n_notify() {\n    this._scrolled.next();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction ScrollDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatcher.ctorParameters;\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolled;\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype._globalSubscription;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolledCount;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype.scrollableReferences;\n/** @type {?} */\nScrollDispatcher.prototype._ngZone;\n/** @type {?} */\nScrollDispatcher.prototype._platform;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n\nexport const /** @type {?} */ SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform} from '../platform/platform';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement | null;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\n      platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isMousedown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN; /** @type {?} */((\n      rippleEl.parentNode)).removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement | null) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => { /** @type {?} */((\n        this._triggerElement)).removeEventListener(type, fn);\n      });\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isMousedown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\n    this._isMousedown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\n    if (this._isMousedown) {\n      this.onMouseup();\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line], [mdLine], [matLine]',\n  host: {'class': 'mat-line'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdLine, MdCommonModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {CompatibilityModule} from '../compatibility/compatibility';\nimport {BidiModule} from '../bidi/index';\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('md-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, compatibility mode, etc.\n * \n * This module should be imported to each top-level component module (e.g., MdTabsModule).\n */\nexport class MdCommonModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * @param {?} _document\n * @param {?} _sanityChecksEnabled\n */\nconstructor(\nprivate _document: any,\n      _sanityChecksEnabled: boolean) {\n\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\n      this._checkDoctype();\n      this._checkTheme();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (!this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, BidiModule],\n  exports: [CompatibilityModule, BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction MdCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCommonModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nMdCommonModule.prototype._hasDoneGlobalChecks;\n/** @type {?} */\nMdCommonModule.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, Directive, Inject, Optional, ElementRef, InjectionToken} from '@angular/core';\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Returns an exception to be thrown if the consumer has used\n * an invalid Material prefix on a component.\n * \\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\n  return Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [matCardSubtitle],\n  [matCardTitle],\n  [matDialogActions],\n  [matDialogClose],\n  [matDialogContent],\n  [matDialogTitle],\n  [matLine],\n  [matTabLabel],\n  [matTabLink],\n  [matTabNav],\n  [matTooltip],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-cell,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-error,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-header-cell,\n  mat-hint,\n  mat-icon,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-row,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-table,\n  mat-tab-group,\n  mat-toolbar`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-fab],\n  [md-icon-button],\n  [md-mini-fab],\n  [md-raised-button],\n  [mdCardSubtitle],\n  [mdCardTitle],\n  [mdDialogActions],\n  [mdDialogClose],\n  [mdDialogContent],\n  [mdDialogTitle],\n  [mdLine],\n  [mdTabLabel],\n  [mdTabLink],\n  [mdTabNav],\n  [mdTooltip],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-cell,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-error,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-header-cell,\n  md-hint,\n  md-icon,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-row,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-table,\n  md-tab-group,\n  md-toolbar`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["nextId","filter","observableOf","_applyConfigDefaults","state","nextUniqueId","clamp","animate","observableThrow","style","_uniqueIdCounter","first"],"mappings":"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"}